// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: stream.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from stream.proto</summary>
public static partial class StreamReflection {

  #region Descriptor
  /// <summary>File descriptor for stream.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static StreamReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxzdHJlYW0ucHJvdG8iSAoVQ0Rpc2NvdmVyeVBpbmdSZXF1ZXN0EhAKCHNl",
          "cXVlbmNlGAEgASgNEh0KFXBhY2tldF9zaXplX3JlcXVlc3RlZBgCIAEoDSJI",
          "ChZDRGlzY292ZXJ5UGluZ1Jlc3BvbnNlEhAKCHNlcXVlbmNlGAEgASgNEhwK",
          "FHBhY2tldF9zaXplX3JlY2VpdmVkGAIgASgNIjUKHUNTdHJlYW1pbmdDbGll",
          "bnRIYW5kc2hha2VJbmZvEhQKDG5ldHdvcmtfdGVzdBgCIAEoBSJDChNDQ2xp",
          "ZW50SGFuZHNoYWtlTXNnEiwKBGluZm8YASACKAsyHi5DU3RyZWFtaW5nQ2xp",
          "ZW50SGFuZHNoYWtlSW5mbyIsCh1DU3RyZWFtaW5nU2VydmVySGFuZHNoYWtl",
          "SW5mbxILCgNtdHUYASABKAUiQwoTQ1NlcnZlckhhbmRzaGFrZU1zZxIsCgRp",
          "bmZvGAEgAigLMh4uQ1N0cmVhbWluZ1NlcnZlckhhbmRzaGFrZUluZm8iYgoZ",
          "Q0F1dGhlbnRpY2F0aW9uUmVxdWVzdE1zZxINCgV0b2tlbhgBIAEoDBI2Cgd2",
          "ZXJzaW9uGAIgASgOMg8uRVN0cmVhbVZlcnNpb246FGtfRVN0cmVhbVZlcnNp",
          "b25Ob25lItQBChpDQXV0aGVudGljYXRpb25SZXNwb25zZU1zZxJLCgZyZXN1",
          "bHQYASABKA4yMC5DQXV0aGVudGljYXRpb25SZXNwb25zZU1zZy5BdXRoZW50",
          "aWNhdGlvblJlc3VsdDoJU1VDQ0VFREVEEjYKB3ZlcnNpb24YAiABKA4yDy5F",
          "U3RyZWFtVmVyc2lvbjoUa19FU3RyZWFtVmVyc2lvbk5vbmUiMQoUQXV0aGVu",
          "dGljYXRpb25SZXN1bHQSDQoJU1VDQ0VFREVEEAASCgoGRkFJTEVEEAEiDwoN",
          "Q0tlZXBBbGl2ZU1zZyKDAQoUQ1N0YXJ0TmV0d29ya1Rlc3RNc2cSDgoGZnJh",
          "bWVzGAEgASgNEhEKCWZyYW1lcmF0ZRgCIAEoDRIUCgxiaXRyYXRlX2ticHMY",
          "AyABKA0SGgoSYnVyc3RfYml0cmF0ZV9rYnBzGAQgASgNEhYKDmJhbmR3aWR0",
          "aF90ZXN0GAUgASgIIokBChBDU3RyZWFtVmlkZW9Nb2RlEg0KBXdpZHRoGAEg",
          "AigNEg4KBmhlaWdodBgCIAIoDRIUCgxyZWZyZXNoX3JhdGUYAyABKA0SHgoW",
          "cmVmcmVzaF9yYXRlX251bWVyYXRvchgEIAEoDRIgChhyZWZyZXNoX3JhdGVf",
          "ZGVub21pbmF0b3IYBSABKA0i4wIKFENTdHJlYW1pbmdDbGllbnRDYXBzEhMK",
          "C3N5c3RlbV9pbmZvGAEgASgJEhoKEnN5c3RlbV9jYW5fc3VzcGVuZBgCIAEo",
          "CBIjChttYXhpbXVtX2RlY29kZV9iaXRyYXRlX2ticHMYAyABKAUSIgoabWF4",
          "aW11bV9idXJzdF9iaXRyYXRlX2ticHMYBCABKAUSGwoTc3VwcG9ydHNfdmlk",
          "ZW9faGV2YxgFIAEoCBIbChNkaXNhYmxlX3N0ZWFtX3N0b3JlGAYgASgIEh0K",
          "FWRpc2FibGVfY2xpZW50X2N1cnNvchgHIAEoCBInCh9kaXNhYmxlX2ludGVs",
          "X2hhcmR3YXJlX2VuY29kaW5nGAggASgIEiUKHWRpc2FibGVfYW1kX2hhcmR3",
          "YXJlX2VuY29kaW5nGAkgASgIEigKIGRpc2FibGVfbnZpZGlhX2hhcmR3YXJl",
          "X2VuY29kaW5nGAogASgIIooEChZDU3RyZWFtaW5nQ2xpZW50Q29uZmlnEkQK",
          "B3F1YWxpdHkYASABKA4yGS5FU3RyZWFtUXVhbGl0eVByZWZlcmVuY2U6GGtf",
          "RVN0cmVhbVF1YWxpdHlCYWxhbmNlZBIcChRtYXhpbXVtX3Jlc29sdXRpb25f",
          "eBgCIAEoDRIcChRtYXhpbXVtX3Jlc29sdXRpb25feRgDIAEoDRIjChttYXhp",
          "bXVtX2ZyYW1lcmF0ZV9udW1lcmF0b3IYBCABKA0SJQodbWF4aW11bV9mcmFt",
          "ZXJhdGVfZGVub21pbmF0b3IYBSABKA0SIAoUbWF4aW11bV9iaXRyYXRlX2ti",
          "cHMYBiABKAU6Ai0xEiYKGGVuYWJsZV9oYXJkd2FyZV9kZWNvZGluZxgHIAEo",
          "CDoEdHJ1ZRIpChplbmFibGVfcGVyZm9ybWFuY2Vfb3ZlcmxheRgIIAEoCDoF",
          "ZmFsc2USJAoWZW5hYmxlX3ZpZGVvX3N0cmVhbWluZxgJIAEoCDoEdHJ1ZRIk",
          "ChZlbmFibGVfYXVkaW9fc3RyZWFtaW5nGAogASgIOgR0cnVlEiQKFmVuYWJs",
          "ZV9pbnB1dF9zdHJlYW1pbmcYCyABKAg6BHRydWUSGQoOYXVkaW9fY2hhbm5l",
          "bHMYDCABKAU6ATISIAoRZW5hYmxlX3ZpZGVvX2hldmMYDSABKAg6BWZhbHNl",
          "IrsCChZDU3RyZWFtaW5nU2VydmVyQ29uZmlnEiEKGWNoYW5nZV9kZXNrdG9w",
          "X3Jlc29sdXRpb24YASABKAgSJQodZHluYW1pY2FsbHlfYWRqdXN0X3Jlc29s",
          "dXRpb24YAiABKAgSHAoUZW5hYmxlX2NhcHR1cmVfbnZmYmMYAyABKAgSJwof",
          "ZW5hYmxlX2hhcmR3YXJlX2VuY29kaW5nX252aWRpYRgEIAEoCBIkChxlbmFi",
          "bGVfaGFyZHdhcmVfZW5jb2RpbmdfYW1kGAUgASgIEiYKHmVuYWJsZV9oYXJk",
          "d2FyZV9lbmNvZGluZ19pbnRlbBgGIAEoCBIhChlzb2Z0d2FyZV9lbmNvZGlu",
          "Z190aHJlYWRzGAcgASgFEh8KF2VuYWJsZV90cmFmZmljX3ByaW9yaXR5GAgg",
          "ASgIIo0CChFDTmVnb3RpYXRlZENvbmZpZxIVCg1yZWxpYWJsZV9kYXRhGAEg",
          "ASgIEkkKFHNlbGVjdGVkX2F1ZGlvX2NvZGVjGAIgASgOMhIuRVN0cmVhbUF1",
          "ZGlvQ29kZWM6F2tfRVN0cmVhbUF1ZGlvQ29kZWNOb25lEkkKFHNlbGVjdGVk",
          "X3ZpZGVvX2NvZGVjGAMgASgOMhIuRVN0cmVhbVZpZGVvQ29kZWM6F2tfRVN0",
          "cmVhbVZpZGVvQ29kZWNOb25lEjAKFWF2YWlsYWJsZV92aWRlb19tb2RlcxgE",
          "IAMoCzIRLkNTdHJlYW1WaWRlb01vZGUSGQoRZW5hYmxlX3JlbW90ZV9oaWQY",
          "BSABKAgisQEKE0NOZWdvdGlhdGlvbkluaXRNc2cSFQoNcmVsaWFibGVfZGF0",
          "YRgBIAEoCBIyChZzdXBwb3J0ZWRfYXVkaW9fY29kZWNzGAIgAygOMhIuRVN0",
          "cmVhbUF1ZGlvQ29kZWMSMgoWc3VwcG9ydGVkX3ZpZGVvX2NvZGVjcxgDIAMo",
          "DjISLkVTdHJlYW1WaWRlb0NvZGVjEhsKE3N1cHBvcnRzX3JlbW90ZV9oaWQY",
          "BCABKAgirgEKGENOZWdvdGlhdGlvblNldENvbmZpZ01zZxIiCgZjb25maWcY",
          "ASACKAsyEi5DTmVnb3RpYXRlZENvbmZpZxI4ChdzdHJlYW1pbmdfY2xpZW50",
          "X2NvbmZpZxgCIAEoCzIXLkNTdHJlYW1pbmdDbGllbnRDb25maWcSNAoVc3Ry",
          "ZWFtaW5nX2NsaWVudF9jYXBzGAMgASgLMhUuQ1N0cmVhbWluZ0NsaWVudENh",
          "cHMiGQoXQ05lZ290aWF0aW9uQ29tcGxldGVNc2cimgEKEkNTdGFydEF1ZGlv",
          "RGF0YU1zZxIPCgdjaGFubmVsGAIgAigNEjoKBWNvZGVjGAMgASgOMhIuRVN0",
          "cmVhbUF1ZGlvQ29kZWM6F2tfRVN0cmVhbUF1ZGlvQ29kZWNOb25lEhIKCmNv",
          "ZGVjX2RhdGEYBCABKAwSEQoJZnJlcXVlbmN5GAUgASgNEhAKCGNoYW5uZWxz",
          "GAYgASgNIhMKEUNTdG9wQXVkaW9EYXRhTXNnIpQBChJDU3RhcnRWaWRlb0Rh",
          "dGFNc2cSDwoHY2hhbm5lbBgBIAIoDRI6CgVjb2RlYxgCIAEoDjISLkVTdHJl",
          "YW1WaWRlb0NvZGVjOhdrX0VTdHJlYW1WaWRlb0NvZGVjTm9uZRISCgpjb2Rl",
          "Y19kYXRhGAMgASgMEg0KBXdpZHRoGAQgASgNEg4KBmhlaWdodBgFIAEoDSIT",
          "ChFDU3RvcFZpZGVvRGF0YU1zZyI5ChRDSW5wdXRMYXRlbmN5VGVzdE1zZxIS",
          "CgppbnB1dF9tYXJrGAEgAigNEg0KBWNvbG9yGAIgASgNIm4KFENJbnB1dE1v",
          "dXNlTW90aW9uTXNnEhIKCmlucHV0X21hcmsYASABKA0SFAoMeF9ub3JtYWxp",
          "emVkGAIgASgCEhQKDHlfbm9ybWFsaXplZBgDIAEoAhIKCgJkeBgEIAEoBRIK",
          "CgJkeRgFIAEoBSJwChNDSW5wdXRNb3VzZVdoZWVsTXNnEhIKCmlucHV0X21h",
          "cmsYASABKA0SRQoJZGlyZWN0aW9uGAIgAigOMhsuRVN0cmVhbU1vdXNlV2hl",
          "ZWxEaXJlY3Rpb246FWtfRVN0cmVhbU1vdXNlV2hlZWxVcCJnChJDSW5wdXRN",
          "b3VzZURvd25Nc2cSEgoKaW5wdXRfbWFyaxgBIAEoDRI9CgZidXR0b24YAiAC",
          "KA4yEy5FU3RyZWFtTW91c2VCdXR0b246GGtfRVN0cmVhbU1vdXNlQnV0dG9u",
          "TGVmdCJlChBDSW5wdXRNb3VzZVVwTXNnEhIKCmlucHV0X21hcmsYASABKA0S",
          "PQoGYnV0dG9uGAIgAigOMhMuRVN0cmVhbU1vdXNlQnV0dG9uOhhrX0VTdHJl",
          "YW1Nb3VzZUJ1dHRvbkxlZnQiOAoQQ0lucHV0S2V5RG93bk1zZxISCgppbnB1",
          "dF9tYXJrGAEgASgNEhAKCHNjYW5jb2RlGAIgAigNIjYKDkNJbnB1dEtleVVw",
          "TXNnEhIKCmlucHV0X21hcmsYASABKA0SEAoIc2NhbmNvZGUYAiACKA0iNgoN",
          "Q0lucHV0VGV4dE1zZxISCgppbnB1dF9tYXJrGAEgASgNEhEKCXRleHRfdXRm",
          "OBgCIAIoCSIcCgxDU2V0VGl0bGVNc2cSDAoEdGV4dBgBIAEoCSI7CgtDU2V0",
          "SWNvbk1zZxINCgV3aWR0aBgBIAEoBRIOCgZoZWlnaHQYAiABKAUSDQoFaW1h",
          "Z2UYAyABKAwiPAoOQ1Nob3dDdXJzb3JNc2cSFAoMeF9ub3JtYWxpemVkGAEg",
          "ASgCEhQKDHlfbm9ybWFsaXplZBgCIAEoAiIQCg5DSGlkZUN1cnNvck1zZyIi",
          "Cg1DU2V0Q3Vyc29yTXNnEhEKCWN1cnNvcl9pZBgBIAIoBCInChJDR2V0Q3Vy",
          "c29ySW1hZ2VNc2cSEQoJY3Vyc29yX2lkGAEgAigEInMKEkNTZXRDdXJzb3JJ",
          "bWFnZU1zZxIRCgljdXJzb3JfaWQYASACKAQSDQoFd2lkdGgYAiABKAUSDgoG",
          "aGVpZ2h0GAMgASgFEg0KBWhvdF94GAQgASgFEg0KBWhvdF95GAUgASgFEg0K",
          "BWltYWdlGAYgASgMIjUKFENWaWRlb0RlY29kZXJJbmZvTXNnEgwKBGluZm8Y",
          "ASABKAkSDwoHdGhyZWFkcxgCIAEoBSIkChRDVmlkZW9FbmNvZGVySW5mb01z",
          "ZxIMCgRpbmZvGAEgASgJIg4KDENRdWl0UmVxdWVzdCIlChBDRGVsZXRlQ3Vy",
          "c29yTXNnEhEKCWN1cnNvcl9pZBgBIAIoBCJEChlDU2V0U3RyZWFtaW5nQ2xp",
          "ZW50Q29uZmlnEicKBmNvbmZpZxgBIAIoCzIXLkNTdHJlYW1pbmdDbGllbnRD",
          "b25maWciHQoKQ1NldFFvU01zZxIPCgd1c2VfcW9zGAEgAigIIngKFkNTZXRU",
          "YXJnZXRGcmFtZXJhdGVNc2cSEQoJZnJhbWVyYXRlGAEgAigNEg8KB3JlYXNv",
          "bnMYAiABKA0SGwoTZnJhbWVyYXRlX251bWVyYXRvchgDIAEoDRIdChVmcmFt",
          "ZXJhdGVfZGVub21pbmF0b3IYBCABKA0iJwoUQ1NldFRhcmdldEJpdHJhdGVN",
          "c2cSDwoHYml0cmF0ZRgBIAIoBSIlChJDT3ZlcmxheUVuYWJsZWRNc2cSDwoH",
          "ZW5hYmxlZBgBIAIoCCImChBDU2V0R2FtbWFSYW1wTXNnEhIKCmdhbW1hX3Jh",
          "bXAYASABKAwiTAoPQ1NldEFjdGl2aXR5TXNnEjkKCGFjdGl2aXR5GAEgASgO",
          "MhAuRVN0cmVhbUFjdGl2aXR5OhVrX0VTdHJlYW1BY3Rpdml0eUlkbGUiEwoR",
          "Q1N5c3RlbVN1c3BlbmRNc2ciKgoWQ1ZpcnR1YWxIZXJlUmVxdWVzdE1zZxIQ",
          "Cghob3N0bmFtZRgBIAEoCSI1ChRDVmlydHVhbEhlcmVSZWFkeU1zZxIdChVs",
          "aWNlbnNlZF9kZXZpY2VfY291bnQYASABKA0iNAoaQ1ZpcnR1YWxIZXJlU2hh",
          "cmVEZXZpY2VNc2cSFgoOZGV2aWNlX2FkZHJlc3MYASABKAkiJwoUQ1NldFNw",
          "ZWN0YXRvck1vZGVNc2cSDwoHZW5hYmxlZBgBIAEoCCIdCg1DUmVtb3RlSElE",
          "TXNnEgwKBGRhdGEYASABKAwiOAoVQ1RvdWNoQ29uZmlnQWN0aXZlTXNnEg0K",
          "BWFwcGlkGAEgASgNEhAKCHJldmlzaW9uGAIgASgNIicKFkNHZXRUb3VjaENv",
          "bmZpZ0RhdGFNc2cSDQoFYXBwaWQYASABKA0iVwoWQ1NldFRvdWNoQ29uZmln",
          "RGF0YU1zZxINCgVhcHBpZBgBIAEoDRIQCghyZXZpc2lvbhgCIAEoDRIMCgRk",
          "YXRhGAMgASgMEg4KBmxheW91dBgEIAEoDCI6ChlDU2F2ZVRvdWNoQ29uZmln",
          "TGF5b3V0TXNnEg0KBWFwcGlkGAEgASgNEg4KBmxheW91dBgEIAEoDCI/ChhD",
          "VG91Y2hBY3Rpb25TZXRBY3RpdmVNc2cSDQoFYXBwaWQYASABKA0SFAoMYWN0",
          "aW9uc2V0X2lkGAIgASgFIjMKFENHZXRUb3VjaEljb25EYXRhTXNnEg0KBWFw",
          "cGlkGAEgASgNEgwKBGljb24YAiABKAkiQQoUQ1NldFRvdWNoSWNvbkRhdGFN",
          "c2cSDQoFYXBwaWQYASABKA0SDAoEaWNvbhgCIAEoCRIMCgRkYXRhGAMgASgM",
          "IiUKEkNTdHJlYW1EYXRhTG9zdE1zZxIPCgdwYWNrZXRzGAEgAygNImYKDENB",
          "dWRpb0Zvcm1hdBIxCgZmb3JtYXQYASACKA4yDS5FQXVkaW9Gb3JtYXQ6Emtf",
          "RUF1ZGlvRm9ybWF0Tm9uZRIRCglmcmVxdWVuY3kYAiABKA0SEAoIY2hhbm5l",
          "bHMYAyABKA0iYAoMQ1ZpZGVvRm9ybWF0EjEKBmZvcm1hdBgBIAIoDjINLkVW",
          "aWRlb0Zvcm1hdDoSa19FVmlkZW9Gb3JtYXROb25lEg0KBXdpZHRoGAIgASgN",
          "Eg4KBmhlaWdodBgDIAEoDSJgCgtDRnJhbWVFdmVudBI+CghldmVudF9pZBgB",
          "IAIoDjISLkVTdHJlYW1GcmFtZUV2ZW50OhhrX0VTdHJlYW1JbnB1dEV2ZW50",
          "U3RhcnQSEQoJdGltZXN0YW1wGAIgAigNIs8CCgtDRnJhbWVTdGF0cxIQCghm",
          "cmFtZV9pZBgBIAIoDRISCgppbnB1dF9tYXJrGAIgASgNEhwKBmV2ZW50cxgD",
          "IAMoCzIMLkNGcmFtZUV2ZW50EkAKBnJlc3VsdBgEIAIoDjITLkVTdHJlYW1G",
          "cmFtZVJlc3VsdDoba19FU3RyZWFtRnJhbWVSZXN1bHRQZW5kaW5nEhkKEWZy",
          "YW1lX3N0YXJ0X2RlbHRhGAUgASgCEhsKE2ZyYW1lX2Rpc3BsYXlfZGVsdGEY",
          "BiABKAISEQoJcGluZ190aW1lGAcgASgCEhYKDnNlcnZlcl9iaXRyYXRlGAgg",
          "ASgCEhYKDmNsaWVudF9iaXRyYXRlGAkgASgCEhYKDmxpbmtfYmFuZHdpZHRo",
          "GAogASgCEhMKC3BhY2tldF9sb3NzGAsgASgCEhIKCmZyYW1lX3NpemUYDCAB",
          "KA0iiAEKGkNGcmFtZVN0YXRBY2N1bXVsYXRlZFZhbHVlEjoKCXN0YXRfdHlw",
          "ZRgBIAIoDjIWLkVGcmFtZUFjY3VtdWxhdGVkU3RhdDoPa19FRnJhbWVTdGF0",
          "RlBTEg0KBWNvdW50GAIgAigFEg8KB2F2ZXJhZ2UYAyACKAISDgoGc3RkZGV2",
          "GAQgASgCIsEBChJDRnJhbWVTdGF0c0xpc3RNc2cSPQoJZGF0YV90eXBlGAEg",
          "AigOMhMuRVN0cmVhbWluZ0RhdGFUeXBlOhVrX0VTdHJlYW1pbmdBdWRpb0Rh",
          "dGESGwoFc3RhdHMYAiADKAsyDC5DRnJhbWVTdGF0cxI2ChFhY2N1bXVsYXRl",
          "ZF9zdGF0cxgDIAMoCzIbLkNGcmFtZVN0YXRBY2N1bXVsYXRlZFZhbHVlEhcK",
          "D2xhdGVzdF9mcmFtZV9pZBgEIAIoBSJ4ChZDU3RyZWFtaW5nU2Vzc2lvblN0",
          "YXRzEh0KFWZyYW1lX2xvc3NfcGVyY2VudGFnZRgBIAEoAhIfChdhdmVyYWdl",
          "X25ldHdvcmtfdGltZV9tcxgCIAEoAhIeChZzdGRkZXZfbmV0d29ya190aW1l",
          "X21zGAMgASgCIiMKDUNEZWJ1Z0R1bXBNc2cSEgoKc2NyZWVuc2hvdBgBIAEo",
          "DCIoCgdDTG9nTXNnEgwKBHR5cGUYASABKAUSDwoHbWVzc2FnZRgCIAEoCSJQ",
          "Cg1DTG9nVXBsb2FkTXNnEjEKBHR5cGUYASABKA4yDS5FTG9nRmlsZVR5cGU6",
          "FGtfRUxvZ0ZpbGVTeXN0ZW1Cb290EgwKBGRhdGEYAyABKAwipgIKE0NUcmFu",
          "c3BvcnRTaWduYWxNc2cSMgoGd2VicnRjGAEgASgLMiIuQ1RyYW5zcG9ydFNp",
          "Z25hbE1zZy5XZWJSVENNZXNzYWdlGtoBCg1XZWJSVENNZXNzYWdlEhIKCGdy",
          "ZWV0aW5nGAEgASgISAASDwoFb2ZmZXIYAiABKAlIABIQCgZhbnN3ZXIYAyAB",
          "KAlIABJBCgljYW5kaWRhdGUYBCABKAsyLC5DVHJhbnNwb3J0U2lnbmFsTXNn",
          "LldlYlJUQ01lc3NhZ2UuQ2FuZGlkYXRlSAAaSAoJQ2FuZGlkYXRlEg8KB3Nk",
          "cF9taWQYASABKAkSFwoPc2RwX21saW5lX2luZGV4GAIgASgFEhEKCWNhbmRp",
          "ZGF0ZRgDIAEoCUIFCgNtc2cqswEKDkVTdHJlYW1DaGFubmVsEiQKF2tfRVN0",
          "cmVhbUNoYW5uZWxJbnZhbGlkEP///////////wESHQoZa19FU3RyZWFtQ2hh",
          "bm5lbERpc2NvdmVyeRAAEhsKF2tfRVN0cmVhbUNoYW5uZWxDb250cm9sEAES",
          "GQoVa19FU3RyZWFtQ2hhbm5lbFN0YXRzEAISJAoga19FU3RyZWFtQ2hhbm5l",
          "bERhdGFDaGFubmVsU3RhcnQQAypgChdFU3RyZWFtRGlzY292ZXJ5TWVzc2Fn",
          "ZRIhCh1rX0VTdHJlYW1EaXNjb3ZlcnlQaW5nUmVxdWVzdBABEiIKHmtfRVN0",
          "cmVhbURpc2NvdmVyeVBpbmdSZXNwb25zZRACKuYVChVFU3RyZWFtQ29udHJv",
          "bE1lc3NhZ2USKQola19FU3RyZWFtQ29udHJvbEF1dGhlbnRpY2F0aW9uUmVx",
          "dWVzdBABEioKJmtfRVN0cmVhbUNvbnRyb2xBdXRoZW50aWNhdGlvblJlc3Bv",
          "bnNlEAISIwofa19FU3RyZWFtQ29udHJvbE5lZ290aWF0aW9uSW5pdBADEigK",
          "JGtfRVN0cmVhbUNvbnRyb2xOZWdvdGlhdGlvblNldENvbmZpZxAEEicKI2tf",
          "RVN0cmVhbUNvbnRyb2xOZWdvdGlhdGlvbkNvbXBsZXRlEAUSIwofa19FU3Ry",
          "ZWFtQ29udHJvbENsaWVudEhhbmRzaGFrZRAGEiMKH2tfRVN0cmVhbUNvbnRy",
          "b2xTZXJ2ZXJIYW5kc2hha2UQBxIkCiBrX0VTdHJlYW1Db250cm9sU3RhcnRO",
          "ZXR3b3JrVGVzdBAIEh0KGWtfRVN0cmVhbUNvbnRyb2xLZWVwQWxpdmUQCRIn",
          "CiNrX0VTdHJlYW1Db250cm9sX0xBU1RfU0VUVVBfTUVTU0FHRRAPEiIKHmtf",
          "RVN0cmVhbUNvbnRyb2xTdGFydEF1ZGlvRGF0YRAyEiEKHWtfRVN0cmVhbUNv",
          "bnRyb2xTdG9wQXVkaW9EYXRhEDMSIgoea19FU3RyZWFtQ29udHJvbFN0YXJ0",
          "VmlkZW9EYXRhEDQSIQoda19FU3RyZWFtQ29udHJvbFN0b3BWaWRlb0RhdGEQ",
          "NRIkCiBrX0VTdHJlYW1Db250cm9sSW5wdXRNb3VzZU1vdGlvbhA2EiMKH2tf",
          "RVN0cmVhbUNvbnRyb2xJbnB1dE1vdXNlV2hlZWwQNxIiCh5rX0VTdHJlYW1D",
          "b250cm9sSW5wdXRNb3VzZURvd24QOBIgChxrX0VTdHJlYW1Db250cm9sSW5w",
          "dXRNb3VzZVVwEDkSIAoca19FU3RyZWFtQ29udHJvbElucHV0S2V5RG93bhA6",
          "Eh4KGmtfRVN0cmVhbUNvbnRyb2xJbnB1dEtleVVwEDsSMQota19FU3RyZWFt",
          "Q29udHJvbElucHV0R2FtZXBhZEF0dGFjaGVkX09CU09MRVRFEDwSLgoqa19F",
          "U3RyZWFtQ29udHJvbElucHV0R2FtZXBhZEV2ZW50X09CU09MRVRFED0SMQot",
          "a19FU3RyZWFtQ29udHJvbElucHV0R2FtZXBhZERldGFjaGVkX09CU09MRVRF",
          "ED4SHgoaa19FU3RyZWFtQ29udHJvbFNob3dDdXJzb3IQPxIeChprX0VTdHJl",
          "YW1Db250cm9sSGlkZUN1cnNvchBAEh0KGWtfRVN0cmVhbUNvbnRyb2xTZXRD",
          "dXJzb3IQQRIiCh5rX0VTdHJlYW1Db250cm9sR2V0Q3Vyc29ySW1hZ2UQQhIi",
          "Ch5rX0VTdHJlYW1Db250cm9sU2V0Q3Vyc29ySW1hZ2UQQxIgChxrX0VTdHJl",
          "YW1Db250cm9sRGVsZXRlQ3Vyc29yEEQSJgoia19FU3RyZWFtQ29udHJvbFNl",
          "dFRhcmdldEZyYW1lcmF0ZRBFEiQKIGtfRVN0cmVhbUNvbnRyb2xJbnB1dExh",
          "dGVuY3lUZXN0EEYSKgoma19FU3RyZWFtQ29udHJvbEdhbWVwYWRSdW1ibGVf",
          "T0JTT0xFVEUQRxIiCh5rX0VTdHJlYW1Db250cm9sT3ZlcmxheUVuYWJsZWQQ",
          "ShI0CjBrX0VTdHJlYW1Db250cm9sSW5wdXRDb250cm9sbGVyQXR0YWNoZWRf",
          "T0JTT0xFVEUQSxIxCi1rX0VTdHJlYW1Db250cm9sSW5wdXRDb250cm9sbGVy",
          "U3RhdGVfT0JTT0xFVEUQTBIvCitrX0VTdHJlYW1Db250cm9sVHJpZ2dlckhh",
          "cHRpY1B1bHNlX09CU09MRVRFEE0SNAowa19FU3RyZWFtQ29udHJvbElucHV0",
          "Q29udHJvbGxlckRldGFjaGVkX09CU09MRVRFEE4SJAoga19FU3RyZWFtQ29u",
          "dHJvbFZpZGVvRGVjb2RlckluZm8QUBIcChhrX0VTdHJlYW1Db250cm9sU2V0",
          "VGl0bGUQURIbChdrX0VTdHJlYW1Db250cm9sU2V0SWNvbhBSEh8KG2tfRVN0",
          "cmVhbUNvbnRyb2xRdWl0UmVxdWVzdBBTEhoKFmtfRVN0cmVhbUNvbnRyb2xT",
          "ZXRRb1MQVxI8CjhrX0VTdHJlYW1Db250cm9sSW5wdXRDb250cm9sbGVyV2ly",
          "ZWxlc3NQcmVzZW5jZV9PQlNPTEVURRBYEiAKHGtfRVN0cmVhbUNvbnRyb2xT",
          "ZXRHYW1tYVJhbXAQWRIkCiBrX0VTdHJlYW1Db250cm9sVmlkZW9FbmNvZGVy",
          "SW5mbxBaEjQKMGtfRVN0cmVhbUNvbnRyb2xJbnB1dENvbnRyb2xsZXJTdGF0",
          "ZUhJRF9PQlNPTEVURRBdEiQKIGtfRVN0cmVhbUNvbnRyb2xTZXRUYXJnZXRC",
          "aXRyYXRlEF4SOAo0a19FU3RyZWFtQ29udHJvbFNldENvbnRyb2xsZXJQYWly",
          "aW5nRW5hYmxlZF9PQlNPTEVURRBfEjcKM2tfRVN0cmVhbUNvbnRyb2xTZXRD",
          "b250cm9sbGVyUGFpcmluZ1Jlc3VsdF9PQlNPTEVURRBgEjgKNGtfRVN0cmVh",
          "bUNvbnRyb2xUcmlnZ2VyQ29udHJvbGxlckRpc2Nvbm5lY3RfT0JTT0xFVEUQ",
          "YRIfChtrX0VTdHJlYW1Db250cm9sU2V0QWN0aXZpdHkQYhIsCihrX0VTdHJl",
          "YW1Db250cm9sU2V0U3RyZWFtaW5nQ2xpZW50Q29uZmlnEGMSIQoda19FU3Ry",
          "ZWFtQ29udHJvbFN5c3RlbVN1c3BlbmQQZBIyCi5rX0VTdHJlYW1Db250cm9s",
          "U2V0Q29udHJvbGxlclNldHRpbmdzX09CU09MRVRFEGUSJgoia19FU3RyZWFt",
          "Q29udHJvbFZpcnR1YWxIZXJlUmVxdWVzdBBmEiQKIGtfRVN0cmVhbUNvbnRy",
          "b2xWaXJ0dWFsSGVyZVJlYWR5EGcSKgoma19FU3RyZWFtQ29udHJvbFZpcnR1",
          "YWxIZXJlU2hhcmVEZXZpY2UQaBIkCiBrX0VTdHJlYW1Db250cm9sU2V0U3Bl",
          "Y3RhdG9yTW9kZRBpEh0KGWtfRVN0cmVhbUNvbnRyb2xSZW1vdGVISUQQahIn",
          "CiNrX0VTdHJlYW1Db250cm9sU3RhcnRNaWNyb3Bob25lRGF0YRBrEiYKImtf",
          "RVN0cmVhbUNvbnRyb2xTdG9wTWljcm9waG9uZURhdGEQbBIdChlrX0VTdHJl",
          "YW1Db250cm9sSW5wdXRUZXh0EG0SJQoha19FU3RyZWFtQ29udHJvbFRvdWNo",
          "Q29uZmlnQWN0aXZlEG4SJgoia19FU3RyZWFtQ29udHJvbEdldFRvdWNoQ29u",
          "ZmlnRGF0YRBvEiYKImtfRVN0cmVhbUNvbnRyb2xTZXRUb3VjaENvbmZpZ0Rh",
          "dGEQcBIpCiVrX0VTdHJlYW1Db250cm9sU2F2ZVRvdWNoQ29uZmlnTGF5b3V0",
          "EHESKAoka19FU3RyZWFtQ29udHJvbFRvdWNoQWN0aW9uU2V0QWN0aXZlEHIS",
          "JAoga19FU3RyZWFtQ29udHJvbEdldFRvdWNoSWNvbkRhdGEQcxIkCiBrX0VT",
          "dHJlYW1Db250cm9sU2V0VG91Y2hJY29uRGF0YRB0KkcKDkVTdHJlYW1WZXJz",
          "aW9uEhgKFGtfRVN0cmVhbVZlcnNpb25Ob25lEAASGwoXa19FU3RyZWFtVmVy",
          "c2lvbkN1cnJlbnQQASrAAQoRRVN0cmVhbUF1ZGlvQ29kZWMSGwoXa19FU3Ry",
          "ZWFtQXVkaW9Db2RlY05vbmUQABIaChZrX0VTdHJlYW1BdWRpb0NvZGVjUmF3",
          "EAESHQoZa19FU3RyZWFtQXVkaW9Db2RlY1ZvcmJpcxACEhsKF2tfRVN0cmVh",
          "bUF1ZGlvQ29kZWNPcHVzEAMSGgoWa19FU3RyZWFtQXVkaW9Db2RlY01QMxAE",
          "EhoKFmtfRVN0cmVhbUF1ZGlvQ29kZWNBQUMQBSr6AQoRRVN0cmVhbVZpZGVv",
          "Q29kZWMSGwoXa19FU3RyZWFtVmlkZW9Db2RlY05vbmUQABIaChZrX0VTdHJl",
          "YW1WaWRlb0NvZGVjUmF3EAESGgoWa19FU3RyZWFtVmlkZW9Db2RlY1ZQOBAC",
          "EhoKFmtfRVN0cmVhbVZpZGVvQ29kZWNWUDkQAxIbChdrX0VTdHJlYW1WaWRl",
          "b0NvZGVjSDI2NBAEEhsKF2tfRVN0cmVhbVZpZGVvQ29kZWNIRVZDEAUSHAoY",
          "a19FU3RyZWFtVmlkZW9Db2RlY09SQlgxEAYSHAoYa19FU3RyZWFtVmlkZW9D",
          "b2RlY09SQlgyEAcqcQoYRVN0cmVhbVF1YWxpdHlQcmVmZXJlbmNlEhgKFGtf",
          "RVN0cmVhbVF1YWxpdHlGYXN0EAESHAoYa19FU3RyZWFtUXVhbGl0eUJhbGFu",
          "Y2VkEAISHQoZa19FU3RyZWFtUXVhbGl0eUJlYXV0aWZ1bBADKlgKDkVTdHJl",
          "YW1CaXRyYXRlEicKGmtfRVN0cmVhbUJpdHJhdGVBdXRvZGV0ZWN0EP//////",
          "/////wESHQoZa19FU3RyZWFtQml0cmF0ZVVubGltaXRlZBAAKmoKEkVTdHJl",
          "YW1pbmdEYXRhVHlwZRIZChVrX0VTdHJlYW1pbmdBdWRpb0RhdGEQABIZChVr",
          "X0VTdHJlYW1pbmdWaWRlb0RhdGEQARIeChprX0VTdHJlYW1pbmdNaWNyb3Bo",
          "b25lRGF0YRACKssBChJFU3RyZWFtTW91c2VCdXR0b24SHAoYa19FU3RyZWFt",
          "TW91c2VCdXR0b25MZWZ0EAESHQoZa19FU3RyZWFtTW91c2VCdXR0b25SaWdo",
          "dBACEh4KGmtfRVN0cmVhbU1vdXNlQnV0dG9uTWlkZGxlEBASGgoWa19FU3Ry",
          "ZWFtTW91c2VCdXR0b25YMRAgEhoKFmtfRVN0cmVhbU1vdXNlQnV0dG9uWDIQ",
          "QBIgChtrX0VTdHJlYW1Nb3VzZUJ1dHRvblVua25vd24QgCAqmAEKGkVTdHJl",
          "YW1Nb3VzZVdoZWVsRGlyZWN0aW9uEhkKFWtfRVN0cmVhbU1vdXNlV2hlZWxV",
          "cBB4EiQKF2tfRVN0cmVhbU1vdXNlV2hlZWxEb3duEIj//////////wESGwoX",
          "a19FU3RyZWFtTW91c2VXaGVlbExlZnQQAxIcChhrX0VTdHJlYW1Nb3VzZVdo",
          "ZWVsUmlnaHQQBCqnBgoXRVN0cmVhbUdhbWVwYWRJbnB1dFR5cGUSIAoca19F",
          "U3RyZWFtR2FtZXBhZElucHV0SW52YWxpZBAAEh8KG2tfRVN0cmVhbUdhbWVw",
          "YWRJbnB1dERQYWRVcBABEiEKHWtfRVN0cmVhbUdhbWVwYWRJbnB1dERQYWRE",
          "b3duEAISIQoda19FU3RyZWFtR2FtZXBhZElucHV0RFBhZExlZnQQBBIiCh5r",
          "X0VTdHJlYW1HYW1lcGFkSW5wdXREUGFkUmlnaHQQCBIeChprX0VTdHJlYW1H",
          "YW1lcGFkSW5wdXRTdGFydBAQEh0KGWtfRVN0cmVhbUdhbWVwYWRJbnB1dEJh",
          "Y2sQIBIiCh5rX0VTdHJlYW1HYW1lcGFkSW5wdXRMZWZ0VGh1bWIQQBIkCh9r",
          "X0VTdHJlYW1HYW1lcGFkSW5wdXRSaWdodFRodW1iEIABEiYKIWtfRVN0cmVh",
          "bUdhbWVwYWRJbnB1dExlZnRTaG91bGRlchCAAhInCiJrX0VTdHJlYW1HYW1l",
          "cGFkSW5wdXRSaWdodFNob3VsZGVyEIAEEh8KGmtfRVN0cmVhbUdhbWVwYWRJ",
          "bnB1dEd1aWRlEIAIEhsKFmtfRVN0cmVhbUdhbWVwYWRJbnB1dEEQgCASGwoW",
          "a19FU3RyZWFtR2FtZXBhZElucHV0QhCAQBIcChZrX0VTdHJlYW1HYW1lcGFk",
          "SW5wdXRYEICAARIcChZrX0VTdHJlYW1HYW1lcGFkSW5wdXRZEICAAhIlCh9r",
          "X0VTdHJlYW1HYW1lcGFkSW5wdXRMZWZ0VGh1bWJYEICABBIlCh9rX0VTdHJl",
          "YW1HYW1lcGFkSW5wdXRMZWZ0VGh1bWJZEICACBImCiBrX0VTdHJlYW1HYW1l",
          "cGFkSW5wdXRSaWdodFRodW1iWBCAgBASJgoga19FU3RyZWFtR2FtZXBhZElu",
          "cHV0UmlnaHRUaHVtYlkQgIAgEiYKIGtfRVN0cmVhbUdhbWVwYWRJbnB1dExl",
          "ZnRUcmlnZ2VyEICAQBIoCiFrX0VTdHJlYW1HYW1lcGFkSW5wdXRSaWdodFRy",
          "aWdnZXIQgICAASqJAgoXRVN0cmVhbUZyYW1lcmF0ZUxpbWl0ZXISIQoda19F",
          "U3RyZWFtRnJhbWVyYXRlU2xvd0NhcHR1cmUQARIhCh1rX0VTdHJlYW1GcmFt",
          "ZXJhdGVTbG93Q29udmVydBACEiAKHGtfRVN0cmVhbUZyYW1lcmF0ZVNsb3dF",
          "bmNvZGUQBBIhCh1rX0VTdHJlYW1GcmFtZXJhdGVTbG93TmV0d29yaxAIEiAK",
          "HGtfRVN0cmVhbUZyYW1lcmF0ZVNsb3dEZWNvZGUQEBIeChprX0VTdHJlYW1G",
          "cmFtZXJhdGVTbG93R2FtZRAgEiEKHWtfRVN0cmVhbUZyYW1lcmF0ZVNsb3dE",
          "aXNwbGF5EEAqZQoPRVN0cmVhbUFjdGl2aXR5EhkKFWtfRVN0cmVhbUFjdGl2",
          "aXR5SWRsZRABEhkKFWtfRVN0cmVhbUFjdGl2aXR5R2FtZRACEhwKGGtfRVN0",
          "cmVhbUFjdGl2aXR5RGVza3RvcBADKkQKEkVTdHJlYW1EYXRhTWVzc2FnZRIX",
          "ChNrX0VTdHJlYW1EYXRhUGFja2V0EAESFQoRa19FU3RyZWFtRGF0YUxvc3QQ",
          "AipkCgxFQXVkaW9Gb3JtYXQSFgoSa19FQXVkaW9Gb3JtYXROb25lEAASIwof",
          "a19FQXVkaW9Gb3JtYXQxNkJpdExpdHRsZUVuZGlhbhABEhcKE2tfRUF1ZGlv",
          "Rm9ybWF0RmxvYXQQAipXCgxFVmlkZW9Gb3JtYXQSFgoSa19FVmlkZW9Gb3Jt",
          "YXROb25lEAASFgoSa19FVmlkZW9Gb3JtYXRZVjEyEAESFwoTa19FVmlkZW9G",
          "b3JtYXRBY2NlbBACKtcBChNFU3RyZWFtU3RhdHNNZXNzYWdlEh0KGWtfRVN0",
          "cmVhbVN0YXRzRnJhbWVFdmVudHMQARIbChdrX0VTdHJlYW1TdGF0c0RlYnVn",
          "RHVtcBACEhwKGGtfRVN0cmVhbVN0YXRzTG9nTWVzc2FnZRADEiAKHGtfRVN0",
          "cmVhbVN0YXRzTG9nVXBsb2FkQmVnaW4QBBIfChtrX0VTdHJlYW1TdGF0c0xv",
          "Z1VwbG9hZERhdGEQBRIjCh9rX0VTdHJlYW1TdGF0c0xvZ1VwbG9hZENvbXBs",
          "ZXRlEAYqhQUKEUVTdHJlYW1GcmFtZUV2ZW50EhwKGGtfRVN0cmVhbUlucHV0",
          "RXZlbnRTdGFydBAAEhsKF2tfRVN0cmVhbUlucHV0RXZlbnRTZW5kEAESGwoX",
          "a19FU3RyZWFtSW5wdXRFdmVudFJlY3YQAhIdChlrX0VTdHJlYW1JbnB1dEV2",
          "ZW50UXVldWVkEAMSHgoaa19FU3RyZWFtSW5wdXRFdmVudEhhbmRsZWQQBBIc",
          "ChhrX0VTdHJlYW1GcmFtZUV2ZW50U3RhcnQQBRIjCh9rX0VTdHJlYW1GcmFt",
          "ZUV2ZW50Q2FwdHVyZUJlZ2luEAYSIQoda19FU3RyZWFtRnJhbWVFdmVudENh",
          "cHR1cmVFbmQQBxIjCh9rX0VTdHJlYW1GcmFtZUV2ZW50Q29udmVydEJlZ2lu",
          "EAgSIQoda19FU3RyZWFtRnJhbWVFdmVudENvbnZlcnRFbmQQCRIiCh5rX0VT",
          "dHJlYW1GcmFtZUV2ZW50RW5jb2RlQmVnaW4QChIgChxrX0VTdHJlYW1GcmFt",
          "ZUV2ZW50RW5jb2RlRW5kEAsSGwoXa19FU3RyZWFtRnJhbWVFdmVudFNlbmQQ",
          "DBIbChdrX0VTdHJlYW1GcmFtZUV2ZW50UmVjdhANEiIKHmtfRVN0cmVhbUZy",
          "YW1lRXZlbnREZWNvZGVCZWdpbhAOEiAKHGtfRVN0cmVhbUZyYW1lRXZlbnRE",
          "ZWNvZGVFbmQQDxIiCh5rX0VTdHJlYW1GcmFtZUV2ZW50VXBsb2FkQmVnaW4Q",
          "EBIgChxrX0VTdHJlYW1GcmFtZUV2ZW50VXBsb2FkRW5kEBESHwoba19FU3Ry",
          "ZWFtRnJhbWVFdmVudENvbXBsZXRlEBIq1AIKEkVTdHJlYW1GcmFtZVJlc3Vs",
          "dBIfChtrX0VTdHJlYW1GcmFtZVJlc3VsdFBlbmRpbmcQABIhCh1rX0VTdHJl",
          "YW1GcmFtZVJlc3VsdERpc3BsYXllZBABEioKJmtfRVN0cmVhbUZyYW1lUmVz",
          "dWx0RHJvcHBlZE5ldHdvcmtTbG93EAISKgoma19FU3RyZWFtRnJhbWVSZXN1",
          "bHREcm9wcGVkTmV0d29ya0xvc3QQAxIpCiVrX0VTdHJlYW1GcmFtZVJlc3Vs",
          "dERyb3BwZWREZWNvZGVTbG93EAQSLAooa19FU3RyZWFtRnJhbWVSZXN1bHRE",
          "cm9wcGVkRGVjb2RlQ29ycnVwdBAFEiMKH2tfRVN0cmVhbUZyYW1lUmVzdWx0",
          "RHJvcHBlZExhdGUQBhIkCiBrX0VTdHJlYW1GcmFtZVJlc3VsdERyb3BwZWRS",
          "ZXNldBAHKqIFChVFRnJhbWVBY2N1bXVsYXRlZFN0YXQSEwoPa19FRnJhbWVT",
          "dGF0RlBTEAASIQoda19FRnJhbWVTdGF0Q2FwdHVyZUR1cmF0aW9uTVMQARIh",
          "Ch1rX0VGcmFtZVN0YXRDb252ZXJ0RHVyYXRpb25NUxACEiAKHGtfRUZyYW1l",
          "U3RhdEVuY29kZUR1cmF0aW9uTVMQAxIfChtrX0VGcmFtZVN0YXRTdGVhbUR1",
          "cmF0aW9uTVMQBBIgChxrX0VGcmFtZVN0YXRTZXJ2ZXJEdXJhdGlvbk1TEAUS",
          "IQoda19FRnJhbWVTdGF0TmV0d29ya0R1cmF0aW9uTVMQBhIgChxrX0VGcmFt",
          "ZVN0YXREZWNvZGVEdXJhdGlvbk1TEAcSIQoda19FRnJhbWVTdGF0RGlzcGxh",
          "eUR1cmF0aW9uTVMQCBIgChxrX0VGcmFtZVN0YXRDbGllbnREdXJhdGlvbk1T",
          "EAkSHwoba19FRnJhbWVTdGF0RnJhbWVEdXJhdGlvbk1TEAoSHgoaa19FRnJh",
          "bWVTdGF0SW5wdXRMYXRlbmN5TVMQCxIdChlrX0VGcmFtZVN0YXRHYW1lTGF0",
          "ZW5jeU1TEAwSIgoea19FRnJhbWVTdGF0Um91bmRUcmlwTGF0ZW5jeU1TEA0S",
          "GgoWa19FRnJhbWVTdGF0UGluZ1RpbWVNUxAOEicKI2tfRUZyYW1lU3RhdFNl",
          "cnZlckJpdHJhdGVLYml0UGVyU2VjEA8SJwoja19FRnJhbWVTdGF0Q2xpZW50",
          "Qml0cmF0ZUtiaXRQZXJTZWMQEBInCiNrX0VGcmFtZVN0YXRMaW5rQmFuZHdp",
          "ZHRoS2JpdFBlclNlYxAREiQKIGtfRUZyYW1lU3RhdFBhY2tldExvc3NQZXJj",
          "ZW50YWdlEBIqXgoMRUxvZ0ZpbGVUeXBlEhgKFGtfRUxvZ0ZpbGVTeXN0ZW1C",
          "b290EAASGQoVa19FTG9nRmlsZVN5c3RlbVJlc2V0EAESGQoVa19FTG9nRmls",
          "ZVN5c3RlbURlYnVnEAJCBUgBgAEA"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::EStreamChannel), typeof(global::EStreamDiscoveryMessage), typeof(global::EStreamControlMessage), typeof(global::EStreamVersion), typeof(global::EStreamAudioCodec), typeof(global::EStreamVideoCodec), typeof(global::EStreamQualityPreference), typeof(global::EStreamBitrate), typeof(global::EStreamingDataType), typeof(global::EStreamMouseButton), typeof(global::EStreamMouseWheelDirection), typeof(global::EStreamGamepadInputType), typeof(global::EStreamFramerateLimiter), typeof(global::EStreamActivity), typeof(global::EStreamDataMessage), typeof(global::EAudioFormat), typeof(global::EVideoFormat), typeof(global::EStreamStatsMessage), typeof(global::EStreamFrameEvent), typeof(global::EStreamFrameResult), typeof(global::EFrameAccumulatedStat), typeof(global::ELogFileType), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CDiscoveryPingRequest), global::CDiscoveryPingRequest.Parser, new[]{ "Sequence", "PacketSizeRequested" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDiscoveryPingResponse), global::CDiscoveryPingResponse.Parser, new[]{ "Sequence", "PacketSizeReceived" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CStreamingClientHandshakeInfo), global::CStreamingClientHandshakeInfo.Parser, new[]{ "NetworkTest" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CClientHandshakeMsg), global::CClientHandshakeMsg.Parser, new[]{ "Info" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CStreamingServerHandshakeInfo), global::CStreamingServerHandshakeInfo.Parser, new[]{ "Mtu" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CServerHandshakeMsg), global::CServerHandshakeMsg.Parser, new[]{ "Info" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CAuthenticationRequestMsg), global::CAuthenticationRequestMsg.Parser, new[]{ "Token", "Version" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CAuthenticationResponseMsg), global::CAuthenticationResponseMsg.Parser, new[]{ "Result", "Version" }, null, new[]{ typeof(global::CAuthenticationResponseMsg.Types.AuthenticationResult) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CKeepAliveMsg), global::CKeepAliveMsg.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CStartNetworkTestMsg), global::CStartNetworkTestMsg.Parser, new[]{ "Frames", "Framerate", "BitrateKbps", "BurstBitrateKbps", "BandwidthTest" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CStreamVideoMode), global::CStreamVideoMode.Parser, new[]{ "Width", "Height", "RefreshRate", "RefreshRateNumerator", "RefreshRateDenominator" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CStreamingClientCaps), global::CStreamingClientCaps.Parser, new[]{ "SystemInfo", "SystemCanSuspend", "MaximumDecodeBitrateKbps", "MaximumBurstBitrateKbps", "SupportsVideoHevc", "DisableSteamStore", "DisableClientCursor", "DisableIntelHardwareEncoding", "DisableAmdHardwareEncoding", "DisableNvidiaHardwareEncoding" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CStreamingClientConfig), global::CStreamingClientConfig.Parser, new[]{ "Quality", "MaximumResolutionX", "MaximumResolutionY", "MaximumFramerateNumerator", "MaximumFramerateDenominator", "MaximumBitrateKbps", "EnableHardwareDecoding", "EnablePerformanceOverlay", "EnableVideoStreaming", "EnableAudioStreaming", "EnableInputStreaming", "AudioChannels", "EnableVideoHevc" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CStreamingServerConfig), global::CStreamingServerConfig.Parser, new[]{ "ChangeDesktopResolution", "DynamicallyAdjustResolution", "EnableCaptureNvfbc", "EnableHardwareEncodingNvidia", "EnableHardwareEncodingAmd", "EnableHardwareEncodingIntel", "SoftwareEncodingThreads", "EnableTrafficPriority" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNegotiatedConfig), global::CNegotiatedConfig.Parser, new[]{ "ReliableData", "SelectedAudioCodec", "SelectedVideoCodec", "AvailableVideoModes", "EnableRemoteHid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNegotiationInitMsg), global::CNegotiationInitMsg.Parser, new[]{ "ReliableData", "SupportedAudioCodecs", "SupportedVideoCodecs", "SupportsRemoteHid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNegotiationSetConfigMsg), global::CNegotiationSetConfigMsg.Parser, new[]{ "Config", "StreamingClientConfig", "StreamingClientCaps" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNegotiationCompleteMsg), global::CNegotiationCompleteMsg.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CStartAudioDataMsg), global::CStartAudioDataMsg.Parser, new[]{ "Channel", "Codec", "CodecData", "Frequency", "Channels" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CStopAudioDataMsg), global::CStopAudioDataMsg.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CStartVideoDataMsg), global::CStartVideoDataMsg.Parser, new[]{ "Channel", "Codec", "CodecData", "Width", "Height" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CStopVideoDataMsg), global::CStopVideoDataMsg.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CInputLatencyTestMsg), global::CInputLatencyTestMsg.Parser, new[]{ "InputMark", "Color" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CInputMouseMotionMsg), global::CInputMouseMotionMsg.Parser, new[]{ "InputMark", "XNormalized", "YNormalized", "Dx", "Dy" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CInputMouseWheelMsg), global::CInputMouseWheelMsg.Parser, new[]{ "InputMark", "Direction" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CInputMouseDownMsg), global::CInputMouseDownMsg.Parser, new[]{ "InputMark", "Button" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CInputMouseUpMsg), global::CInputMouseUpMsg.Parser, new[]{ "InputMark", "Button" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CInputKeyDownMsg), global::CInputKeyDownMsg.Parser, new[]{ "InputMark", "Scancode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CInputKeyUpMsg), global::CInputKeyUpMsg.Parser, new[]{ "InputMark", "Scancode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CInputTextMsg), global::CInputTextMsg.Parser, new[]{ "InputMark", "TextUtf8" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSetTitleMsg), global::CSetTitleMsg.Parser, new[]{ "Text" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSetIconMsg), global::CSetIconMsg.Parser, new[]{ "Width", "Height", "Image" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CShowCursorMsg), global::CShowCursorMsg.Parser, new[]{ "XNormalized", "YNormalized" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHideCursorMsg), global::CHideCursorMsg.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSetCursorMsg), global::CSetCursorMsg.Parser, new[]{ "CursorId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGetCursorImageMsg), global::CGetCursorImageMsg.Parser, new[]{ "CursorId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSetCursorImageMsg), global::CSetCursorImageMsg.Parser, new[]{ "CursorId", "Width", "Height", "HotX", "HotY", "Image" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CVideoDecoderInfoMsg), global::CVideoDecoderInfoMsg.Parser, new[]{ "Info", "Threads" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CVideoEncoderInfoMsg), global::CVideoEncoderInfoMsg.Parser, new[]{ "Info" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CQuitRequest), global::CQuitRequest.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDeleteCursorMsg), global::CDeleteCursorMsg.Parser, new[]{ "CursorId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSetStreamingClientConfig), global::CSetStreamingClientConfig.Parser, new[]{ "Config" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSetQoSMsg), global::CSetQoSMsg.Parser, new[]{ "UseQos" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSetTargetFramerateMsg), global::CSetTargetFramerateMsg.Parser, new[]{ "Framerate", "Reasons", "FramerateNumerator", "FramerateDenominator" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSetTargetBitrateMsg), global::CSetTargetBitrateMsg.Parser, new[]{ "Bitrate" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::COverlayEnabledMsg), global::COverlayEnabledMsg.Parser, new[]{ "Enabled" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSetGammaRampMsg), global::CSetGammaRampMsg.Parser, new[]{ "GammaRamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSetActivityMsg), global::CSetActivityMsg.Parser, new[]{ "Activity" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSystemSuspendMsg), global::CSystemSuspendMsg.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CVirtualHereRequestMsg), global::CVirtualHereRequestMsg.Parser, new[]{ "Hostname" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CVirtualHereReadyMsg), global::CVirtualHereReadyMsg.Parser, new[]{ "LicensedDeviceCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CVirtualHereShareDeviceMsg), global::CVirtualHereShareDeviceMsg.Parser, new[]{ "DeviceAddress" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSetSpectatorModeMsg), global::CSetSpectatorModeMsg.Parser, new[]{ "Enabled" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CRemoteHIDMsg), global::CRemoteHIDMsg.Parser, new[]{ "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CTouchConfigActiveMsg), global::CTouchConfigActiveMsg.Parser, new[]{ "Appid", "Revision" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGetTouchConfigDataMsg), global::CGetTouchConfigDataMsg.Parser, new[]{ "Appid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSetTouchConfigDataMsg), global::CSetTouchConfigDataMsg.Parser, new[]{ "Appid", "Revision", "Data", "Layout" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSaveTouchConfigLayoutMsg), global::CSaveTouchConfigLayoutMsg.Parser, new[]{ "Appid", "Layout" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CTouchActionSetActiveMsg), global::CTouchActionSetActiveMsg.Parser, new[]{ "Appid", "ActionsetId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGetTouchIconDataMsg), global::CGetTouchIconDataMsg.Parser, new[]{ "Appid", "Icon" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSetTouchIconDataMsg), global::CSetTouchIconDataMsg.Parser, new[]{ "Appid", "Icon", "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CStreamDataLostMsg), global::CStreamDataLostMsg.Parser, new[]{ "Packets" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CAudioFormat), global::CAudioFormat.Parser, new[]{ "Format", "Frequency", "Channels" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CVideoFormat), global::CVideoFormat.Parser, new[]{ "Format", "Width", "Height" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CFrameEvent), global::CFrameEvent.Parser, new[]{ "EventId", "Timestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CFrameStats), global::CFrameStats.Parser, new[]{ "FrameId", "InputMark", "Events", "Result", "FrameStartDelta", "FrameDisplayDelta", "PingTime", "ServerBitrate", "ClientBitrate", "LinkBandwidth", "PacketLoss", "FrameSize" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CFrameStatAccumulatedValue), global::CFrameStatAccumulatedValue.Parser, new[]{ "StatType", "Count", "Average", "Stddev" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CFrameStatsListMsg), global::CFrameStatsListMsg.Parser, new[]{ "DataType", "Stats", "AccumulatedStats", "LatestFrameId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CStreamingSessionStats), global::CStreamingSessionStats.Parser, new[]{ "FrameLossPercentage", "AverageNetworkTimeMs", "StddevNetworkTimeMs" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDebugDumpMsg), global::CDebugDumpMsg.Parser, new[]{ "Screenshot" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CLogMsg), global::CLogMsg.Parser, new[]{ "Type", "Message" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CLogUploadMsg), global::CLogUploadMsg.Parser, new[]{ "Type", "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CTransportSignalMsg), global::CTransportSignalMsg.Parser, new[]{ "Webrtc" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CTransportSignalMsg.Types.WebRTCMessage), global::CTransportSignalMsg.Types.WebRTCMessage.Parser, new[]{ "Greeting", "Offer", "Answer", "Candidate" }, new[]{ "Msg" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CTransportSignalMsg.Types.WebRTCMessage.Types.Candidate), global::CTransportSignalMsg.Types.WebRTCMessage.Types.Candidate.Parser, new[]{ "SdpMid", "SdpMlineIndex", "Candidate_" }, null, null, null, null)})})
        }));
  }
  #endregion

}

#region Enums
public enum EStreamChannel {
  [pbr::OriginalName("k_EStreamChannelInvalid")] KEstreamChannelInvalid = -1,
  [pbr::OriginalName("k_EStreamChannelDiscovery")] KEstreamChannelDiscovery = 0,
  [pbr::OriginalName("k_EStreamChannelControl")] KEstreamChannelControl = 1,
  [pbr::OriginalName("k_EStreamChannelStats")] KEstreamChannelStats = 2,
  [pbr::OriginalName("k_EStreamChannelDataChannelStart")] KEstreamChannelDataChannelStart = 3,
}

public enum EStreamDiscoveryMessage {
  [pbr::OriginalName("k_EStreamDiscoveryPingRequest")] KEstreamDiscoveryPingRequest = 1,
  [pbr::OriginalName("k_EStreamDiscoveryPingResponse")] KEstreamDiscoveryPingResponse = 2,
}

public enum EStreamControlMessage {
  [pbr::OriginalName("k_EStreamControlAuthenticationRequest")] KEstreamControlAuthenticationRequest = 1,
  [pbr::OriginalName("k_EStreamControlAuthenticationResponse")] KEstreamControlAuthenticationResponse = 2,
  [pbr::OriginalName("k_EStreamControlNegotiationInit")] KEstreamControlNegotiationInit = 3,
  [pbr::OriginalName("k_EStreamControlNegotiationSetConfig")] KEstreamControlNegotiationSetConfig = 4,
  [pbr::OriginalName("k_EStreamControlNegotiationComplete")] KEstreamControlNegotiationComplete = 5,
  [pbr::OriginalName("k_EStreamControlClientHandshake")] KEstreamControlClientHandshake = 6,
  [pbr::OriginalName("k_EStreamControlServerHandshake")] KEstreamControlServerHandshake = 7,
  [pbr::OriginalName("k_EStreamControlStartNetworkTest")] KEstreamControlStartNetworkTest = 8,
  [pbr::OriginalName("k_EStreamControlKeepAlive")] KEstreamControlKeepAlive = 9,
  [pbr::OriginalName("k_EStreamControl_LAST_SETUP_MESSAGE")] KEstreamControlLastSetupMessage = 15,
  [pbr::OriginalName("k_EStreamControlStartAudioData")] KEstreamControlStartAudioData = 50,
  [pbr::OriginalName("k_EStreamControlStopAudioData")] KEstreamControlStopAudioData = 51,
  [pbr::OriginalName("k_EStreamControlStartVideoData")] KEstreamControlStartVideoData = 52,
  [pbr::OriginalName("k_EStreamControlStopVideoData")] KEstreamControlStopVideoData = 53,
  [pbr::OriginalName("k_EStreamControlInputMouseMotion")] KEstreamControlInputMouseMotion = 54,
  [pbr::OriginalName("k_EStreamControlInputMouseWheel")] KEstreamControlInputMouseWheel = 55,
  [pbr::OriginalName("k_EStreamControlInputMouseDown")] KEstreamControlInputMouseDown = 56,
  [pbr::OriginalName("k_EStreamControlInputMouseUp")] KEstreamControlInputMouseUp = 57,
  [pbr::OriginalName("k_EStreamControlInputKeyDown")] KEstreamControlInputKeyDown = 58,
  [pbr::OriginalName("k_EStreamControlInputKeyUp")] KEstreamControlInputKeyUp = 59,
  [pbr::OriginalName("k_EStreamControlInputGamepadAttached_OBSOLETE")] KEstreamControlInputGamepadAttachedObsolete = 60,
  [pbr::OriginalName("k_EStreamControlInputGamepadEvent_OBSOLETE")] KEstreamControlInputGamepadEventObsolete = 61,
  [pbr::OriginalName("k_EStreamControlInputGamepadDetached_OBSOLETE")] KEstreamControlInputGamepadDetachedObsolete = 62,
  [pbr::OriginalName("k_EStreamControlShowCursor")] KEstreamControlShowCursor = 63,
  [pbr::OriginalName("k_EStreamControlHideCursor")] KEstreamControlHideCursor = 64,
  [pbr::OriginalName("k_EStreamControlSetCursor")] KEstreamControlSetCursor = 65,
  [pbr::OriginalName("k_EStreamControlGetCursorImage")] KEstreamControlGetCursorImage = 66,
  [pbr::OriginalName("k_EStreamControlSetCursorImage")] KEstreamControlSetCursorImage = 67,
  [pbr::OriginalName("k_EStreamControlDeleteCursor")] KEstreamControlDeleteCursor = 68,
  [pbr::OriginalName("k_EStreamControlSetTargetFramerate")] KEstreamControlSetTargetFramerate = 69,
  [pbr::OriginalName("k_EStreamControlInputLatencyTest")] KEstreamControlInputLatencyTest = 70,
  [pbr::OriginalName("k_EStreamControlGamepadRumble_OBSOLETE")] KEstreamControlGamepadRumbleObsolete = 71,
  [pbr::OriginalName("k_EStreamControlOverlayEnabled")] KEstreamControlOverlayEnabled = 74,
  [pbr::OriginalName("k_EStreamControlInputControllerAttached_OBSOLETE")] KEstreamControlInputControllerAttachedObsolete = 75,
  [pbr::OriginalName("k_EStreamControlInputControllerState_OBSOLETE")] KEstreamControlInputControllerStateObsolete = 76,
  [pbr::OriginalName("k_EStreamControlTriggerHapticPulse_OBSOLETE")] KEstreamControlTriggerHapticPulseObsolete = 77,
  [pbr::OriginalName("k_EStreamControlInputControllerDetached_OBSOLETE")] KEstreamControlInputControllerDetachedObsolete = 78,
  [pbr::OriginalName("k_EStreamControlVideoDecoderInfo")] KEstreamControlVideoDecoderInfo = 80,
  [pbr::OriginalName("k_EStreamControlSetTitle")] KEstreamControlSetTitle = 81,
  [pbr::OriginalName("k_EStreamControlSetIcon")] KEstreamControlSetIcon = 82,
  [pbr::OriginalName("k_EStreamControlQuitRequest")] KEstreamControlQuitRequest = 83,
  [pbr::OriginalName("k_EStreamControlSetQoS")] KEstreamControlSetQoS = 87,
  [pbr::OriginalName("k_EStreamControlInputControllerWirelessPresence_OBSOLETE")] KEstreamControlInputControllerWirelessPresenceObsolete = 88,
  [pbr::OriginalName("k_EStreamControlSetGammaRamp")] KEstreamControlSetGammaRamp = 89,
  [pbr::OriginalName("k_EStreamControlVideoEncoderInfo")] KEstreamControlVideoEncoderInfo = 90,
  [pbr::OriginalName("k_EStreamControlInputControllerStateHID_OBSOLETE")] KEstreamControlInputControllerStateHidObsolete = 93,
  [pbr::OriginalName("k_EStreamControlSetTargetBitrate")] KEstreamControlSetTargetBitrate = 94,
  [pbr::OriginalName("k_EStreamControlSetControllerPairingEnabled_OBSOLETE")] KEstreamControlSetControllerPairingEnabledObsolete = 95,
  [pbr::OriginalName("k_EStreamControlSetControllerPairingResult_OBSOLETE")] KEstreamControlSetControllerPairingResultObsolete = 96,
  [pbr::OriginalName("k_EStreamControlTriggerControllerDisconnect_OBSOLETE")] KEstreamControlTriggerControllerDisconnectObsolete = 97,
  [pbr::OriginalName("k_EStreamControlSetActivity")] KEstreamControlSetActivity = 98,
  [pbr::OriginalName("k_EStreamControlSetStreamingClientConfig")] KEstreamControlSetStreamingClientConfig = 99,
  [pbr::OriginalName("k_EStreamControlSystemSuspend")] KEstreamControlSystemSuspend = 100,
  [pbr::OriginalName("k_EStreamControlSetControllerSettings_OBSOLETE")] KEstreamControlSetControllerSettingsObsolete = 101,
  [pbr::OriginalName("k_EStreamControlVirtualHereRequest")] KEstreamControlVirtualHereRequest = 102,
  [pbr::OriginalName("k_EStreamControlVirtualHereReady")] KEstreamControlVirtualHereReady = 103,
  [pbr::OriginalName("k_EStreamControlVirtualHereShareDevice")] KEstreamControlVirtualHereShareDevice = 104,
  [pbr::OriginalName("k_EStreamControlSetSpectatorMode")] KEstreamControlSetSpectatorMode = 105,
  [pbr::OriginalName("k_EStreamControlRemoteHID")] KEstreamControlRemoteHid = 106,
  [pbr::OriginalName("k_EStreamControlStartMicrophoneData")] KEstreamControlStartMicrophoneData = 107,
  [pbr::OriginalName("k_EStreamControlStopMicrophoneData")] KEstreamControlStopMicrophoneData = 108,
  [pbr::OriginalName("k_EStreamControlInputText")] KEstreamControlInputText = 109,
  [pbr::OriginalName("k_EStreamControlTouchConfigActive")] KEstreamControlTouchConfigActive = 110,
  [pbr::OriginalName("k_EStreamControlGetTouchConfigData")] KEstreamControlGetTouchConfigData = 111,
  [pbr::OriginalName("k_EStreamControlSetTouchConfigData")] KEstreamControlSetTouchConfigData = 112,
  [pbr::OriginalName("k_EStreamControlSaveTouchConfigLayout")] KEstreamControlSaveTouchConfigLayout = 113,
  [pbr::OriginalName("k_EStreamControlTouchActionSetActive")] KEstreamControlTouchActionSetActive = 114,
  [pbr::OriginalName("k_EStreamControlGetTouchIconData")] KEstreamControlGetTouchIconData = 115,
  [pbr::OriginalName("k_EStreamControlSetTouchIconData")] KEstreamControlSetTouchIconData = 116,
}

public enum EStreamVersion {
  [pbr::OriginalName("k_EStreamVersionNone")] KEstreamVersionNone = 0,
  [pbr::OriginalName("k_EStreamVersionCurrent")] KEstreamVersionCurrent = 1,
}

public enum EStreamAudioCodec {
  [pbr::OriginalName("k_EStreamAudioCodecNone")] KEstreamAudioCodecNone = 0,
  [pbr::OriginalName("k_EStreamAudioCodecRaw")] KEstreamAudioCodecRaw = 1,
  [pbr::OriginalName("k_EStreamAudioCodecVorbis")] KEstreamAudioCodecVorbis = 2,
  [pbr::OriginalName("k_EStreamAudioCodecOpus")] KEstreamAudioCodecOpus = 3,
  [pbr::OriginalName("k_EStreamAudioCodecMP3")] KEstreamAudioCodecMp3 = 4,
  [pbr::OriginalName("k_EStreamAudioCodecAAC")] KEstreamAudioCodecAac = 5,
}

public enum EStreamVideoCodec {
  [pbr::OriginalName("k_EStreamVideoCodecNone")] KEstreamVideoCodecNone = 0,
  [pbr::OriginalName("k_EStreamVideoCodecRaw")] KEstreamVideoCodecRaw = 1,
  [pbr::OriginalName("k_EStreamVideoCodecVP8")] KEstreamVideoCodecVp8 = 2,
  [pbr::OriginalName("k_EStreamVideoCodecVP9")] KEstreamVideoCodecVp9 = 3,
  [pbr::OriginalName("k_EStreamVideoCodecH264")] KEstreamVideoCodecH264 = 4,
  [pbr::OriginalName("k_EStreamVideoCodecHEVC")] KEstreamVideoCodecHevc = 5,
  [pbr::OriginalName("k_EStreamVideoCodecORBX1")] KEstreamVideoCodecOrbx1 = 6,
  [pbr::OriginalName("k_EStreamVideoCodecORBX2")] KEstreamVideoCodecOrbx2 = 7,
}

public enum EStreamQualityPreference {
  [pbr::OriginalName("k_EStreamQualityFast")] KEstreamQualityFast = 1,
  [pbr::OriginalName("k_EStreamQualityBalanced")] KEstreamQualityBalanced = 2,
  [pbr::OriginalName("k_EStreamQualityBeautiful")] KEstreamQualityBeautiful = 3,
}

public enum EStreamBitrate {
  [pbr::OriginalName("k_EStreamBitrateAutodetect")] KEstreamBitrateAutodetect = -1,
  [pbr::OriginalName("k_EStreamBitrateUnlimited")] KEstreamBitrateUnlimited = 0,
}

public enum EStreamingDataType {
  [pbr::OriginalName("k_EStreamingAudioData")] KEstreamingAudioData = 0,
  [pbr::OriginalName("k_EStreamingVideoData")] KEstreamingVideoData = 1,
  [pbr::OriginalName("k_EStreamingMicrophoneData")] KEstreamingMicrophoneData = 2,
}

public enum EStreamMouseButton {
  [pbr::OriginalName("k_EStreamMouseButtonLeft")] KEstreamMouseButtonLeft = 1,
  [pbr::OriginalName("k_EStreamMouseButtonRight")] KEstreamMouseButtonRight = 2,
  [pbr::OriginalName("k_EStreamMouseButtonMiddle")] KEstreamMouseButtonMiddle = 16,
  [pbr::OriginalName("k_EStreamMouseButtonX1")] KEstreamMouseButtonX1 = 32,
  [pbr::OriginalName("k_EStreamMouseButtonX2")] KEstreamMouseButtonX2 = 64,
  [pbr::OriginalName("k_EStreamMouseButtonUnknown")] KEstreamMouseButtonUnknown = 4096,
}

public enum EStreamMouseWheelDirection {
  [pbr::OriginalName("k_EStreamMouseWheelUp")] KEstreamMouseWheelUp = 120,
  [pbr::OriginalName("k_EStreamMouseWheelDown")] KEstreamMouseWheelDown = -120,
  [pbr::OriginalName("k_EStreamMouseWheelLeft")] KEstreamMouseWheelLeft = 3,
  [pbr::OriginalName("k_EStreamMouseWheelRight")] KEstreamMouseWheelRight = 4,
}

public enum EStreamGamepadInputType {
  [pbr::OriginalName("k_EStreamGamepadInputInvalid")] KEstreamGamepadInputInvalid = 0,
  [pbr::OriginalName("k_EStreamGamepadInputDPadUp")] KEstreamGamepadInputDpadUp = 1,
  [pbr::OriginalName("k_EStreamGamepadInputDPadDown")] KEstreamGamepadInputDpadDown = 2,
  [pbr::OriginalName("k_EStreamGamepadInputDPadLeft")] KEstreamGamepadInputDpadLeft = 4,
  [pbr::OriginalName("k_EStreamGamepadInputDPadRight")] KEstreamGamepadInputDpadRight = 8,
  [pbr::OriginalName("k_EStreamGamepadInputStart")] KEstreamGamepadInputStart = 16,
  [pbr::OriginalName("k_EStreamGamepadInputBack")] KEstreamGamepadInputBack = 32,
  [pbr::OriginalName("k_EStreamGamepadInputLeftThumb")] KEstreamGamepadInputLeftThumb = 64,
  [pbr::OriginalName("k_EStreamGamepadInputRightThumb")] KEstreamGamepadInputRightThumb = 128,
  [pbr::OriginalName("k_EStreamGamepadInputLeftShoulder")] KEstreamGamepadInputLeftShoulder = 256,
  [pbr::OriginalName("k_EStreamGamepadInputRightShoulder")] KEstreamGamepadInputRightShoulder = 512,
  [pbr::OriginalName("k_EStreamGamepadInputGuide")] KEstreamGamepadInputGuide = 1024,
  [pbr::OriginalName("k_EStreamGamepadInputA")] KEstreamGamepadInputA = 4096,
  [pbr::OriginalName("k_EStreamGamepadInputB")] KEstreamGamepadInputB = 8192,
  [pbr::OriginalName("k_EStreamGamepadInputX")] KEstreamGamepadInputX = 16384,
  [pbr::OriginalName("k_EStreamGamepadInputY")] KEstreamGamepadInputY = 32768,
  [pbr::OriginalName("k_EStreamGamepadInputLeftThumbX")] KEstreamGamepadInputLeftThumbX = 65536,
  [pbr::OriginalName("k_EStreamGamepadInputLeftThumbY")] KEstreamGamepadInputLeftThumbY = 131072,
  [pbr::OriginalName("k_EStreamGamepadInputRightThumbX")] KEstreamGamepadInputRightThumbX = 262144,
  [pbr::OriginalName("k_EStreamGamepadInputRightThumbY")] KEstreamGamepadInputRightThumbY = 524288,
  [pbr::OriginalName("k_EStreamGamepadInputLeftTrigger")] KEstreamGamepadInputLeftTrigger = 1048576,
  [pbr::OriginalName("k_EStreamGamepadInputRightTrigger")] KEstreamGamepadInputRightTrigger = 2097152,
}

public enum EStreamFramerateLimiter {
  [pbr::OriginalName("k_EStreamFramerateSlowCapture")] KEstreamFramerateSlowCapture = 1,
  [pbr::OriginalName("k_EStreamFramerateSlowConvert")] KEstreamFramerateSlowConvert = 2,
  [pbr::OriginalName("k_EStreamFramerateSlowEncode")] KEstreamFramerateSlowEncode = 4,
  [pbr::OriginalName("k_EStreamFramerateSlowNetwork")] KEstreamFramerateSlowNetwork = 8,
  [pbr::OriginalName("k_EStreamFramerateSlowDecode")] KEstreamFramerateSlowDecode = 16,
  [pbr::OriginalName("k_EStreamFramerateSlowGame")] KEstreamFramerateSlowGame = 32,
  [pbr::OriginalName("k_EStreamFramerateSlowDisplay")] KEstreamFramerateSlowDisplay = 64,
}

public enum EStreamActivity {
  [pbr::OriginalName("k_EStreamActivityIdle")] KEstreamActivityIdle = 1,
  [pbr::OriginalName("k_EStreamActivityGame")] KEstreamActivityGame = 2,
  [pbr::OriginalName("k_EStreamActivityDesktop")] KEstreamActivityDesktop = 3,
}

public enum EStreamDataMessage {
  [pbr::OriginalName("k_EStreamDataPacket")] KEstreamDataPacket = 1,
  [pbr::OriginalName("k_EStreamDataLost")] KEstreamDataLost = 2,
}

public enum EAudioFormat {
  [pbr::OriginalName("k_EAudioFormatNone")] KEaudioFormatNone = 0,
  [pbr::OriginalName("k_EAudioFormat16BitLittleEndian")] KEaudioFormat16BitLittleEndian = 1,
  [pbr::OriginalName("k_EAudioFormatFloat")] KEaudioFormatFloat = 2,
}

public enum EVideoFormat {
  [pbr::OriginalName("k_EVideoFormatNone")] KEvideoFormatNone = 0,
  [pbr::OriginalName("k_EVideoFormatYV12")] KEvideoFormatYv12 = 1,
  [pbr::OriginalName("k_EVideoFormatAccel")] KEvideoFormatAccel = 2,
}

public enum EStreamStatsMessage {
  [pbr::OriginalName("k_EStreamStatsFrameEvents")] KEstreamStatsFrameEvents = 1,
  [pbr::OriginalName("k_EStreamStatsDebugDump")] KEstreamStatsDebugDump = 2,
  [pbr::OriginalName("k_EStreamStatsLogMessage")] KEstreamStatsLogMessage = 3,
  [pbr::OriginalName("k_EStreamStatsLogUploadBegin")] KEstreamStatsLogUploadBegin = 4,
  [pbr::OriginalName("k_EStreamStatsLogUploadData")] KEstreamStatsLogUploadData = 5,
  [pbr::OriginalName("k_EStreamStatsLogUploadComplete")] KEstreamStatsLogUploadComplete = 6,
}

public enum EStreamFrameEvent {
  [pbr::OriginalName("k_EStreamInputEventStart")] KEstreamInputEventStart = 0,
  [pbr::OriginalName("k_EStreamInputEventSend")] KEstreamInputEventSend = 1,
  [pbr::OriginalName("k_EStreamInputEventRecv")] KEstreamInputEventRecv = 2,
  [pbr::OriginalName("k_EStreamInputEventQueued")] KEstreamInputEventQueued = 3,
  [pbr::OriginalName("k_EStreamInputEventHandled")] KEstreamInputEventHandled = 4,
  [pbr::OriginalName("k_EStreamFrameEventStart")] KEstreamFrameEventStart = 5,
  [pbr::OriginalName("k_EStreamFrameEventCaptureBegin")] KEstreamFrameEventCaptureBegin = 6,
  [pbr::OriginalName("k_EStreamFrameEventCaptureEnd")] KEstreamFrameEventCaptureEnd = 7,
  [pbr::OriginalName("k_EStreamFrameEventConvertBegin")] KEstreamFrameEventConvertBegin = 8,
  [pbr::OriginalName("k_EStreamFrameEventConvertEnd")] KEstreamFrameEventConvertEnd = 9,
  [pbr::OriginalName("k_EStreamFrameEventEncodeBegin")] KEstreamFrameEventEncodeBegin = 10,
  [pbr::OriginalName("k_EStreamFrameEventEncodeEnd")] KEstreamFrameEventEncodeEnd = 11,
  [pbr::OriginalName("k_EStreamFrameEventSend")] KEstreamFrameEventSend = 12,
  [pbr::OriginalName("k_EStreamFrameEventRecv")] KEstreamFrameEventRecv = 13,
  [pbr::OriginalName("k_EStreamFrameEventDecodeBegin")] KEstreamFrameEventDecodeBegin = 14,
  [pbr::OriginalName("k_EStreamFrameEventDecodeEnd")] KEstreamFrameEventDecodeEnd = 15,
  [pbr::OriginalName("k_EStreamFrameEventUploadBegin")] KEstreamFrameEventUploadBegin = 16,
  [pbr::OriginalName("k_EStreamFrameEventUploadEnd")] KEstreamFrameEventUploadEnd = 17,
  [pbr::OriginalName("k_EStreamFrameEventComplete")] KEstreamFrameEventComplete = 18,
}

public enum EStreamFrameResult {
  [pbr::OriginalName("k_EStreamFrameResultPending")] KEstreamFrameResultPending = 0,
  [pbr::OriginalName("k_EStreamFrameResultDisplayed")] KEstreamFrameResultDisplayed = 1,
  [pbr::OriginalName("k_EStreamFrameResultDroppedNetworkSlow")] KEstreamFrameResultDroppedNetworkSlow = 2,
  [pbr::OriginalName("k_EStreamFrameResultDroppedNetworkLost")] KEstreamFrameResultDroppedNetworkLost = 3,
  [pbr::OriginalName("k_EStreamFrameResultDroppedDecodeSlow")] KEstreamFrameResultDroppedDecodeSlow = 4,
  [pbr::OriginalName("k_EStreamFrameResultDroppedDecodeCorrupt")] KEstreamFrameResultDroppedDecodeCorrupt = 5,
  [pbr::OriginalName("k_EStreamFrameResultDroppedLate")] KEstreamFrameResultDroppedLate = 6,
  [pbr::OriginalName("k_EStreamFrameResultDroppedReset")] KEstreamFrameResultDroppedReset = 7,
}

public enum EFrameAccumulatedStat {
  [pbr::OriginalName("k_EFrameStatFPS")] KEframeStatFps = 0,
  [pbr::OriginalName("k_EFrameStatCaptureDurationMS")] KEframeStatCaptureDurationMs = 1,
  [pbr::OriginalName("k_EFrameStatConvertDurationMS")] KEframeStatConvertDurationMs = 2,
  [pbr::OriginalName("k_EFrameStatEncodeDurationMS")] KEframeStatEncodeDurationMs = 3,
  [pbr::OriginalName("k_EFrameStatSteamDurationMS")] KEframeStatSteamDurationMs = 4,
  [pbr::OriginalName("k_EFrameStatServerDurationMS")] KEframeStatServerDurationMs = 5,
  [pbr::OriginalName("k_EFrameStatNetworkDurationMS")] KEframeStatNetworkDurationMs = 6,
  [pbr::OriginalName("k_EFrameStatDecodeDurationMS")] KEframeStatDecodeDurationMs = 7,
  [pbr::OriginalName("k_EFrameStatDisplayDurationMS")] KEframeStatDisplayDurationMs = 8,
  [pbr::OriginalName("k_EFrameStatClientDurationMS")] KEframeStatClientDurationMs = 9,
  [pbr::OriginalName("k_EFrameStatFrameDurationMS")] KEframeStatFrameDurationMs = 10,
  [pbr::OriginalName("k_EFrameStatInputLatencyMS")] KEframeStatInputLatencyMs = 11,
  [pbr::OriginalName("k_EFrameStatGameLatencyMS")] KEframeStatGameLatencyMs = 12,
  [pbr::OriginalName("k_EFrameStatRoundTripLatencyMS")] KEframeStatRoundTripLatencyMs = 13,
  [pbr::OriginalName("k_EFrameStatPingTimeMS")] KEframeStatPingTimeMs = 14,
  [pbr::OriginalName("k_EFrameStatServerBitrateKbitPerSec")] KEframeStatServerBitrateKbitPerSec = 15,
  [pbr::OriginalName("k_EFrameStatClientBitrateKbitPerSec")] KEframeStatClientBitrateKbitPerSec = 16,
  [pbr::OriginalName("k_EFrameStatLinkBandwidthKbitPerSec")] KEframeStatLinkBandwidthKbitPerSec = 17,
  [pbr::OriginalName("k_EFrameStatPacketLossPercentage")] KEframeStatPacketLossPercentage = 18,
}

public enum ELogFileType {
  [pbr::OriginalName("k_ELogFileSystemBoot")] KElogFileSystemBoot = 0,
  [pbr::OriginalName("k_ELogFileSystemReset")] KElogFileSystemReset = 1,
  [pbr::OriginalName("k_ELogFileSystemDebug")] KElogFileSystemDebug = 2,
}

#endregion

#region Messages
public sealed partial class CDiscoveryPingRequest : pb::IMessage<CDiscoveryPingRequest> {
  private static readonly pb::MessageParser<CDiscoveryPingRequest> _parser = new pb::MessageParser<CDiscoveryPingRequest>(() => new CDiscoveryPingRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDiscoveryPingRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDiscoveryPingRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDiscoveryPingRequest(CDiscoveryPingRequest other) : this() {
    sequence_ = other.sequence_;
    packetSizeRequested_ = other.packetSizeRequested_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDiscoveryPingRequest Clone() {
    return new CDiscoveryPingRequest(this);
  }

  /// <summary>Field number for the "sequence" field.</summary>
  public const int SequenceFieldNumber = 1;
  /// <summary>Default value for the "sequence" field</summary>
  public const uint SequenceDefaultValue = 0;

  private uint? sequence_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Sequence {
    get { return sequence_ ?? SequenceDefaultValue; }
    set {
      sequence_ = value;
    }
  }
  /// <summary>Gets whether the "sequence" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSequence {
    get { return sequence_ != null; }
  }
  /// <summary>Clears the value of the "sequence" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSequence() {
    sequence_ = null;
  }

  /// <summary>Field number for the "packet_size_requested" field.</summary>
  public const int PacketSizeRequestedFieldNumber = 2;
  /// <summary>Default value for the "packet_size_requested" field</summary>
  public const uint PacketSizeRequestedDefaultValue = 0;

  private uint? packetSizeRequested_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PacketSizeRequested {
    get { return packetSizeRequested_ ?? PacketSizeRequestedDefaultValue; }
    set {
      packetSizeRequested_ = value;
    }
  }
  /// <summary>Gets whether the "packet_size_requested" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPacketSizeRequested {
    get { return packetSizeRequested_ != null; }
  }
  /// <summary>Clears the value of the "packet_size_requested" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPacketSizeRequested() {
    packetSizeRequested_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDiscoveryPingRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDiscoveryPingRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Sequence != other.Sequence) return false;
    if (PacketSizeRequested != other.PacketSizeRequested) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSequence) hash ^= Sequence.GetHashCode();
    if (HasPacketSizeRequested) hash ^= PacketSizeRequested.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasSequence) {
      output.WriteRawTag(8);
      output.WriteUInt32(Sequence);
    }
    if (HasPacketSizeRequested) {
      output.WriteRawTag(16);
      output.WriteUInt32(PacketSizeRequested);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasSequence) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sequence);
    }
    if (HasPacketSizeRequested) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PacketSizeRequested);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDiscoveryPingRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasSequence) {
      Sequence = other.Sequence;
    }
    if (other.HasPacketSizeRequested) {
      PacketSizeRequested = other.PacketSizeRequested;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Sequence = input.ReadUInt32();
          break;
        }
        case 16: {
          PacketSizeRequested = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CDiscoveryPingResponse : pb::IMessage<CDiscoveryPingResponse> {
  private static readonly pb::MessageParser<CDiscoveryPingResponse> _parser = new pb::MessageParser<CDiscoveryPingResponse>(() => new CDiscoveryPingResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDiscoveryPingResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDiscoveryPingResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDiscoveryPingResponse(CDiscoveryPingResponse other) : this() {
    sequence_ = other.sequence_;
    packetSizeReceived_ = other.packetSizeReceived_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDiscoveryPingResponse Clone() {
    return new CDiscoveryPingResponse(this);
  }

  /// <summary>Field number for the "sequence" field.</summary>
  public const int SequenceFieldNumber = 1;
  /// <summary>Default value for the "sequence" field</summary>
  public const uint SequenceDefaultValue = 0;

  private uint? sequence_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Sequence {
    get { return sequence_ ?? SequenceDefaultValue; }
    set {
      sequence_ = value;
    }
  }
  /// <summary>Gets whether the "sequence" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSequence {
    get { return sequence_ != null; }
  }
  /// <summary>Clears the value of the "sequence" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSequence() {
    sequence_ = null;
  }

  /// <summary>Field number for the "packet_size_received" field.</summary>
  public const int PacketSizeReceivedFieldNumber = 2;
  /// <summary>Default value for the "packet_size_received" field</summary>
  public const uint PacketSizeReceivedDefaultValue = 0;

  private uint? packetSizeReceived_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PacketSizeReceived {
    get { return packetSizeReceived_ ?? PacketSizeReceivedDefaultValue; }
    set {
      packetSizeReceived_ = value;
    }
  }
  /// <summary>Gets whether the "packet_size_received" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPacketSizeReceived {
    get { return packetSizeReceived_ != null; }
  }
  /// <summary>Clears the value of the "packet_size_received" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPacketSizeReceived() {
    packetSizeReceived_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDiscoveryPingResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDiscoveryPingResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Sequence != other.Sequence) return false;
    if (PacketSizeReceived != other.PacketSizeReceived) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSequence) hash ^= Sequence.GetHashCode();
    if (HasPacketSizeReceived) hash ^= PacketSizeReceived.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasSequence) {
      output.WriteRawTag(8);
      output.WriteUInt32(Sequence);
    }
    if (HasPacketSizeReceived) {
      output.WriteRawTag(16);
      output.WriteUInt32(PacketSizeReceived);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasSequence) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sequence);
    }
    if (HasPacketSizeReceived) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PacketSizeReceived);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDiscoveryPingResponse other) {
    if (other == null) {
      return;
    }
    if (other.HasSequence) {
      Sequence = other.Sequence;
    }
    if (other.HasPacketSizeReceived) {
      PacketSizeReceived = other.PacketSizeReceived;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Sequence = input.ReadUInt32();
          break;
        }
        case 16: {
          PacketSizeReceived = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CStreamingClientHandshakeInfo : pb::IMessage<CStreamingClientHandshakeInfo> {
  private static readonly pb::MessageParser<CStreamingClientHandshakeInfo> _parser = new pb::MessageParser<CStreamingClientHandshakeInfo>(() => new CStreamingClientHandshakeInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CStreamingClientHandshakeInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingClientHandshakeInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingClientHandshakeInfo(CStreamingClientHandshakeInfo other) : this() {
    networkTest_ = other.networkTest_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingClientHandshakeInfo Clone() {
    return new CStreamingClientHandshakeInfo(this);
  }

  /// <summary>Field number for the "network_test" field.</summary>
  public const int NetworkTestFieldNumber = 2;
  /// <summary>Default value for the "network_test" field</summary>
  public const int NetworkTestDefaultValue = 0;

  private int? networkTest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NetworkTest {
    get { return networkTest_ ?? NetworkTestDefaultValue; }
    set {
      networkTest_ = value;
    }
  }
  /// <summary>Gets whether the "network_test" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNetworkTest {
    get { return networkTest_ != null; }
  }
  /// <summary>Clears the value of the "network_test" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNetworkTest() {
    networkTest_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CStreamingClientHandshakeInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CStreamingClientHandshakeInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NetworkTest != other.NetworkTest) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasNetworkTest) hash ^= NetworkTest.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasNetworkTest) {
      output.WriteRawTag(16);
      output.WriteInt32(NetworkTest);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasNetworkTest) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetworkTest);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CStreamingClientHandshakeInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasNetworkTest) {
      NetworkTest = other.NetworkTest;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 16: {
          NetworkTest = input.ReadInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CClientHandshakeMsg : pb::IMessage<CClientHandshakeMsg> {
  private static readonly pb::MessageParser<CClientHandshakeMsg> _parser = new pb::MessageParser<CClientHandshakeMsg>(() => new CClientHandshakeMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CClientHandshakeMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CClientHandshakeMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CClientHandshakeMsg(CClientHandshakeMsg other) : this() {
    Info = other.HasInfo ? other.Info.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CClientHandshakeMsg Clone() {
    return new CClientHandshakeMsg(this);
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 1;
  private global::CStreamingClientHandshakeInfo info_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CStreamingClientHandshakeInfo Info {
    get { return info_; }
    set {
      info_ = value;
    }
  }
  /// <summary>Gets whether the info field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInfo {
    get { return info_ != null; }
  }
  /// <summary>Clears the value of the info field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInfo() {
    info_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CClientHandshakeMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CClientHandshakeMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Info, other.Info)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInfo) hash ^= Info.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasInfo) {
      output.WriteRawTag(10);
      output.WriteMessage(Info);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInfo) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CClientHandshakeMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasInfo) {
      if (!HasInfo) {
        info_ = new global::CStreamingClientHandshakeInfo();
      }
      Info.MergeFrom(other.Info);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (!HasInfo) {
            info_ = new global::CStreamingClientHandshakeInfo();
          }
          input.ReadMessage(info_);
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (HasInfo) {
      if (!Info.IsInitialized()) return false;
    }
    else {
      return false;
    }
    return true;
  }
}

public sealed partial class CStreamingServerHandshakeInfo : pb::IMessage<CStreamingServerHandshakeInfo> {
  private static readonly pb::MessageParser<CStreamingServerHandshakeInfo> _parser = new pb::MessageParser<CStreamingServerHandshakeInfo>(() => new CStreamingServerHandshakeInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CStreamingServerHandshakeInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingServerHandshakeInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingServerHandshakeInfo(CStreamingServerHandshakeInfo other) : this() {
    mtu_ = other.mtu_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingServerHandshakeInfo Clone() {
    return new CStreamingServerHandshakeInfo(this);
  }

  /// <summary>Field number for the "mtu" field.</summary>
  public const int MtuFieldNumber = 1;
  /// <summary>Default value for the "mtu" field</summary>
  public const int MtuDefaultValue = 0;

  private int? mtu_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mtu {
    get { return mtu_ ?? MtuDefaultValue; }
    set {
      mtu_ = value;
    }
  }
  /// <summary>Gets whether the "mtu" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMtu {
    get { return mtu_ != null; }
  }
  /// <summary>Clears the value of the "mtu" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMtu() {
    mtu_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CStreamingServerHandshakeInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CStreamingServerHandshakeInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Mtu != other.Mtu) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMtu) hash ^= Mtu.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasMtu) {
      output.WriteRawTag(8);
      output.WriteInt32(Mtu);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasMtu) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mtu);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CStreamingServerHandshakeInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasMtu) {
      Mtu = other.Mtu;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Mtu = input.ReadInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CServerHandshakeMsg : pb::IMessage<CServerHandshakeMsg> {
  private static readonly pb::MessageParser<CServerHandshakeMsg> _parser = new pb::MessageParser<CServerHandshakeMsg>(() => new CServerHandshakeMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CServerHandshakeMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CServerHandshakeMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CServerHandshakeMsg(CServerHandshakeMsg other) : this() {
    Info = other.HasInfo ? other.Info.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CServerHandshakeMsg Clone() {
    return new CServerHandshakeMsg(this);
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 1;
  private global::CStreamingServerHandshakeInfo info_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CStreamingServerHandshakeInfo Info {
    get { return info_; }
    set {
      info_ = value;
    }
  }
  /// <summary>Gets whether the info field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInfo {
    get { return info_ != null; }
  }
  /// <summary>Clears the value of the info field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInfo() {
    info_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CServerHandshakeMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CServerHandshakeMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Info, other.Info)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInfo) hash ^= Info.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasInfo) {
      output.WriteRawTag(10);
      output.WriteMessage(Info);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInfo) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CServerHandshakeMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasInfo) {
      if (!HasInfo) {
        info_ = new global::CStreamingServerHandshakeInfo();
      }
      Info.MergeFrom(other.Info);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (!HasInfo) {
            info_ = new global::CStreamingServerHandshakeInfo();
          }
          input.ReadMessage(info_);
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (HasInfo) {
      if (!Info.IsInitialized()) return false;
    }
    else {
      return false;
    }
    return true;
  }
}

public sealed partial class CAuthenticationRequestMsg : pb::IMessage<CAuthenticationRequestMsg> {
  private static readonly pb::MessageParser<CAuthenticationRequestMsg> _parser = new pb::MessageParser<CAuthenticationRequestMsg>(() => new CAuthenticationRequestMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CAuthenticationRequestMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAuthenticationRequestMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAuthenticationRequestMsg(CAuthenticationRequestMsg other) : this() {
    token_ = other.token_;
    version_ = other.version_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAuthenticationRequestMsg Clone() {
    return new CAuthenticationRequestMsg(this);
  }

  /// <summary>Field number for the "token" field.</summary>
  public const int TokenFieldNumber = 1;
  /// <summary>Default value for the "token" field</summary>
  public readonly static pb::ByteString TokenDefaultValue = pb::ByteString.Empty;

  private pb::ByteString token_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Token {
    get { return token_ ?? TokenDefaultValue; }
    set {
      token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasToken {
    get { return token_ != null; }
  }
  /// <summary>Clears the value of the "token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearToken() {
    token_ = null;
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 2;
  /// <summary>Default value for the "version" field</summary>
  public const global::EStreamVersion VersionDefaultValue = global::EStreamVersion.KEstreamVersionNone;

  private global::EStreamVersion? version_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamVersion Version {
    get { return version_ ?? VersionDefaultValue; }
    set {
      version_ = value;
    }
  }
  /// <summary>Gets whether the "version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVersion {
    get { return version_ != null; }
  }
  /// <summary>Clears the value of the "version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVersion() {
    version_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CAuthenticationRequestMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CAuthenticationRequestMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Token != other.Token) return false;
    if (Version != other.Version) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasToken) hash ^= Token.GetHashCode();
    if (HasVersion) hash ^= Version.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasToken) {
      output.WriteRawTag(10);
      output.WriteBytes(Token);
    }
    if (HasVersion) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Version);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasToken) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
    }
    if (HasVersion) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Version);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CAuthenticationRequestMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasToken) {
      Token = other.Token;
    }
    if (other.HasVersion) {
      Version = other.Version;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Token = input.ReadBytes();
          break;
        }
        case 16: {
          version_ = (global::EStreamVersion) input.ReadEnum();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CAuthenticationResponseMsg : pb::IMessage<CAuthenticationResponseMsg> {
  private static readonly pb::MessageParser<CAuthenticationResponseMsg> _parser = new pb::MessageParser<CAuthenticationResponseMsg>(() => new CAuthenticationResponseMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CAuthenticationResponseMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAuthenticationResponseMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAuthenticationResponseMsg(CAuthenticationResponseMsg other) : this() {
    result_ = other.result_;
    version_ = other.version_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAuthenticationResponseMsg Clone() {
    return new CAuthenticationResponseMsg(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  /// <summary>Default value for the "result" field</summary>
  public const global::CAuthenticationResponseMsg.Types.AuthenticationResult ResultDefaultValue = global::CAuthenticationResponseMsg.Types.AuthenticationResult.Succeeded;

  private global::CAuthenticationResponseMsg.Types.AuthenticationResult? result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CAuthenticationResponseMsg.Types.AuthenticationResult Result {
    get { return result_ ?? ResultDefaultValue; }
    set {
      result_ = value;
    }
  }
  /// <summary>Gets whether the "result" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResult {
    get { return result_ != null; }
  }
  /// <summary>Clears the value of the "result" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResult() {
    result_ = null;
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 2;
  /// <summary>Default value for the "version" field</summary>
  public const global::EStreamVersion VersionDefaultValue = global::EStreamVersion.KEstreamVersionNone;

  private global::EStreamVersion? version_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamVersion Version {
    get { return version_ ?? VersionDefaultValue; }
    set {
      version_ = value;
    }
  }
  /// <summary>Gets whether the "version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVersion {
    get { return version_ != null; }
  }
  /// <summary>Clears the value of the "version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVersion() {
    version_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CAuthenticationResponseMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CAuthenticationResponseMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Version != other.Version) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasResult) hash ^= Result.GetHashCode();
    if (HasVersion) hash ^= Version.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasResult) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Result);
    }
    if (HasVersion) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Version);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasResult) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
    }
    if (HasVersion) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Version);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CAuthenticationResponseMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasResult) {
      Result = other.Result;
    }
    if (other.HasVersion) {
      Version = other.Version;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          result_ = (global::CAuthenticationResponseMsg.Types.AuthenticationResult) input.ReadEnum();
          break;
        }
        case 16: {
          version_ = (global::EStreamVersion) input.ReadEnum();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
  #region Nested types
  /// <summary>Container for nested types declared in the CAuthenticationResponseMsg message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum AuthenticationResult {
      [pbr::OriginalName("SUCCEEDED")] Succeeded = 0,
      [pbr::OriginalName("FAILED")] Failed = 1,
    }

  }
  #endregion

}

public sealed partial class CKeepAliveMsg : pb::IMessage<CKeepAliveMsg> {
  private static readonly pb::MessageParser<CKeepAliveMsg> _parser = new pb::MessageParser<CKeepAliveMsg>(() => new CKeepAliveMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CKeepAliveMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CKeepAliveMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CKeepAliveMsg(CKeepAliveMsg other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CKeepAliveMsg Clone() {
    return new CKeepAliveMsg(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CKeepAliveMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CKeepAliveMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CKeepAliveMsg other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CStartNetworkTestMsg : pb::IMessage<CStartNetworkTestMsg> {
  private static readonly pb::MessageParser<CStartNetworkTestMsg> _parser = new pb::MessageParser<CStartNetworkTestMsg>(() => new CStartNetworkTestMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CStartNetworkTestMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStartNetworkTestMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStartNetworkTestMsg(CStartNetworkTestMsg other) : this() {
    frames_ = other.frames_;
    framerate_ = other.framerate_;
    bitrateKbps_ = other.bitrateKbps_;
    burstBitrateKbps_ = other.burstBitrateKbps_;
    bandwidthTest_ = other.bandwidthTest_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStartNetworkTestMsg Clone() {
    return new CStartNetworkTestMsg(this);
  }

  /// <summary>Field number for the "frames" field.</summary>
  public const int FramesFieldNumber = 1;
  /// <summary>Default value for the "frames" field</summary>
  public const uint FramesDefaultValue = 0;

  private uint? frames_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Frames {
    get { return frames_ ?? FramesDefaultValue; }
    set {
      frames_ = value;
    }
  }
  /// <summary>Gets whether the "frames" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFrames {
    get { return frames_ != null; }
  }
  /// <summary>Clears the value of the "frames" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFrames() {
    frames_ = null;
  }

  /// <summary>Field number for the "framerate" field.</summary>
  public const int FramerateFieldNumber = 2;
  /// <summary>Default value for the "framerate" field</summary>
  public const uint FramerateDefaultValue = 0;

  private uint? framerate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Framerate {
    get { return framerate_ ?? FramerateDefaultValue; }
    set {
      framerate_ = value;
    }
  }
  /// <summary>Gets whether the "framerate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFramerate {
    get { return framerate_ != null; }
  }
  /// <summary>Clears the value of the "framerate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFramerate() {
    framerate_ = null;
  }

  /// <summary>Field number for the "bitrate_kbps" field.</summary>
  public const int BitrateKbpsFieldNumber = 3;
  /// <summary>Default value for the "bitrate_kbps" field</summary>
  public const uint BitrateKbpsDefaultValue = 0;

  private uint? bitrateKbps_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BitrateKbps {
    get { return bitrateKbps_ ?? BitrateKbpsDefaultValue; }
    set {
      bitrateKbps_ = value;
    }
  }
  /// <summary>Gets whether the "bitrate_kbps" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBitrateKbps {
    get { return bitrateKbps_ != null; }
  }
  /// <summary>Clears the value of the "bitrate_kbps" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBitrateKbps() {
    bitrateKbps_ = null;
  }

  /// <summary>Field number for the "burst_bitrate_kbps" field.</summary>
  public const int BurstBitrateKbpsFieldNumber = 4;
  /// <summary>Default value for the "burst_bitrate_kbps" field</summary>
  public const uint BurstBitrateKbpsDefaultValue = 0;

  private uint? burstBitrateKbps_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BurstBitrateKbps {
    get { return burstBitrateKbps_ ?? BurstBitrateKbpsDefaultValue; }
    set {
      burstBitrateKbps_ = value;
    }
  }
  /// <summary>Gets whether the "burst_bitrate_kbps" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBurstBitrateKbps {
    get { return burstBitrateKbps_ != null; }
  }
  /// <summary>Clears the value of the "burst_bitrate_kbps" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBurstBitrateKbps() {
    burstBitrateKbps_ = null;
  }

  /// <summary>Field number for the "bandwidth_test" field.</summary>
  public const int BandwidthTestFieldNumber = 5;
  /// <summary>Default value for the "bandwidth_test" field</summary>
  public const bool BandwidthTestDefaultValue = false;

  private bool? bandwidthTest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool BandwidthTest {
    get { return bandwidthTest_ ?? BandwidthTestDefaultValue; }
    set {
      bandwidthTest_ = value;
    }
  }
  /// <summary>Gets whether the "bandwidth_test" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBandwidthTest {
    get { return bandwidthTest_ != null; }
  }
  /// <summary>Clears the value of the "bandwidth_test" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBandwidthTest() {
    bandwidthTest_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CStartNetworkTestMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CStartNetworkTestMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Frames != other.Frames) return false;
    if (Framerate != other.Framerate) return false;
    if (BitrateKbps != other.BitrateKbps) return false;
    if (BurstBitrateKbps != other.BurstBitrateKbps) return false;
    if (BandwidthTest != other.BandwidthTest) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFrames) hash ^= Frames.GetHashCode();
    if (HasFramerate) hash ^= Framerate.GetHashCode();
    if (HasBitrateKbps) hash ^= BitrateKbps.GetHashCode();
    if (HasBurstBitrateKbps) hash ^= BurstBitrateKbps.GetHashCode();
    if (HasBandwidthTest) hash ^= BandwidthTest.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasFrames) {
      output.WriteRawTag(8);
      output.WriteUInt32(Frames);
    }
    if (HasFramerate) {
      output.WriteRawTag(16);
      output.WriteUInt32(Framerate);
    }
    if (HasBitrateKbps) {
      output.WriteRawTag(24);
      output.WriteUInt32(BitrateKbps);
    }
    if (HasBurstBitrateKbps) {
      output.WriteRawTag(32);
      output.WriteUInt32(BurstBitrateKbps);
    }
    if (HasBandwidthTest) {
      output.WriteRawTag(40);
      output.WriteBool(BandwidthTest);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFrames) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frames);
    }
    if (HasFramerate) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Framerate);
    }
    if (HasBitrateKbps) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BitrateKbps);
    }
    if (HasBurstBitrateKbps) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BurstBitrateKbps);
    }
    if (HasBandwidthTest) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CStartNetworkTestMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasFrames) {
      Frames = other.Frames;
    }
    if (other.HasFramerate) {
      Framerate = other.Framerate;
    }
    if (other.HasBitrateKbps) {
      BitrateKbps = other.BitrateKbps;
    }
    if (other.HasBurstBitrateKbps) {
      BurstBitrateKbps = other.BurstBitrateKbps;
    }
    if (other.HasBandwidthTest) {
      BandwidthTest = other.BandwidthTest;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Frames = input.ReadUInt32();
          break;
        }
        case 16: {
          Framerate = input.ReadUInt32();
          break;
        }
        case 24: {
          BitrateKbps = input.ReadUInt32();
          break;
        }
        case 32: {
          BurstBitrateKbps = input.ReadUInt32();
          break;
        }
        case 40: {
          BandwidthTest = input.ReadBool();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CStreamVideoMode : pb::IMessage<CStreamVideoMode> {
  private static readonly pb::MessageParser<CStreamVideoMode> _parser = new pb::MessageParser<CStreamVideoMode>(() => new CStreamVideoMode());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CStreamVideoMode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamVideoMode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamVideoMode(CStreamVideoMode other) : this() {
    width_ = other.width_;
    height_ = other.height_;
    refreshRate_ = other.refreshRate_;
    refreshRateNumerator_ = other.refreshRateNumerator_;
    refreshRateDenominator_ = other.refreshRateDenominator_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamVideoMode Clone() {
    return new CStreamVideoMode(this);
  }

  /// <summary>Field number for the "width" field.</summary>
  public const int WidthFieldNumber = 1;
  /// <summary>Default value for the "width" field</summary>
  public const uint WidthDefaultValue = 0;

  private uint? width_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Width {
    get { return width_ ?? WidthDefaultValue; }
    set {
      width_ = value;
    }
  }
  /// <summary>Gets whether the "width" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWidth {
    get { return width_ != null; }
  }
  /// <summary>Clears the value of the "width" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWidth() {
    width_ = null;
  }

  /// <summary>Field number for the "height" field.</summary>
  public const int HeightFieldNumber = 2;
  /// <summary>Default value for the "height" field</summary>
  public const uint HeightDefaultValue = 0;

  private uint? height_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Height {
    get { return height_ ?? HeightDefaultValue; }
    set {
      height_ = value;
    }
  }
  /// <summary>Gets whether the "height" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHeight {
    get { return height_ != null; }
  }
  /// <summary>Clears the value of the "height" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHeight() {
    height_ = null;
  }

  /// <summary>Field number for the "refresh_rate" field.</summary>
  public const int RefreshRateFieldNumber = 3;
  /// <summary>Default value for the "refresh_rate" field</summary>
  public const uint RefreshRateDefaultValue = 0;

  private uint? refreshRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RefreshRate {
    get { return refreshRate_ ?? RefreshRateDefaultValue; }
    set {
      refreshRate_ = value;
    }
  }
  /// <summary>Gets whether the "refresh_rate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRefreshRate {
    get { return refreshRate_ != null; }
  }
  /// <summary>Clears the value of the "refresh_rate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRefreshRate() {
    refreshRate_ = null;
  }

  /// <summary>Field number for the "refresh_rate_numerator" field.</summary>
  public const int RefreshRateNumeratorFieldNumber = 4;
  /// <summary>Default value for the "refresh_rate_numerator" field</summary>
  public const uint RefreshRateNumeratorDefaultValue = 0;

  private uint? refreshRateNumerator_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RefreshRateNumerator {
    get { return refreshRateNumerator_ ?? RefreshRateNumeratorDefaultValue; }
    set {
      refreshRateNumerator_ = value;
    }
  }
  /// <summary>Gets whether the "refresh_rate_numerator" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRefreshRateNumerator {
    get { return refreshRateNumerator_ != null; }
  }
  /// <summary>Clears the value of the "refresh_rate_numerator" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRefreshRateNumerator() {
    refreshRateNumerator_ = null;
  }

  /// <summary>Field number for the "refresh_rate_denominator" field.</summary>
  public const int RefreshRateDenominatorFieldNumber = 5;
  /// <summary>Default value for the "refresh_rate_denominator" field</summary>
  public const uint RefreshRateDenominatorDefaultValue = 0;

  private uint? refreshRateDenominator_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RefreshRateDenominator {
    get { return refreshRateDenominator_ ?? RefreshRateDenominatorDefaultValue; }
    set {
      refreshRateDenominator_ = value;
    }
  }
  /// <summary>Gets whether the "refresh_rate_denominator" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRefreshRateDenominator {
    get { return refreshRateDenominator_ != null; }
  }
  /// <summary>Clears the value of the "refresh_rate_denominator" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRefreshRateDenominator() {
    refreshRateDenominator_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CStreamVideoMode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CStreamVideoMode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Width != other.Width) return false;
    if (Height != other.Height) return false;
    if (RefreshRate != other.RefreshRate) return false;
    if (RefreshRateNumerator != other.RefreshRateNumerator) return false;
    if (RefreshRateDenominator != other.RefreshRateDenominator) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasWidth) hash ^= Width.GetHashCode();
    if (HasHeight) hash ^= Height.GetHashCode();
    if (HasRefreshRate) hash ^= RefreshRate.GetHashCode();
    if (HasRefreshRateNumerator) hash ^= RefreshRateNumerator.GetHashCode();
    if (HasRefreshRateDenominator) hash ^= RefreshRateDenominator.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasWidth) {
      output.WriteRawTag(8);
      output.WriteUInt32(Width);
    }
    if (HasHeight) {
      output.WriteRawTag(16);
      output.WriteUInt32(Height);
    }
    if (HasRefreshRate) {
      output.WriteRawTag(24);
      output.WriteUInt32(RefreshRate);
    }
    if (HasRefreshRateNumerator) {
      output.WriteRawTag(32);
      output.WriteUInt32(RefreshRateNumerator);
    }
    if (HasRefreshRateDenominator) {
      output.WriteRawTag(40);
      output.WriteUInt32(RefreshRateDenominator);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasWidth) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
    }
    if (HasHeight) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
    }
    if (HasRefreshRate) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefreshRate);
    }
    if (HasRefreshRateNumerator) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefreshRateNumerator);
    }
    if (HasRefreshRateDenominator) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefreshRateDenominator);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CStreamVideoMode other) {
    if (other == null) {
      return;
    }
    if (other.HasWidth) {
      Width = other.Width;
    }
    if (other.HasHeight) {
      Height = other.Height;
    }
    if (other.HasRefreshRate) {
      RefreshRate = other.RefreshRate;
    }
    if (other.HasRefreshRateNumerator) {
      RefreshRateNumerator = other.RefreshRateNumerator;
    }
    if (other.HasRefreshRateDenominator) {
      RefreshRateDenominator = other.RefreshRateDenominator;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Width = input.ReadUInt32();
          break;
        }
        case 16: {
          Height = input.ReadUInt32();
          break;
        }
        case 24: {
          RefreshRate = input.ReadUInt32();
          break;
        }
        case 32: {
          RefreshRateNumerator = input.ReadUInt32();
          break;
        }
        case 40: {
          RefreshRateDenominator = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasWidth) {
      return false;
    }
    if (!HasHeight) {
      return false;
    }
    return true;
  }
}

public sealed partial class CStreamingClientCaps : pb::IMessage<CStreamingClientCaps> {
  private static readonly pb::MessageParser<CStreamingClientCaps> _parser = new pb::MessageParser<CStreamingClientCaps>(() => new CStreamingClientCaps());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CStreamingClientCaps> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingClientCaps() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingClientCaps(CStreamingClientCaps other) : this() {
    systemInfo_ = other.systemInfo_;
    systemCanSuspend_ = other.systemCanSuspend_;
    maximumDecodeBitrateKbps_ = other.maximumDecodeBitrateKbps_;
    maximumBurstBitrateKbps_ = other.maximumBurstBitrateKbps_;
    supportsVideoHevc_ = other.supportsVideoHevc_;
    disableSteamStore_ = other.disableSteamStore_;
    disableClientCursor_ = other.disableClientCursor_;
    disableIntelHardwareEncoding_ = other.disableIntelHardwareEncoding_;
    disableAmdHardwareEncoding_ = other.disableAmdHardwareEncoding_;
    disableNvidiaHardwareEncoding_ = other.disableNvidiaHardwareEncoding_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingClientCaps Clone() {
    return new CStreamingClientCaps(this);
  }

  /// <summary>Field number for the "system_info" field.</summary>
  public const int SystemInfoFieldNumber = 1;
  /// <summary>Default value for the "system_info" field</summary>
  public const string SystemInfoDefaultValue = "";

  private string systemInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SystemInfo {
    get { return systemInfo_ ?? SystemInfoDefaultValue; }
    set {
      systemInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "system_info" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSystemInfo {
    get { return systemInfo_ != null; }
  }
  /// <summary>Clears the value of the "system_info" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSystemInfo() {
    systemInfo_ = null;
  }

  /// <summary>Field number for the "system_can_suspend" field.</summary>
  public const int SystemCanSuspendFieldNumber = 2;
  /// <summary>Default value for the "system_can_suspend" field</summary>
  public const bool SystemCanSuspendDefaultValue = false;

  private bool? systemCanSuspend_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SystemCanSuspend {
    get { return systemCanSuspend_ ?? SystemCanSuspendDefaultValue; }
    set {
      systemCanSuspend_ = value;
    }
  }
  /// <summary>Gets whether the "system_can_suspend" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSystemCanSuspend {
    get { return systemCanSuspend_ != null; }
  }
  /// <summary>Clears the value of the "system_can_suspend" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSystemCanSuspend() {
    systemCanSuspend_ = null;
  }

  /// <summary>Field number for the "maximum_decode_bitrate_kbps" field.</summary>
  public const int MaximumDecodeBitrateKbpsFieldNumber = 3;
  /// <summary>Default value for the "maximum_decode_bitrate_kbps" field</summary>
  public const int MaximumDecodeBitrateKbpsDefaultValue = 0;

  private int? maximumDecodeBitrateKbps_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaximumDecodeBitrateKbps {
    get { return maximumDecodeBitrateKbps_ ?? MaximumDecodeBitrateKbpsDefaultValue; }
    set {
      maximumDecodeBitrateKbps_ = value;
    }
  }
  /// <summary>Gets whether the "maximum_decode_bitrate_kbps" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaximumDecodeBitrateKbps {
    get { return maximumDecodeBitrateKbps_ != null; }
  }
  /// <summary>Clears the value of the "maximum_decode_bitrate_kbps" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaximumDecodeBitrateKbps() {
    maximumDecodeBitrateKbps_ = null;
  }

  /// <summary>Field number for the "maximum_burst_bitrate_kbps" field.</summary>
  public const int MaximumBurstBitrateKbpsFieldNumber = 4;
  /// <summary>Default value for the "maximum_burst_bitrate_kbps" field</summary>
  public const int MaximumBurstBitrateKbpsDefaultValue = 0;

  private int? maximumBurstBitrateKbps_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaximumBurstBitrateKbps {
    get { return maximumBurstBitrateKbps_ ?? MaximumBurstBitrateKbpsDefaultValue; }
    set {
      maximumBurstBitrateKbps_ = value;
    }
  }
  /// <summary>Gets whether the "maximum_burst_bitrate_kbps" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaximumBurstBitrateKbps {
    get { return maximumBurstBitrateKbps_ != null; }
  }
  /// <summary>Clears the value of the "maximum_burst_bitrate_kbps" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaximumBurstBitrateKbps() {
    maximumBurstBitrateKbps_ = null;
  }

  /// <summary>Field number for the "supports_video_hevc" field.</summary>
  public const int SupportsVideoHevcFieldNumber = 5;
  /// <summary>Default value for the "supports_video_hevc" field</summary>
  public const bool SupportsVideoHevcDefaultValue = false;

  private bool? supportsVideoHevc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsVideoHevc {
    get { return supportsVideoHevc_ ?? SupportsVideoHevcDefaultValue; }
    set {
      supportsVideoHevc_ = value;
    }
  }
  /// <summary>Gets whether the "supports_video_hevc" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSupportsVideoHevc {
    get { return supportsVideoHevc_ != null; }
  }
  /// <summary>Clears the value of the "supports_video_hevc" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSupportsVideoHevc() {
    supportsVideoHevc_ = null;
  }

  /// <summary>Field number for the "disable_steam_store" field.</summary>
  public const int DisableSteamStoreFieldNumber = 6;
  /// <summary>Default value for the "disable_steam_store" field</summary>
  public const bool DisableSteamStoreDefaultValue = false;

  private bool? disableSteamStore_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DisableSteamStore {
    get { return disableSteamStore_ ?? DisableSteamStoreDefaultValue; }
    set {
      disableSteamStore_ = value;
    }
  }
  /// <summary>Gets whether the "disable_steam_store" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDisableSteamStore {
    get { return disableSteamStore_ != null; }
  }
  /// <summary>Clears the value of the "disable_steam_store" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDisableSteamStore() {
    disableSteamStore_ = null;
  }

  /// <summary>Field number for the "disable_client_cursor" field.</summary>
  public const int DisableClientCursorFieldNumber = 7;
  /// <summary>Default value for the "disable_client_cursor" field</summary>
  public const bool DisableClientCursorDefaultValue = false;

  private bool? disableClientCursor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DisableClientCursor {
    get { return disableClientCursor_ ?? DisableClientCursorDefaultValue; }
    set {
      disableClientCursor_ = value;
    }
  }
  /// <summary>Gets whether the "disable_client_cursor" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDisableClientCursor {
    get { return disableClientCursor_ != null; }
  }
  /// <summary>Clears the value of the "disable_client_cursor" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDisableClientCursor() {
    disableClientCursor_ = null;
  }

  /// <summary>Field number for the "disable_intel_hardware_encoding" field.</summary>
  public const int DisableIntelHardwareEncodingFieldNumber = 8;
  /// <summary>Default value for the "disable_intel_hardware_encoding" field</summary>
  public const bool DisableIntelHardwareEncodingDefaultValue = false;

  private bool? disableIntelHardwareEncoding_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DisableIntelHardwareEncoding {
    get { return disableIntelHardwareEncoding_ ?? DisableIntelHardwareEncodingDefaultValue; }
    set {
      disableIntelHardwareEncoding_ = value;
    }
  }
  /// <summary>Gets whether the "disable_intel_hardware_encoding" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDisableIntelHardwareEncoding {
    get { return disableIntelHardwareEncoding_ != null; }
  }
  /// <summary>Clears the value of the "disable_intel_hardware_encoding" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDisableIntelHardwareEncoding() {
    disableIntelHardwareEncoding_ = null;
  }

  /// <summary>Field number for the "disable_amd_hardware_encoding" field.</summary>
  public const int DisableAmdHardwareEncodingFieldNumber = 9;
  /// <summary>Default value for the "disable_amd_hardware_encoding" field</summary>
  public const bool DisableAmdHardwareEncodingDefaultValue = false;

  private bool? disableAmdHardwareEncoding_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DisableAmdHardwareEncoding {
    get { return disableAmdHardwareEncoding_ ?? DisableAmdHardwareEncodingDefaultValue; }
    set {
      disableAmdHardwareEncoding_ = value;
    }
  }
  /// <summary>Gets whether the "disable_amd_hardware_encoding" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDisableAmdHardwareEncoding {
    get { return disableAmdHardwareEncoding_ != null; }
  }
  /// <summary>Clears the value of the "disable_amd_hardware_encoding" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDisableAmdHardwareEncoding() {
    disableAmdHardwareEncoding_ = null;
  }

  /// <summary>Field number for the "disable_nvidia_hardware_encoding" field.</summary>
  public const int DisableNvidiaHardwareEncodingFieldNumber = 10;
  /// <summary>Default value for the "disable_nvidia_hardware_encoding" field</summary>
  public const bool DisableNvidiaHardwareEncodingDefaultValue = false;

  private bool? disableNvidiaHardwareEncoding_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DisableNvidiaHardwareEncoding {
    get { return disableNvidiaHardwareEncoding_ ?? DisableNvidiaHardwareEncodingDefaultValue; }
    set {
      disableNvidiaHardwareEncoding_ = value;
    }
  }
  /// <summary>Gets whether the "disable_nvidia_hardware_encoding" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDisableNvidiaHardwareEncoding {
    get { return disableNvidiaHardwareEncoding_ != null; }
  }
  /// <summary>Clears the value of the "disable_nvidia_hardware_encoding" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDisableNvidiaHardwareEncoding() {
    disableNvidiaHardwareEncoding_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CStreamingClientCaps);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CStreamingClientCaps other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SystemInfo != other.SystemInfo) return false;
    if (SystemCanSuspend != other.SystemCanSuspend) return false;
    if (MaximumDecodeBitrateKbps != other.MaximumDecodeBitrateKbps) return false;
    if (MaximumBurstBitrateKbps != other.MaximumBurstBitrateKbps) return false;
    if (SupportsVideoHevc != other.SupportsVideoHevc) return false;
    if (DisableSteamStore != other.DisableSteamStore) return false;
    if (DisableClientCursor != other.DisableClientCursor) return false;
    if (DisableIntelHardwareEncoding != other.DisableIntelHardwareEncoding) return false;
    if (DisableAmdHardwareEncoding != other.DisableAmdHardwareEncoding) return false;
    if (DisableNvidiaHardwareEncoding != other.DisableNvidiaHardwareEncoding) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSystemInfo) hash ^= SystemInfo.GetHashCode();
    if (HasSystemCanSuspend) hash ^= SystemCanSuspend.GetHashCode();
    if (HasMaximumDecodeBitrateKbps) hash ^= MaximumDecodeBitrateKbps.GetHashCode();
    if (HasMaximumBurstBitrateKbps) hash ^= MaximumBurstBitrateKbps.GetHashCode();
    if (HasSupportsVideoHevc) hash ^= SupportsVideoHevc.GetHashCode();
    if (HasDisableSteamStore) hash ^= DisableSteamStore.GetHashCode();
    if (HasDisableClientCursor) hash ^= DisableClientCursor.GetHashCode();
    if (HasDisableIntelHardwareEncoding) hash ^= DisableIntelHardwareEncoding.GetHashCode();
    if (HasDisableAmdHardwareEncoding) hash ^= DisableAmdHardwareEncoding.GetHashCode();
    if (HasDisableNvidiaHardwareEncoding) hash ^= DisableNvidiaHardwareEncoding.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasSystemInfo) {
      output.WriteRawTag(10);
      output.WriteString(SystemInfo);
    }
    if (HasSystemCanSuspend) {
      output.WriteRawTag(16);
      output.WriteBool(SystemCanSuspend);
    }
    if (HasMaximumDecodeBitrateKbps) {
      output.WriteRawTag(24);
      output.WriteInt32(MaximumDecodeBitrateKbps);
    }
    if (HasMaximumBurstBitrateKbps) {
      output.WriteRawTag(32);
      output.WriteInt32(MaximumBurstBitrateKbps);
    }
    if (HasSupportsVideoHevc) {
      output.WriteRawTag(40);
      output.WriteBool(SupportsVideoHevc);
    }
    if (HasDisableSteamStore) {
      output.WriteRawTag(48);
      output.WriteBool(DisableSteamStore);
    }
    if (HasDisableClientCursor) {
      output.WriteRawTag(56);
      output.WriteBool(DisableClientCursor);
    }
    if (HasDisableIntelHardwareEncoding) {
      output.WriteRawTag(64);
      output.WriteBool(DisableIntelHardwareEncoding);
    }
    if (HasDisableAmdHardwareEncoding) {
      output.WriteRawTag(72);
      output.WriteBool(DisableAmdHardwareEncoding);
    }
    if (HasDisableNvidiaHardwareEncoding) {
      output.WriteRawTag(80);
      output.WriteBool(DisableNvidiaHardwareEncoding);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasSystemInfo) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SystemInfo);
    }
    if (HasSystemCanSuspend) {
      size += 1 + 1;
    }
    if (HasMaximumDecodeBitrateKbps) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumDecodeBitrateKbps);
    }
    if (HasMaximumBurstBitrateKbps) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumBurstBitrateKbps);
    }
    if (HasSupportsVideoHevc) {
      size += 1 + 1;
    }
    if (HasDisableSteamStore) {
      size += 1 + 1;
    }
    if (HasDisableClientCursor) {
      size += 1 + 1;
    }
    if (HasDisableIntelHardwareEncoding) {
      size += 1 + 1;
    }
    if (HasDisableAmdHardwareEncoding) {
      size += 1 + 1;
    }
    if (HasDisableNvidiaHardwareEncoding) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CStreamingClientCaps other) {
    if (other == null) {
      return;
    }
    if (other.HasSystemInfo) {
      SystemInfo = other.SystemInfo;
    }
    if (other.HasSystemCanSuspend) {
      SystemCanSuspend = other.SystemCanSuspend;
    }
    if (other.HasMaximumDecodeBitrateKbps) {
      MaximumDecodeBitrateKbps = other.MaximumDecodeBitrateKbps;
    }
    if (other.HasMaximumBurstBitrateKbps) {
      MaximumBurstBitrateKbps = other.MaximumBurstBitrateKbps;
    }
    if (other.HasSupportsVideoHevc) {
      SupportsVideoHevc = other.SupportsVideoHevc;
    }
    if (other.HasDisableSteamStore) {
      DisableSteamStore = other.DisableSteamStore;
    }
    if (other.HasDisableClientCursor) {
      DisableClientCursor = other.DisableClientCursor;
    }
    if (other.HasDisableIntelHardwareEncoding) {
      DisableIntelHardwareEncoding = other.DisableIntelHardwareEncoding;
    }
    if (other.HasDisableAmdHardwareEncoding) {
      DisableAmdHardwareEncoding = other.DisableAmdHardwareEncoding;
    }
    if (other.HasDisableNvidiaHardwareEncoding) {
      DisableNvidiaHardwareEncoding = other.DisableNvidiaHardwareEncoding;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SystemInfo = input.ReadString();
          break;
        }
        case 16: {
          SystemCanSuspend = input.ReadBool();
          break;
        }
        case 24: {
          MaximumDecodeBitrateKbps = input.ReadInt32();
          break;
        }
        case 32: {
          MaximumBurstBitrateKbps = input.ReadInt32();
          break;
        }
        case 40: {
          SupportsVideoHevc = input.ReadBool();
          break;
        }
        case 48: {
          DisableSteamStore = input.ReadBool();
          break;
        }
        case 56: {
          DisableClientCursor = input.ReadBool();
          break;
        }
        case 64: {
          DisableIntelHardwareEncoding = input.ReadBool();
          break;
        }
        case 72: {
          DisableAmdHardwareEncoding = input.ReadBool();
          break;
        }
        case 80: {
          DisableNvidiaHardwareEncoding = input.ReadBool();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CStreamingClientConfig : pb::IMessage<CStreamingClientConfig> {
  private static readonly pb::MessageParser<CStreamingClientConfig> _parser = new pb::MessageParser<CStreamingClientConfig>(() => new CStreamingClientConfig());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CStreamingClientConfig> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingClientConfig() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingClientConfig(CStreamingClientConfig other) : this() {
    quality_ = other.quality_;
    maximumResolutionX_ = other.maximumResolutionX_;
    maximumResolutionY_ = other.maximumResolutionY_;
    maximumFramerateNumerator_ = other.maximumFramerateNumerator_;
    maximumFramerateDenominator_ = other.maximumFramerateDenominator_;
    maximumBitrateKbps_ = other.maximumBitrateKbps_;
    enableHardwareDecoding_ = other.enableHardwareDecoding_;
    enablePerformanceOverlay_ = other.enablePerformanceOverlay_;
    enableVideoStreaming_ = other.enableVideoStreaming_;
    enableAudioStreaming_ = other.enableAudioStreaming_;
    enableInputStreaming_ = other.enableInputStreaming_;
    audioChannels_ = other.audioChannels_;
    enableVideoHevc_ = other.enableVideoHevc_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingClientConfig Clone() {
    return new CStreamingClientConfig(this);
  }

  /// <summary>Field number for the "quality" field.</summary>
  public const int QualityFieldNumber = 1;
  /// <summary>Default value for the "quality" field</summary>
  public const global::EStreamQualityPreference QualityDefaultValue = global::EStreamQualityPreference.KEstreamQualityBalanced;

  private global::EStreamQualityPreference? quality_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamQualityPreference Quality {
    get { return quality_ ?? QualityDefaultValue; }
    set {
      quality_ = value;
    }
  }
  /// <summary>Gets whether the "quality" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasQuality {
    get { return quality_ != null; }
  }
  /// <summary>Clears the value of the "quality" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearQuality() {
    quality_ = null;
  }

  /// <summary>Field number for the "maximum_resolution_x" field.</summary>
  public const int MaximumResolutionXFieldNumber = 2;
  /// <summary>Default value for the "maximum_resolution_x" field</summary>
  public const uint MaximumResolutionXDefaultValue = 0;

  private uint? maximumResolutionX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaximumResolutionX {
    get { return maximumResolutionX_ ?? MaximumResolutionXDefaultValue; }
    set {
      maximumResolutionX_ = value;
    }
  }
  /// <summary>Gets whether the "maximum_resolution_x" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaximumResolutionX {
    get { return maximumResolutionX_ != null; }
  }
  /// <summary>Clears the value of the "maximum_resolution_x" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaximumResolutionX() {
    maximumResolutionX_ = null;
  }

  /// <summary>Field number for the "maximum_resolution_y" field.</summary>
  public const int MaximumResolutionYFieldNumber = 3;
  /// <summary>Default value for the "maximum_resolution_y" field</summary>
  public const uint MaximumResolutionYDefaultValue = 0;

  private uint? maximumResolutionY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaximumResolutionY {
    get { return maximumResolutionY_ ?? MaximumResolutionYDefaultValue; }
    set {
      maximumResolutionY_ = value;
    }
  }
  /// <summary>Gets whether the "maximum_resolution_y" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaximumResolutionY {
    get { return maximumResolutionY_ != null; }
  }
  /// <summary>Clears the value of the "maximum_resolution_y" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaximumResolutionY() {
    maximumResolutionY_ = null;
  }

  /// <summary>Field number for the "maximum_framerate_numerator" field.</summary>
  public const int MaximumFramerateNumeratorFieldNumber = 4;
  /// <summary>Default value for the "maximum_framerate_numerator" field</summary>
  public const uint MaximumFramerateNumeratorDefaultValue = 0;

  private uint? maximumFramerateNumerator_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaximumFramerateNumerator {
    get { return maximumFramerateNumerator_ ?? MaximumFramerateNumeratorDefaultValue; }
    set {
      maximumFramerateNumerator_ = value;
    }
  }
  /// <summary>Gets whether the "maximum_framerate_numerator" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaximumFramerateNumerator {
    get { return maximumFramerateNumerator_ != null; }
  }
  /// <summary>Clears the value of the "maximum_framerate_numerator" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaximumFramerateNumerator() {
    maximumFramerateNumerator_ = null;
  }

  /// <summary>Field number for the "maximum_framerate_denominator" field.</summary>
  public const int MaximumFramerateDenominatorFieldNumber = 5;
  /// <summary>Default value for the "maximum_framerate_denominator" field</summary>
  public const uint MaximumFramerateDenominatorDefaultValue = 0;

  private uint? maximumFramerateDenominator_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaximumFramerateDenominator {
    get { return maximumFramerateDenominator_ ?? MaximumFramerateDenominatorDefaultValue; }
    set {
      maximumFramerateDenominator_ = value;
    }
  }
  /// <summary>Gets whether the "maximum_framerate_denominator" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaximumFramerateDenominator {
    get { return maximumFramerateDenominator_ != null; }
  }
  /// <summary>Clears the value of the "maximum_framerate_denominator" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaximumFramerateDenominator() {
    maximumFramerateDenominator_ = null;
  }

  /// <summary>Field number for the "maximum_bitrate_kbps" field.</summary>
  public const int MaximumBitrateKbpsFieldNumber = 6;
  /// <summary>Default value for the "maximum_bitrate_kbps" field</summary>
  public const int MaximumBitrateKbpsDefaultValue = -1;

  private int? maximumBitrateKbps_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaximumBitrateKbps {
    get { return maximumBitrateKbps_ ?? MaximumBitrateKbpsDefaultValue; }
    set {
      maximumBitrateKbps_ = value;
    }
  }
  /// <summary>Gets whether the "maximum_bitrate_kbps" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaximumBitrateKbps {
    get { return maximumBitrateKbps_ != null; }
  }
  /// <summary>Clears the value of the "maximum_bitrate_kbps" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaximumBitrateKbps() {
    maximumBitrateKbps_ = null;
  }

  /// <summary>Field number for the "enable_hardware_decoding" field.</summary>
  public const int EnableHardwareDecodingFieldNumber = 7;
  /// <summary>Default value for the "enable_hardware_decoding" field</summary>
  public const bool EnableHardwareDecodingDefaultValue = true;

  private bool? enableHardwareDecoding_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableHardwareDecoding {
    get { return enableHardwareDecoding_ ?? EnableHardwareDecodingDefaultValue; }
    set {
      enableHardwareDecoding_ = value;
    }
  }
  /// <summary>Gets whether the "enable_hardware_decoding" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableHardwareDecoding {
    get { return enableHardwareDecoding_ != null; }
  }
  /// <summary>Clears the value of the "enable_hardware_decoding" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableHardwareDecoding() {
    enableHardwareDecoding_ = null;
  }

  /// <summary>Field number for the "enable_performance_overlay" field.</summary>
  public const int EnablePerformanceOverlayFieldNumber = 8;
  /// <summary>Default value for the "enable_performance_overlay" field</summary>
  public const bool EnablePerformanceOverlayDefaultValue = false;

  private bool? enablePerformanceOverlay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnablePerformanceOverlay {
    get { return enablePerformanceOverlay_ ?? EnablePerformanceOverlayDefaultValue; }
    set {
      enablePerformanceOverlay_ = value;
    }
  }
  /// <summary>Gets whether the "enable_performance_overlay" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnablePerformanceOverlay {
    get { return enablePerformanceOverlay_ != null; }
  }
  /// <summary>Clears the value of the "enable_performance_overlay" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnablePerformanceOverlay() {
    enablePerformanceOverlay_ = null;
  }

  /// <summary>Field number for the "enable_video_streaming" field.</summary>
  public const int EnableVideoStreamingFieldNumber = 9;
  /// <summary>Default value for the "enable_video_streaming" field</summary>
  public const bool EnableVideoStreamingDefaultValue = true;

  private bool? enableVideoStreaming_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableVideoStreaming {
    get { return enableVideoStreaming_ ?? EnableVideoStreamingDefaultValue; }
    set {
      enableVideoStreaming_ = value;
    }
  }
  /// <summary>Gets whether the "enable_video_streaming" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableVideoStreaming {
    get { return enableVideoStreaming_ != null; }
  }
  /// <summary>Clears the value of the "enable_video_streaming" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableVideoStreaming() {
    enableVideoStreaming_ = null;
  }

  /// <summary>Field number for the "enable_audio_streaming" field.</summary>
  public const int EnableAudioStreamingFieldNumber = 10;
  /// <summary>Default value for the "enable_audio_streaming" field</summary>
  public const bool EnableAudioStreamingDefaultValue = true;

  private bool? enableAudioStreaming_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableAudioStreaming {
    get { return enableAudioStreaming_ ?? EnableAudioStreamingDefaultValue; }
    set {
      enableAudioStreaming_ = value;
    }
  }
  /// <summary>Gets whether the "enable_audio_streaming" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableAudioStreaming {
    get { return enableAudioStreaming_ != null; }
  }
  /// <summary>Clears the value of the "enable_audio_streaming" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableAudioStreaming() {
    enableAudioStreaming_ = null;
  }

  /// <summary>Field number for the "enable_input_streaming" field.</summary>
  public const int EnableInputStreamingFieldNumber = 11;
  /// <summary>Default value for the "enable_input_streaming" field</summary>
  public const bool EnableInputStreamingDefaultValue = true;

  private bool? enableInputStreaming_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableInputStreaming {
    get { return enableInputStreaming_ ?? EnableInputStreamingDefaultValue; }
    set {
      enableInputStreaming_ = value;
    }
  }
  /// <summary>Gets whether the "enable_input_streaming" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableInputStreaming {
    get { return enableInputStreaming_ != null; }
  }
  /// <summary>Clears the value of the "enable_input_streaming" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableInputStreaming() {
    enableInputStreaming_ = null;
  }

  /// <summary>Field number for the "audio_channels" field.</summary>
  public const int AudioChannelsFieldNumber = 12;
  /// <summary>Default value for the "audio_channels" field</summary>
  public const int AudioChannelsDefaultValue = 2;

  private int? audioChannels_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AudioChannels {
    get { return audioChannels_ ?? AudioChannelsDefaultValue; }
    set {
      audioChannels_ = value;
    }
  }
  /// <summary>Gets whether the "audio_channels" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAudioChannels {
    get { return audioChannels_ != null; }
  }
  /// <summary>Clears the value of the "audio_channels" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAudioChannels() {
    audioChannels_ = null;
  }

  /// <summary>Field number for the "enable_video_hevc" field.</summary>
  public const int EnableVideoHevcFieldNumber = 13;
  /// <summary>Default value for the "enable_video_hevc" field</summary>
  public const bool EnableVideoHevcDefaultValue = false;

  private bool? enableVideoHevc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableVideoHevc {
    get { return enableVideoHevc_ ?? EnableVideoHevcDefaultValue; }
    set {
      enableVideoHevc_ = value;
    }
  }
  /// <summary>Gets whether the "enable_video_hevc" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableVideoHevc {
    get { return enableVideoHevc_ != null; }
  }
  /// <summary>Clears the value of the "enable_video_hevc" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableVideoHevc() {
    enableVideoHevc_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CStreamingClientConfig);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CStreamingClientConfig other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Quality != other.Quality) return false;
    if (MaximumResolutionX != other.MaximumResolutionX) return false;
    if (MaximumResolutionY != other.MaximumResolutionY) return false;
    if (MaximumFramerateNumerator != other.MaximumFramerateNumerator) return false;
    if (MaximumFramerateDenominator != other.MaximumFramerateDenominator) return false;
    if (MaximumBitrateKbps != other.MaximumBitrateKbps) return false;
    if (EnableHardwareDecoding != other.EnableHardwareDecoding) return false;
    if (EnablePerformanceOverlay != other.EnablePerformanceOverlay) return false;
    if (EnableVideoStreaming != other.EnableVideoStreaming) return false;
    if (EnableAudioStreaming != other.EnableAudioStreaming) return false;
    if (EnableInputStreaming != other.EnableInputStreaming) return false;
    if (AudioChannels != other.AudioChannels) return false;
    if (EnableVideoHevc != other.EnableVideoHevc) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasQuality) hash ^= Quality.GetHashCode();
    if (HasMaximumResolutionX) hash ^= MaximumResolutionX.GetHashCode();
    if (HasMaximumResolutionY) hash ^= MaximumResolutionY.GetHashCode();
    if (HasMaximumFramerateNumerator) hash ^= MaximumFramerateNumerator.GetHashCode();
    if (HasMaximumFramerateDenominator) hash ^= MaximumFramerateDenominator.GetHashCode();
    if (HasMaximumBitrateKbps) hash ^= MaximumBitrateKbps.GetHashCode();
    if (HasEnableHardwareDecoding) hash ^= EnableHardwareDecoding.GetHashCode();
    if (HasEnablePerformanceOverlay) hash ^= EnablePerformanceOverlay.GetHashCode();
    if (HasEnableVideoStreaming) hash ^= EnableVideoStreaming.GetHashCode();
    if (HasEnableAudioStreaming) hash ^= EnableAudioStreaming.GetHashCode();
    if (HasEnableInputStreaming) hash ^= EnableInputStreaming.GetHashCode();
    if (HasAudioChannels) hash ^= AudioChannels.GetHashCode();
    if (HasEnableVideoHevc) hash ^= EnableVideoHevc.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasQuality) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Quality);
    }
    if (HasMaximumResolutionX) {
      output.WriteRawTag(16);
      output.WriteUInt32(MaximumResolutionX);
    }
    if (HasMaximumResolutionY) {
      output.WriteRawTag(24);
      output.WriteUInt32(MaximumResolutionY);
    }
    if (HasMaximumFramerateNumerator) {
      output.WriteRawTag(32);
      output.WriteUInt32(MaximumFramerateNumerator);
    }
    if (HasMaximumFramerateDenominator) {
      output.WriteRawTag(40);
      output.WriteUInt32(MaximumFramerateDenominator);
    }
    if (HasMaximumBitrateKbps) {
      output.WriteRawTag(48);
      output.WriteInt32(MaximumBitrateKbps);
    }
    if (HasEnableHardwareDecoding) {
      output.WriteRawTag(56);
      output.WriteBool(EnableHardwareDecoding);
    }
    if (HasEnablePerformanceOverlay) {
      output.WriteRawTag(64);
      output.WriteBool(EnablePerformanceOverlay);
    }
    if (HasEnableVideoStreaming) {
      output.WriteRawTag(72);
      output.WriteBool(EnableVideoStreaming);
    }
    if (HasEnableAudioStreaming) {
      output.WriteRawTag(80);
      output.WriteBool(EnableAudioStreaming);
    }
    if (HasEnableInputStreaming) {
      output.WriteRawTag(88);
      output.WriteBool(EnableInputStreaming);
    }
    if (HasAudioChannels) {
      output.WriteRawTag(96);
      output.WriteInt32(AudioChannels);
    }
    if (HasEnableVideoHevc) {
      output.WriteRawTag(104);
      output.WriteBool(EnableVideoHevc);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasQuality) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Quality);
    }
    if (HasMaximumResolutionX) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumResolutionX);
    }
    if (HasMaximumResolutionY) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumResolutionY);
    }
    if (HasMaximumFramerateNumerator) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumFramerateNumerator);
    }
    if (HasMaximumFramerateDenominator) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumFramerateDenominator);
    }
    if (HasMaximumBitrateKbps) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumBitrateKbps);
    }
    if (HasEnableHardwareDecoding) {
      size += 1 + 1;
    }
    if (HasEnablePerformanceOverlay) {
      size += 1 + 1;
    }
    if (HasEnableVideoStreaming) {
      size += 1 + 1;
    }
    if (HasEnableAudioStreaming) {
      size += 1 + 1;
    }
    if (HasEnableInputStreaming) {
      size += 1 + 1;
    }
    if (HasAudioChannels) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudioChannels);
    }
    if (HasEnableVideoHevc) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CStreamingClientConfig other) {
    if (other == null) {
      return;
    }
    if (other.HasQuality) {
      Quality = other.Quality;
    }
    if (other.HasMaximumResolutionX) {
      MaximumResolutionX = other.MaximumResolutionX;
    }
    if (other.HasMaximumResolutionY) {
      MaximumResolutionY = other.MaximumResolutionY;
    }
    if (other.HasMaximumFramerateNumerator) {
      MaximumFramerateNumerator = other.MaximumFramerateNumerator;
    }
    if (other.HasMaximumFramerateDenominator) {
      MaximumFramerateDenominator = other.MaximumFramerateDenominator;
    }
    if (other.HasMaximumBitrateKbps) {
      MaximumBitrateKbps = other.MaximumBitrateKbps;
    }
    if (other.HasEnableHardwareDecoding) {
      EnableHardwareDecoding = other.EnableHardwareDecoding;
    }
    if (other.HasEnablePerformanceOverlay) {
      EnablePerformanceOverlay = other.EnablePerformanceOverlay;
    }
    if (other.HasEnableVideoStreaming) {
      EnableVideoStreaming = other.EnableVideoStreaming;
    }
    if (other.HasEnableAudioStreaming) {
      EnableAudioStreaming = other.EnableAudioStreaming;
    }
    if (other.HasEnableInputStreaming) {
      EnableInputStreaming = other.EnableInputStreaming;
    }
    if (other.HasAudioChannels) {
      AudioChannels = other.AudioChannels;
    }
    if (other.HasEnableVideoHevc) {
      EnableVideoHevc = other.EnableVideoHevc;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          quality_ = (global::EStreamQualityPreference) input.ReadEnum();
          break;
        }
        case 16: {
          MaximumResolutionX = input.ReadUInt32();
          break;
        }
        case 24: {
          MaximumResolutionY = input.ReadUInt32();
          break;
        }
        case 32: {
          MaximumFramerateNumerator = input.ReadUInt32();
          break;
        }
        case 40: {
          MaximumFramerateDenominator = input.ReadUInt32();
          break;
        }
        case 48: {
          MaximumBitrateKbps = input.ReadInt32();
          break;
        }
        case 56: {
          EnableHardwareDecoding = input.ReadBool();
          break;
        }
        case 64: {
          EnablePerformanceOverlay = input.ReadBool();
          break;
        }
        case 72: {
          EnableVideoStreaming = input.ReadBool();
          break;
        }
        case 80: {
          EnableAudioStreaming = input.ReadBool();
          break;
        }
        case 88: {
          EnableInputStreaming = input.ReadBool();
          break;
        }
        case 96: {
          AudioChannels = input.ReadInt32();
          break;
        }
        case 104: {
          EnableVideoHevc = input.ReadBool();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CStreamingServerConfig : pb::IMessage<CStreamingServerConfig> {
  private static readonly pb::MessageParser<CStreamingServerConfig> _parser = new pb::MessageParser<CStreamingServerConfig>(() => new CStreamingServerConfig());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CStreamingServerConfig> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingServerConfig() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingServerConfig(CStreamingServerConfig other) : this() {
    changeDesktopResolution_ = other.changeDesktopResolution_;
    dynamicallyAdjustResolution_ = other.dynamicallyAdjustResolution_;
    enableCaptureNvfbc_ = other.enableCaptureNvfbc_;
    enableHardwareEncodingNvidia_ = other.enableHardwareEncodingNvidia_;
    enableHardwareEncodingAmd_ = other.enableHardwareEncodingAmd_;
    enableHardwareEncodingIntel_ = other.enableHardwareEncodingIntel_;
    softwareEncodingThreads_ = other.softwareEncodingThreads_;
    enableTrafficPriority_ = other.enableTrafficPriority_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingServerConfig Clone() {
    return new CStreamingServerConfig(this);
  }

  /// <summary>Field number for the "change_desktop_resolution" field.</summary>
  public const int ChangeDesktopResolutionFieldNumber = 1;
  /// <summary>Default value for the "change_desktop_resolution" field</summary>
  public const bool ChangeDesktopResolutionDefaultValue = false;

  private bool? changeDesktopResolution_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ChangeDesktopResolution {
    get { return changeDesktopResolution_ ?? ChangeDesktopResolutionDefaultValue; }
    set {
      changeDesktopResolution_ = value;
    }
  }
  /// <summary>Gets whether the "change_desktop_resolution" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasChangeDesktopResolution {
    get { return changeDesktopResolution_ != null; }
  }
  /// <summary>Clears the value of the "change_desktop_resolution" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearChangeDesktopResolution() {
    changeDesktopResolution_ = null;
  }

  /// <summary>Field number for the "dynamically_adjust_resolution" field.</summary>
  public const int DynamicallyAdjustResolutionFieldNumber = 2;
  /// <summary>Default value for the "dynamically_adjust_resolution" field</summary>
  public const bool DynamicallyAdjustResolutionDefaultValue = false;

  private bool? dynamicallyAdjustResolution_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DynamicallyAdjustResolution {
    get { return dynamicallyAdjustResolution_ ?? DynamicallyAdjustResolutionDefaultValue; }
    set {
      dynamicallyAdjustResolution_ = value;
    }
  }
  /// <summary>Gets whether the "dynamically_adjust_resolution" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDynamicallyAdjustResolution {
    get { return dynamicallyAdjustResolution_ != null; }
  }
  /// <summary>Clears the value of the "dynamically_adjust_resolution" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDynamicallyAdjustResolution() {
    dynamicallyAdjustResolution_ = null;
  }

  /// <summary>Field number for the "enable_capture_nvfbc" field.</summary>
  public const int EnableCaptureNvfbcFieldNumber = 3;
  /// <summary>Default value for the "enable_capture_nvfbc" field</summary>
  public const bool EnableCaptureNvfbcDefaultValue = false;

  private bool? enableCaptureNvfbc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableCaptureNvfbc {
    get { return enableCaptureNvfbc_ ?? EnableCaptureNvfbcDefaultValue; }
    set {
      enableCaptureNvfbc_ = value;
    }
  }
  /// <summary>Gets whether the "enable_capture_nvfbc" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableCaptureNvfbc {
    get { return enableCaptureNvfbc_ != null; }
  }
  /// <summary>Clears the value of the "enable_capture_nvfbc" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableCaptureNvfbc() {
    enableCaptureNvfbc_ = null;
  }

  /// <summary>Field number for the "enable_hardware_encoding_nvidia" field.</summary>
  public const int EnableHardwareEncodingNvidiaFieldNumber = 4;
  /// <summary>Default value for the "enable_hardware_encoding_nvidia" field</summary>
  public const bool EnableHardwareEncodingNvidiaDefaultValue = false;

  private bool? enableHardwareEncodingNvidia_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableHardwareEncodingNvidia {
    get { return enableHardwareEncodingNvidia_ ?? EnableHardwareEncodingNvidiaDefaultValue; }
    set {
      enableHardwareEncodingNvidia_ = value;
    }
  }
  /// <summary>Gets whether the "enable_hardware_encoding_nvidia" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableHardwareEncodingNvidia {
    get { return enableHardwareEncodingNvidia_ != null; }
  }
  /// <summary>Clears the value of the "enable_hardware_encoding_nvidia" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableHardwareEncodingNvidia() {
    enableHardwareEncodingNvidia_ = null;
  }

  /// <summary>Field number for the "enable_hardware_encoding_amd" field.</summary>
  public const int EnableHardwareEncodingAmdFieldNumber = 5;
  /// <summary>Default value for the "enable_hardware_encoding_amd" field</summary>
  public const bool EnableHardwareEncodingAmdDefaultValue = false;

  private bool? enableHardwareEncodingAmd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableHardwareEncodingAmd {
    get { return enableHardwareEncodingAmd_ ?? EnableHardwareEncodingAmdDefaultValue; }
    set {
      enableHardwareEncodingAmd_ = value;
    }
  }
  /// <summary>Gets whether the "enable_hardware_encoding_amd" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableHardwareEncodingAmd {
    get { return enableHardwareEncodingAmd_ != null; }
  }
  /// <summary>Clears the value of the "enable_hardware_encoding_amd" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableHardwareEncodingAmd() {
    enableHardwareEncodingAmd_ = null;
  }

  /// <summary>Field number for the "enable_hardware_encoding_intel" field.</summary>
  public const int EnableHardwareEncodingIntelFieldNumber = 6;
  /// <summary>Default value for the "enable_hardware_encoding_intel" field</summary>
  public const bool EnableHardwareEncodingIntelDefaultValue = false;

  private bool? enableHardwareEncodingIntel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableHardwareEncodingIntel {
    get { return enableHardwareEncodingIntel_ ?? EnableHardwareEncodingIntelDefaultValue; }
    set {
      enableHardwareEncodingIntel_ = value;
    }
  }
  /// <summary>Gets whether the "enable_hardware_encoding_intel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableHardwareEncodingIntel {
    get { return enableHardwareEncodingIntel_ != null; }
  }
  /// <summary>Clears the value of the "enable_hardware_encoding_intel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableHardwareEncodingIntel() {
    enableHardwareEncodingIntel_ = null;
  }

  /// <summary>Field number for the "software_encoding_threads" field.</summary>
  public const int SoftwareEncodingThreadsFieldNumber = 7;
  /// <summary>Default value for the "software_encoding_threads" field</summary>
  public const int SoftwareEncodingThreadsDefaultValue = 0;

  private int? softwareEncodingThreads_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SoftwareEncodingThreads {
    get { return softwareEncodingThreads_ ?? SoftwareEncodingThreadsDefaultValue; }
    set {
      softwareEncodingThreads_ = value;
    }
  }
  /// <summary>Gets whether the "software_encoding_threads" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSoftwareEncodingThreads {
    get { return softwareEncodingThreads_ != null; }
  }
  /// <summary>Clears the value of the "software_encoding_threads" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSoftwareEncodingThreads() {
    softwareEncodingThreads_ = null;
  }

  /// <summary>Field number for the "enable_traffic_priority" field.</summary>
  public const int EnableTrafficPriorityFieldNumber = 8;
  /// <summary>Default value for the "enable_traffic_priority" field</summary>
  public const bool EnableTrafficPriorityDefaultValue = false;

  private bool? enableTrafficPriority_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableTrafficPriority {
    get { return enableTrafficPriority_ ?? EnableTrafficPriorityDefaultValue; }
    set {
      enableTrafficPriority_ = value;
    }
  }
  /// <summary>Gets whether the "enable_traffic_priority" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableTrafficPriority {
    get { return enableTrafficPriority_ != null; }
  }
  /// <summary>Clears the value of the "enable_traffic_priority" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableTrafficPriority() {
    enableTrafficPriority_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CStreamingServerConfig);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CStreamingServerConfig other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ChangeDesktopResolution != other.ChangeDesktopResolution) return false;
    if (DynamicallyAdjustResolution != other.DynamicallyAdjustResolution) return false;
    if (EnableCaptureNvfbc != other.EnableCaptureNvfbc) return false;
    if (EnableHardwareEncodingNvidia != other.EnableHardwareEncodingNvidia) return false;
    if (EnableHardwareEncodingAmd != other.EnableHardwareEncodingAmd) return false;
    if (EnableHardwareEncodingIntel != other.EnableHardwareEncodingIntel) return false;
    if (SoftwareEncodingThreads != other.SoftwareEncodingThreads) return false;
    if (EnableTrafficPriority != other.EnableTrafficPriority) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasChangeDesktopResolution) hash ^= ChangeDesktopResolution.GetHashCode();
    if (HasDynamicallyAdjustResolution) hash ^= DynamicallyAdjustResolution.GetHashCode();
    if (HasEnableCaptureNvfbc) hash ^= EnableCaptureNvfbc.GetHashCode();
    if (HasEnableHardwareEncodingNvidia) hash ^= EnableHardwareEncodingNvidia.GetHashCode();
    if (HasEnableHardwareEncodingAmd) hash ^= EnableHardwareEncodingAmd.GetHashCode();
    if (HasEnableHardwareEncodingIntel) hash ^= EnableHardwareEncodingIntel.GetHashCode();
    if (HasSoftwareEncodingThreads) hash ^= SoftwareEncodingThreads.GetHashCode();
    if (HasEnableTrafficPriority) hash ^= EnableTrafficPriority.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasChangeDesktopResolution) {
      output.WriteRawTag(8);
      output.WriteBool(ChangeDesktopResolution);
    }
    if (HasDynamicallyAdjustResolution) {
      output.WriteRawTag(16);
      output.WriteBool(DynamicallyAdjustResolution);
    }
    if (HasEnableCaptureNvfbc) {
      output.WriteRawTag(24);
      output.WriteBool(EnableCaptureNvfbc);
    }
    if (HasEnableHardwareEncodingNvidia) {
      output.WriteRawTag(32);
      output.WriteBool(EnableHardwareEncodingNvidia);
    }
    if (HasEnableHardwareEncodingAmd) {
      output.WriteRawTag(40);
      output.WriteBool(EnableHardwareEncodingAmd);
    }
    if (HasEnableHardwareEncodingIntel) {
      output.WriteRawTag(48);
      output.WriteBool(EnableHardwareEncodingIntel);
    }
    if (HasSoftwareEncodingThreads) {
      output.WriteRawTag(56);
      output.WriteInt32(SoftwareEncodingThreads);
    }
    if (HasEnableTrafficPriority) {
      output.WriteRawTag(64);
      output.WriteBool(EnableTrafficPriority);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasChangeDesktopResolution) {
      size += 1 + 1;
    }
    if (HasDynamicallyAdjustResolution) {
      size += 1 + 1;
    }
    if (HasEnableCaptureNvfbc) {
      size += 1 + 1;
    }
    if (HasEnableHardwareEncodingNvidia) {
      size += 1 + 1;
    }
    if (HasEnableHardwareEncodingAmd) {
      size += 1 + 1;
    }
    if (HasEnableHardwareEncodingIntel) {
      size += 1 + 1;
    }
    if (HasSoftwareEncodingThreads) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoftwareEncodingThreads);
    }
    if (HasEnableTrafficPriority) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CStreamingServerConfig other) {
    if (other == null) {
      return;
    }
    if (other.HasChangeDesktopResolution) {
      ChangeDesktopResolution = other.ChangeDesktopResolution;
    }
    if (other.HasDynamicallyAdjustResolution) {
      DynamicallyAdjustResolution = other.DynamicallyAdjustResolution;
    }
    if (other.HasEnableCaptureNvfbc) {
      EnableCaptureNvfbc = other.EnableCaptureNvfbc;
    }
    if (other.HasEnableHardwareEncodingNvidia) {
      EnableHardwareEncodingNvidia = other.EnableHardwareEncodingNvidia;
    }
    if (other.HasEnableHardwareEncodingAmd) {
      EnableHardwareEncodingAmd = other.EnableHardwareEncodingAmd;
    }
    if (other.HasEnableHardwareEncodingIntel) {
      EnableHardwareEncodingIntel = other.EnableHardwareEncodingIntel;
    }
    if (other.HasSoftwareEncodingThreads) {
      SoftwareEncodingThreads = other.SoftwareEncodingThreads;
    }
    if (other.HasEnableTrafficPriority) {
      EnableTrafficPriority = other.EnableTrafficPriority;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ChangeDesktopResolution = input.ReadBool();
          break;
        }
        case 16: {
          DynamicallyAdjustResolution = input.ReadBool();
          break;
        }
        case 24: {
          EnableCaptureNvfbc = input.ReadBool();
          break;
        }
        case 32: {
          EnableHardwareEncodingNvidia = input.ReadBool();
          break;
        }
        case 40: {
          EnableHardwareEncodingAmd = input.ReadBool();
          break;
        }
        case 48: {
          EnableHardwareEncodingIntel = input.ReadBool();
          break;
        }
        case 56: {
          SoftwareEncodingThreads = input.ReadInt32();
          break;
        }
        case 64: {
          EnableTrafficPriority = input.ReadBool();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CNegotiatedConfig : pb::IMessage<CNegotiatedConfig> {
  private static readonly pb::MessageParser<CNegotiatedConfig> _parser = new pb::MessageParser<CNegotiatedConfig>(() => new CNegotiatedConfig());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNegotiatedConfig> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNegotiatedConfig() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNegotiatedConfig(CNegotiatedConfig other) : this() {
    reliableData_ = other.reliableData_;
    selectedAudioCodec_ = other.selectedAudioCodec_;
    selectedVideoCodec_ = other.selectedVideoCodec_;
    availableVideoModes_ = other.availableVideoModes_.Clone();
    enableRemoteHid_ = other.enableRemoteHid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNegotiatedConfig Clone() {
    return new CNegotiatedConfig(this);
  }

  /// <summary>Field number for the "reliable_data" field.</summary>
  public const int ReliableDataFieldNumber = 1;
  /// <summary>Default value for the "reliable_data" field</summary>
  public const bool ReliableDataDefaultValue = false;

  private bool? reliableData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ReliableData {
    get { return reliableData_ ?? ReliableDataDefaultValue; }
    set {
      reliableData_ = value;
    }
  }
  /// <summary>Gets whether the "reliable_data" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReliableData {
    get { return reliableData_ != null; }
  }
  /// <summary>Clears the value of the "reliable_data" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReliableData() {
    reliableData_ = null;
  }

  /// <summary>Field number for the "selected_audio_codec" field.</summary>
  public const int SelectedAudioCodecFieldNumber = 2;
  /// <summary>Default value for the "selected_audio_codec" field</summary>
  public const global::EStreamAudioCodec SelectedAudioCodecDefaultValue = global::EStreamAudioCodec.KEstreamAudioCodecNone;

  private global::EStreamAudioCodec? selectedAudioCodec_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamAudioCodec SelectedAudioCodec {
    get { return selectedAudioCodec_ ?? SelectedAudioCodecDefaultValue; }
    set {
      selectedAudioCodec_ = value;
    }
  }
  /// <summary>Gets whether the "selected_audio_codec" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSelectedAudioCodec {
    get { return selectedAudioCodec_ != null; }
  }
  /// <summary>Clears the value of the "selected_audio_codec" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSelectedAudioCodec() {
    selectedAudioCodec_ = null;
  }

  /// <summary>Field number for the "selected_video_codec" field.</summary>
  public const int SelectedVideoCodecFieldNumber = 3;
  /// <summary>Default value for the "selected_video_codec" field</summary>
  public const global::EStreamVideoCodec SelectedVideoCodecDefaultValue = global::EStreamVideoCodec.KEstreamVideoCodecNone;

  private global::EStreamVideoCodec? selectedVideoCodec_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamVideoCodec SelectedVideoCodec {
    get { return selectedVideoCodec_ ?? SelectedVideoCodecDefaultValue; }
    set {
      selectedVideoCodec_ = value;
    }
  }
  /// <summary>Gets whether the "selected_video_codec" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSelectedVideoCodec {
    get { return selectedVideoCodec_ != null; }
  }
  /// <summary>Clears the value of the "selected_video_codec" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSelectedVideoCodec() {
    selectedVideoCodec_ = null;
  }

  /// <summary>Field number for the "available_video_modes" field.</summary>
  public const int AvailableVideoModesFieldNumber = 4;
  private static readonly pb::FieldCodec<global::CStreamVideoMode> _repeated_availableVideoModes_codec
      = pb::FieldCodec.ForMessage(34, global::CStreamVideoMode.Parser);
  private readonly pbc::RepeatedField<global::CStreamVideoMode> availableVideoModes_ = new pbc::RepeatedField<global::CStreamVideoMode>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CStreamVideoMode> AvailableVideoModes {
    get { return availableVideoModes_; }
  }

  /// <summary>Field number for the "enable_remote_hid" field.</summary>
  public const int EnableRemoteHidFieldNumber = 5;
  /// <summary>Default value for the "enable_remote_hid" field</summary>
  public const bool EnableRemoteHidDefaultValue = false;

  private bool? enableRemoteHid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableRemoteHid {
    get { return enableRemoteHid_ ?? EnableRemoteHidDefaultValue; }
    set {
      enableRemoteHid_ = value;
    }
  }
  /// <summary>Gets whether the "enable_remote_hid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableRemoteHid {
    get { return enableRemoteHid_ != null; }
  }
  /// <summary>Clears the value of the "enable_remote_hid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableRemoteHid() {
    enableRemoteHid_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNegotiatedConfig);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNegotiatedConfig other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ReliableData != other.ReliableData) return false;
    if (SelectedAudioCodec != other.SelectedAudioCodec) return false;
    if (SelectedVideoCodec != other.SelectedVideoCodec) return false;
    if(!availableVideoModes_.Equals(other.availableVideoModes_)) return false;
    if (EnableRemoteHid != other.EnableRemoteHid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasReliableData) hash ^= ReliableData.GetHashCode();
    if (HasSelectedAudioCodec) hash ^= SelectedAudioCodec.GetHashCode();
    if (HasSelectedVideoCodec) hash ^= SelectedVideoCodec.GetHashCode();
    hash ^= availableVideoModes_.GetHashCode();
    if (HasEnableRemoteHid) hash ^= EnableRemoteHid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasReliableData) {
      output.WriteRawTag(8);
      output.WriteBool(ReliableData);
    }
    if (HasSelectedAudioCodec) {
      output.WriteRawTag(16);
      output.WriteEnum((int) SelectedAudioCodec);
    }
    if (HasSelectedVideoCodec) {
      output.WriteRawTag(24);
      output.WriteEnum((int) SelectedVideoCodec);
    }
    availableVideoModes_.WriteTo(output, _repeated_availableVideoModes_codec);
    if (HasEnableRemoteHid) {
      output.WriteRawTag(40);
      output.WriteBool(EnableRemoteHid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasReliableData) {
      size += 1 + 1;
    }
    if (HasSelectedAudioCodec) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SelectedAudioCodec);
    }
    if (HasSelectedVideoCodec) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SelectedVideoCodec);
    }
    size += availableVideoModes_.CalculateSize(_repeated_availableVideoModes_codec);
    if (HasEnableRemoteHid) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNegotiatedConfig other) {
    if (other == null) {
      return;
    }
    if (other.HasReliableData) {
      ReliableData = other.ReliableData;
    }
    if (other.HasSelectedAudioCodec) {
      SelectedAudioCodec = other.SelectedAudioCodec;
    }
    if (other.HasSelectedVideoCodec) {
      SelectedVideoCodec = other.SelectedVideoCodec;
    }
    availableVideoModes_.Add(other.availableVideoModes_);
    if (other.HasEnableRemoteHid) {
      EnableRemoteHid = other.EnableRemoteHid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ReliableData = input.ReadBool();
          break;
        }
        case 16: {
          selectedAudioCodec_ = (global::EStreamAudioCodec) input.ReadEnum();
          break;
        }
        case 24: {
          selectedVideoCodec_ = (global::EStreamVideoCodec) input.ReadEnum();
          break;
        }
        case 34: {
          availableVideoModes_.AddEntriesFrom(input, _repeated_availableVideoModes_codec);
          break;
        }
        case 40: {
          EnableRemoteHid = input.ReadBool();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!availableVideoModes_.IsInitialized()) return false;
    return true;
  }
}

public sealed partial class CNegotiationInitMsg : pb::IMessage<CNegotiationInitMsg> {
  private static readonly pb::MessageParser<CNegotiationInitMsg> _parser = new pb::MessageParser<CNegotiationInitMsg>(() => new CNegotiationInitMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNegotiationInitMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNegotiationInitMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNegotiationInitMsg(CNegotiationInitMsg other) : this() {
    reliableData_ = other.reliableData_;
    supportedAudioCodecs_ = other.supportedAudioCodecs_.Clone();
    supportedVideoCodecs_ = other.supportedVideoCodecs_.Clone();
    supportsRemoteHid_ = other.supportsRemoteHid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNegotiationInitMsg Clone() {
    return new CNegotiationInitMsg(this);
  }

  /// <summary>Field number for the "reliable_data" field.</summary>
  public const int ReliableDataFieldNumber = 1;
  /// <summary>Default value for the "reliable_data" field</summary>
  public const bool ReliableDataDefaultValue = false;

  private bool? reliableData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ReliableData {
    get { return reliableData_ ?? ReliableDataDefaultValue; }
    set {
      reliableData_ = value;
    }
  }
  /// <summary>Gets whether the "reliable_data" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReliableData {
    get { return reliableData_ != null; }
  }
  /// <summary>Clears the value of the "reliable_data" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReliableData() {
    reliableData_ = null;
  }

  /// <summary>Field number for the "supported_audio_codecs" field.</summary>
  public const int SupportedAudioCodecsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::EStreamAudioCodec> _repeated_supportedAudioCodecs_codec
      = pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::EStreamAudioCodec) x);
  private readonly pbc::RepeatedField<global::EStreamAudioCodec> supportedAudioCodecs_ = new pbc::RepeatedField<global::EStreamAudioCodec>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EStreamAudioCodec> SupportedAudioCodecs {
    get { return supportedAudioCodecs_; }
  }

  /// <summary>Field number for the "supported_video_codecs" field.</summary>
  public const int SupportedVideoCodecsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::EStreamVideoCodec> _repeated_supportedVideoCodecs_codec
      = pb::FieldCodec.ForEnum(24, x => (int) x, x => (global::EStreamVideoCodec) x);
  private readonly pbc::RepeatedField<global::EStreamVideoCodec> supportedVideoCodecs_ = new pbc::RepeatedField<global::EStreamVideoCodec>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EStreamVideoCodec> SupportedVideoCodecs {
    get { return supportedVideoCodecs_; }
  }

  /// <summary>Field number for the "supports_remote_hid" field.</summary>
  public const int SupportsRemoteHidFieldNumber = 4;
  /// <summary>Default value for the "supports_remote_hid" field</summary>
  public const bool SupportsRemoteHidDefaultValue = false;

  private bool? supportsRemoteHid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsRemoteHid {
    get { return supportsRemoteHid_ ?? SupportsRemoteHidDefaultValue; }
    set {
      supportsRemoteHid_ = value;
    }
  }
  /// <summary>Gets whether the "supports_remote_hid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSupportsRemoteHid {
    get { return supportsRemoteHid_ != null; }
  }
  /// <summary>Clears the value of the "supports_remote_hid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSupportsRemoteHid() {
    supportsRemoteHid_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNegotiationInitMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNegotiationInitMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ReliableData != other.ReliableData) return false;
    if(!supportedAudioCodecs_.Equals(other.supportedAudioCodecs_)) return false;
    if(!supportedVideoCodecs_.Equals(other.supportedVideoCodecs_)) return false;
    if (SupportsRemoteHid != other.SupportsRemoteHid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasReliableData) hash ^= ReliableData.GetHashCode();
    hash ^= supportedAudioCodecs_.GetHashCode();
    hash ^= supportedVideoCodecs_.GetHashCode();
    if (HasSupportsRemoteHid) hash ^= SupportsRemoteHid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasReliableData) {
      output.WriteRawTag(8);
      output.WriteBool(ReliableData);
    }
    supportedAudioCodecs_.WriteTo(output, _repeated_supportedAudioCodecs_codec);
    supportedVideoCodecs_.WriteTo(output, _repeated_supportedVideoCodecs_codec);
    if (HasSupportsRemoteHid) {
      output.WriteRawTag(32);
      output.WriteBool(SupportsRemoteHid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasReliableData) {
      size += 1 + 1;
    }
    size += supportedAudioCodecs_.CalculateSize(_repeated_supportedAudioCodecs_codec);
    size += supportedVideoCodecs_.CalculateSize(_repeated_supportedVideoCodecs_codec);
    if (HasSupportsRemoteHid) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNegotiationInitMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasReliableData) {
      ReliableData = other.ReliableData;
    }
    supportedAudioCodecs_.Add(other.supportedAudioCodecs_);
    supportedVideoCodecs_.Add(other.supportedVideoCodecs_);
    if (other.HasSupportsRemoteHid) {
      SupportsRemoteHid = other.SupportsRemoteHid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ReliableData = input.ReadBool();
          break;
        }
        case 18:
        case 16: {
          supportedAudioCodecs_.AddEntriesFrom(input, _repeated_supportedAudioCodecs_codec);
          break;
        }
        case 26:
        case 24: {
          supportedVideoCodecs_.AddEntriesFrom(input, _repeated_supportedVideoCodecs_codec);
          break;
        }
        case 32: {
          SupportsRemoteHid = input.ReadBool();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CNegotiationSetConfigMsg : pb::IMessage<CNegotiationSetConfigMsg> {
  private static readonly pb::MessageParser<CNegotiationSetConfigMsg> _parser = new pb::MessageParser<CNegotiationSetConfigMsg>(() => new CNegotiationSetConfigMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNegotiationSetConfigMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNegotiationSetConfigMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNegotiationSetConfigMsg(CNegotiationSetConfigMsg other) : this() {
    Config = other.HasConfig ? other.Config.Clone() : null;
    StreamingClientConfig = other.HasStreamingClientConfig ? other.StreamingClientConfig.Clone() : null;
    StreamingClientCaps = other.HasStreamingClientCaps ? other.StreamingClientCaps.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNegotiationSetConfigMsg Clone() {
    return new CNegotiationSetConfigMsg(this);
  }

  /// <summary>Field number for the "config" field.</summary>
  public const int ConfigFieldNumber = 1;
  private global::CNegotiatedConfig config_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CNegotiatedConfig Config {
    get { return config_; }
    set {
      config_ = value;
    }
  }
  /// <summary>Gets whether the config field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasConfig {
    get { return config_ != null; }
  }
  /// <summary>Clears the value of the config field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearConfig() {
    config_ = null;
  }

  /// <summary>Field number for the "streaming_client_config" field.</summary>
  public const int StreamingClientConfigFieldNumber = 2;
  private global::CStreamingClientConfig streamingClientConfig_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CStreamingClientConfig StreamingClientConfig {
    get { return streamingClientConfig_; }
    set {
      streamingClientConfig_ = value;
    }
  }
  /// <summary>Gets whether the streaming_client_config field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStreamingClientConfig {
    get { return streamingClientConfig_ != null; }
  }
  /// <summary>Clears the value of the streaming_client_config field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStreamingClientConfig() {
    streamingClientConfig_ = null;
  }

  /// <summary>Field number for the "streaming_client_caps" field.</summary>
  public const int StreamingClientCapsFieldNumber = 3;
  private global::CStreamingClientCaps streamingClientCaps_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CStreamingClientCaps StreamingClientCaps {
    get { return streamingClientCaps_; }
    set {
      streamingClientCaps_ = value;
    }
  }
  /// <summary>Gets whether the streaming_client_caps field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStreamingClientCaps {
    get { return streamingClientCaps_ != null; }
  }
  /// <summary>Clears the value of the streaming_client_caps field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStreamingClientCaps() {
    streamingClientCaps_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNegotiationSetConfigMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNegotiationSetConfigMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Config, other.Config)) return false;
    if (!object.Equals(StreamingClientConfig, other.StreamingClientConfig)) return false;
    if (!object.Equals(StreamingClientCaps, other.StreamingClientCaps)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasConfig) hash ^= Config.GetHashCode();
    if (HasStreamingClientConfig) hash ^= StreamingClientConfig.GetHashCode();
    if (HasStreamingClientCaps) hash ^= StreamingClientCaps.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasConfig) {
      output.WriteRawTag(10);
      output.WriteMessage(Config);
    }
    if (HasStreamingClientConfig) {
      output.WriteRawTag(18);
      output.WriteMessage(StreamingClientConfig);
    }
    if (HasStreamingClientCaps) {
      output.WriteRawTag(26);
      output.WriteMessage(StreamingClientCaps);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasConfig) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
    }
    if (HasStreamingClientConfig) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StreamingClientConfig);
    }
    if (HasStreamingClientCaps) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StreamingClientCaps);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNegotiationSetConfigMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasConfig) {
      if (!HasConfig) {
        config_ = new global::CNegotiatedConfig();
      }
      Config.MergeFrom(other.Config);
    }
    if (other.HasStreamingClientConfig) {
      if (!HasStreamingClientConfig) {
        streamingClientConfig_ = new global::CStreamingClientConfig();
      }
      StreamingClientConfig.MergeFrom(other.StreamingClientConfig);
    }
    if (other.HasStreamingClientCaps) {
      if (!HasStreamingClientCaps) {
        streamingClientCaps_ = new global::CStreamingClientCaps();
      }
      StreamingClientCaps.MergeFrom(other.StreamingClientCaps);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (!HasConfig) {
            config_ = new global::CNegotiatedConfig();
          }
          input.ReadMessage(config_);
          break;
        }
        case 18: {
          if (!HasStreamingClientConfig) {
            streamingClientConfig_ = new global::CStreamingClientConfig();
          }
          input.ReadMessage(streamingClientConfig_);
          break;
        }
        case 26: {
          if (!HasStreamingClientCaps) {
            streamingClientCaps_ = new global::CStreamingClientCaps();
          }
          input.ReadMessage(streamingClientCaps_);
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (HasConfig) {
      if (!Config.IsInitialized()) return false;
    }
    else {
      return false;
    }
    if (HasStreamingClientConfig) {
      if (!StreamingClientConfig.IsInitialized()) return false;
    }
    if (HasStreamingClientCaps) {
      if (!StreamingClientCaps.IsInitialized()) return false;
    }
    return true;
  }
}

public sealed partial class CNegotiationCompleteMsg : pb::IMessage<CNegotiationCompleteMsg> {
  private static readonly pb::MessageParser<CNegotiationCompleteMsg> _parser = new pb::MessageParser<CNegotiationCompleteMsg>(() => new CNegotiationCompleteMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNegotiationCompleteMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNegotiationCompleteMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNegotiationCompleteMsg(CNegotiationCompleteMsg other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNegotiationCompleteMsg Clone() {
    return new CNegotiationCompleteMsg(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNegotiationCompleteMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNegotiationCompleteMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNegotiationCompleteMsg other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CStartAudioDataMsg : pb::IMessage<CStartAudioDataMsg> {
  private static readonly pb::MessageParser<CStartAudioDataMsg> _parser = new pb::MessageParser<CStartAudioDataMsg>(() => new CStartAudioDataMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CStartAudioDataMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStartAudioDataMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStartAudioDataMsg(CStartAudioDataMsg other) : this() {
    channel_ = other.channel_;
    codec_ = other.codec_;
    codecData_ = other.codecData_;
    frequency_ = other.frequency_;
    channels_ = other.channels_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStartAudioDataMsg Clone() {
    return new CStartAudioDataMsg(this);
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 2;
  /// <summary>Default value for the "channel" field</summary>
  public const uint ChannelDefaultValue = 0;

  private uint? channel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Channel {
    get { return channel_ ?? ChannelDefaultValue; }
    set {
      channel_ = value;
    }
  }
  /// <summary>Gets whether the "channel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasChannel {
    get { return channel_ != null; }
  }
  /// <summary>Clears the value of the "channel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearChannel() {
    channel_ = null;
  }

  /// <summary>Field number for the "codec" field.</summary>
  public const int CodecFieldNumber = 3;
  /// <summary>Default value for the "codec" field</summary>
  public const global::EStreamAudioCodec CodecDefaultValue = global::EStreamAudioCodec.KEstreamAudioCodecNone;

  private global::EStreamAudioCodec? codec_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamAudioCodec Codec {
    get { return codec_ ?? CodecDefaultValue; }
    set {
      codec_ = value;
    }
  }
  /// <summary>Gets whether the "codec" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCodec {
    get { return codec_ != null; }
  }
  /// <summary>Clears the value of the "codec" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCodec() {
    codec_ = null;
  }

  /// <summary>Field number for the "codec_data" field.</summary>
  public const int CodecDataFieldNumber = 4;
  /// <summary>Default value for the "codec_data" field</summary>
  public readonly static pb::ByteString CodecDataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString codecData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CodecData {
    get { return codecData_ ?? CodecDataDefaultValue; }
    set {
      codecData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "codec_data" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCodecData {
    get { return codecData_ != null; }
  }
  /// <summary>Clears the value of the "codec_data" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCodecData() {
    codecData_ = null;
  }

  /// <summary>Field number for the "frequency" field.</summary>
  public const int FrequencyFieldNumber = 5;
  /// <summary>Default value for the "frequency" field</summary>
  public const uint FrequencyDefaultValue = 0;

  private uint? frequency_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Frequency {
    get { return frequency_ ?? FrequencyDefaultValue; }
    set {
      frequency_ = value;
    }
  }
  /// <summary>Gets whether the "frequency" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFrequency {
    get { return frequency_ != null; }
  }
  /// <summary>Clears the value of the "frequency" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFrequency() {
    frequency_ = null;
  }

  /// <summary>Field number for the "channels" field.</summary>
  public const int ChannelsFieldNumber = 6;
  /// <summary>Default value for the "channels" field</summary>
  public const uint ChannelsDefaultValue = 0;

  private uint? channels_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Channels {
    get { return channels_ ?? ChannelsDefaultValue; }
    set {
      channels_ = value;
    }
  }
  /// <summary>Gets whether the "channels" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasChannels {
    get { return channels_ != null; }
  }
  /// <summary>Clears the value of the "channels" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearChannels() {
    channels_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CStartAudioDataMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CStartAudioDataMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Channel != other.Channel) return false;
    if (Codec != other.Codec) return false;
    if (CodecData != other.CodecData) return false;
    if (Frequency != other.Frequency) return false;
    if (Channels != other.Channels) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasChannel) hash ^= Channel.GetHashCode();
    if (HasCodec) hash ^= Codec.GetHashCode();
    if (HasCodecData) hash ^= CodecData.GetHashCode();
    if (HasFrequency) hash ^= Frequency.GetHashCode();
    if (HasChannels) hash ^= Channels.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasChannel) {
      output.WriteRawTag(16);
      output.WriteUInt32(Channel);
    }
    if (HasCodec) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Codec);
    }
    if (HasCodecData) {
      output.WriteRawTag(34);
      output.WriteBytes(CodecData);
    }
    if (HasFrequency) {
      output.WriteRawTag(40);
      output.WriteUInt32(Frequency);
    }
    if (HasChannels) {
      output.WriteRawTag(48);
      output.WriteUInt32(Channels);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasChannel) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
    }
    if (HasCodec) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Codec);
    }
    if (HasCodecData) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CodecData);
    }
    if (HasFrequency) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frequency);
    }
    if (HasChannels) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channels);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CStartAudioDataMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasChannel) {
      Channel = other.Channel;
    }
    if (other.HasCodec) {
      Codec = other.Codec;
    }
    if (other.HasCodecData) {
      CodecData = other.CodecData;
    }
    if (other.HasFrequency) {
      Frequency = other.Frequency;
    }
    if (other.HasChannels) {
      Channels = other.Channels;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 16: {
          Channel = input.ReadUInt32();
          break;
        }
        case 24: {
          codec_ = (global::EStreamAudioCodec) input.ReadEnum();
          break;
        }
        case 34: {
          CodecData = input.ReadBytes();
          break;
        }
        case 40: {
          Frequency = input.ReadUInt32();
          break;
        }
        case 48: {
          Channels = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasChannel) {
      return false;
    }
    return true;
  }
}

public sealed partial class CStopAudioDataMsg : pb::IMessage<CStopAudioDataMsg> {
  private static readonly pb::MessageParser<CStopAudioDataMsg> _parser = new pb::MessageParser<CStopAudioDataMsg>(() => new CStopAudioDataMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CStopAudioDataMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStopAudioDataMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStopAudioDataMsg(CStopAudioDataMsg other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStopAudioDataMsg Clone() {
    return new CStopAudioDataMsg(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CStopAudioDataMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CStopAudioDataMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CStopAudioDataMsg other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CStartVideoDataMsg : pb::IMessage<CStartVideoDataMsg> {
  private static readonly pb::MessageParser<CStartVideoDataMsg> _parser = new pb::MessageParser<CStartVideoDataMsg>(() => new CStartVideoDataMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CStartVideoDataMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStartVideoDataMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStartVideoDataMsg(CStartVideoDataMsg other) : this() {
    channel_ = other.channel_;
    codec_ = other.codec_;
    codecData_ = other.codecData_;
    width_ = other.width_;
    height_ = other.height_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStartVideoDataMsg Clone() {
    return new CStartVideoDataMsg(this);
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 1;
  /// <summary>Default value for the "channel" field</summary>
  public const uint ChannelDefaultValue = 0;

  private uint? channel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Channel {
    get { return channel_ ?? ChannelDefaultValue; }
    set {
      channel_ = value;
    }
  }
  /// <summary>Gets whether the "channel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasChannel {
    get { return channel_ != null; }
  }
  /// <summary>Clears the value of the "channel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearChannel() {
    channel_ = null;
  }

  /// <summary>Field number for the "codec" field.</summary>
  public const int CodecFieldNumber = 2;
  /// <summary>Default value for the "codec" field</summary>
  public const global::EStreamVideoCodec CodecDefaultValue = global::EStreamVideoCodec.KEstreamVideoCodecNone;

  private global::EStreamVideoCodec? codec_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamVideoCodec Codec {
    get { return codec_ ?? CodecDefaultValue; }
    set {
      codec_ = value;
    }
  }
  /// <summary>Gets whether the "codec" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCodec {
    get { return codec_ != null; }
  }
  /// <summary>Clears the value of the "codec" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCodec() {
    codec_ = null;
  }

  /// <summary>Field number for the "codec_data" field.</summary>
  public const int CodecDataFieldNumber = 3;
  /// <summary>Default value for the "codec_data" field</summary>
  public readonly static pb::ByteString CodecDataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString codecData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CodecData {
    get { return codecData_ ?? CodecDataDefaultValue; }
    set {
      codecData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "codec_data" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCodecData {
    get { return codecData_ != null; }
  }
  /// <summary>Clears the value of the "codec_data" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCodecData() {
    codecData_ = null;
  }

  /// <summary>Field number for the "width" field.</summary>
  public const int WidthFieldNumber = 4;
  /// <summary>Default value for the "width" field</summary>
  public const uint WidthDefaultValue = 0;

  private uint? width_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Width {
    get { return width_ ?? WidthDefaultValue; }
    set {
      width_ = value;
    }
  }
  /// <summary>Gets whether the "width" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWidth {
    get { return width_ != null; }
  }
  /// <summary>Clears the value of the "width" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWidth() {
    width_ = null;
  }

  /// <summary>Field number for the "height" field.</summary>
  public const int HeightFieldNumber = 5;
  /// <summary>Default value for the "height" field</summary>
  public const uint HeightDefaultValue = 0;

  private uint? height_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Height {
    get { return height_ ?? HeightDefaultValue; }
    set {
      height_ = value;
    }
  }
  /// <summary>Gets whether the "height" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHeight {
    get { return height_ != null; }
  }
  /// <summary>Clears the value of the "height" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHeight() {
    height_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CStartVideoDataMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CStartVideoDataMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Channel != other.Channel) return false;
    if (Codec != other.Codec) return false;
    if (CodecData != other.CodecData) return false;
    if (Width != other.Width) return false;
    if (Height != other.Height) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasChannel) hash ^= Channel.GetHashCode();
    if (HasCodec) hash ^= Codec.GetHashCode();
    if (HasCodecData) hash ^= CodecData.GetHashCode();
    if (HasWidth) hash ^= Width.GetHashCode();
    if (HasHeight) hash ^= Height.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasChannel) {
      output.WriteRawTag(8);
      output.WriteUInt32(Channel);
    }
    if (HasCodec) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Codec);
    }
    if (HasCodecData) {
      output.WriteRawTag(26);
      output.WriteBytes(CodecData);
    }
    if (HasWidth) {
      output.WriteRawTag(32);
      output.WriteUInt32(Width);
    }
    if (HasHeight) {
      output.WriteRawTag(40);
      output.WriteUInt32(Height);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasChannel) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
    }
    if (HasCodec) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Codec);
    }
    if (HasCodecData) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CodecData);
    }
    if (HasWidth) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
    }
    if (HasHeight) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CStartVideoDataMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasChannel) {
      Channel = other.Channel;
    }
    if (other.HasCodec) {
      Codec = other.Codec;
    }
    if (other.HasCodecData) {
      CodecData = other.CodecData;
    }
    if (other.HasWidth) {
      Width = other.Width;
    }
    if (other.HasHeight) {
      Height = other.Height;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Channel = input.ReadUInt32();
          break;
        }
        case 16: {
          codec_ = (global::EStreamVideoCodec) input.ReadEnum();
          break;
        }
        case 26: {
          CodecData = input.ReadBytes();
          break;
        }
        case 32: {
          Width = input.ReadUInt32();
          break;
        }
        case 40: {
          Height = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasChannel) {
      return false;
    }
    return true;
  }
}

public sealed partial class CStopVideoDataMsg : pb::IMessage<CStopVideoDataMsg> {
  private static readonly pb::MessageParser<CStopVideoDataMsg> _parser = new pb::MessageParser<CStopVideoDataMsg>(() => new CStopVideoDataMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CStopVideoDataMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStopVideoDataMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStopVideoDataMsg(CStopVideoDataMsg other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStopVideoDataMsg Clone() {
    return new CStopVideoDataMsg(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CStopVideoDataMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CStopVideoDataMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CStopVideoDataMsg other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CInputLatencyTestMsg : pb::IMessage<CInputLatencyTestMsg> {
  private static readonly pb::MessageParser<CInputLatencyTestMsg> _parser = new pb::MessageParser<CInputLatencyTestMsg>(() => new CInputLatencyTestMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CInputLatencyTestMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputLatencyTestMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputLatencyTestMsg(CInputLatencyTestMsg other) : this() {
    inputMark_ = other.inputMark_;
    color_ = other.color_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputLatencyTestMsg Clone() {
    return new CInputLatencyTestMsg(this);
  }

  /// <summary>Field number for the "input_mark" field.</summary>
  public const int InputMarkFieldNumber = 1;
  /// <summary>Default value for the "input_mark" field</summary>
  public const uint InputMarkDefaultValue = 0;

  private uint? inputMark_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InputMark {
    get { return inputMark_ ?? InputMarkDefaultValue; }
    set {
      inputMark_ = value;
    }
  }
  /// <summary>Gets whether the "input_mark" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInputMark {
    get { return inputMark_ != null; }
  }
  /// <summary>Clears the value of the "input_mark" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInputMark() {
    inputMark_ = null;
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 2;
  /// <summary>Default value for the "color" field</summary>
  public const uint ColorDefaultValue = 0;

  private uint? color_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Color {
    get { return color_ ?? ColorDefaultValue; }
    set {
      color_ = value;
    }
  }
  /// <summary>Gets whether the "color" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasColor {
    get { return color_ != null; }
  }
  /// <summary>Clears the value of the "color" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearColor() {
    color_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CInputLatencyTestMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CInputLatencyTestMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (InputMark != other.InputMark) return false;
    if (Color != other.Color) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInputMark) hash ^= InputMark.GetHashCode();
    if (HasColor) hash ^= Color.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasInputMark) {
      output.WriteRawTag(8);
      output.WriteUInt32(InputMark);
    }
    if (HasColor) {
      output.WriteRawTag(16);
      output.WriteUInt32(Color);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInputMark) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputMark);
    }
    if (HasColor) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CInputLatencyTestMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasInputMark) {
      InputMark = other.InputMark;
    }
    if (other.HasColor) {
      Color = other.Color;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          InputMark = input.ReadUInt32();
          break;
        }
        case 16: {
          Color = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasInputMark) {
      return false;
    }
    return true;
  }
}

public sealed partial class CInputMouseMotionMsg : pb::IMessage<CInputMouseMotionMsg> {
  private static readonly pb::MessageParser<CInputMouseMotionMsg> _parser = new pb::MessageParser<CInputMouseMotionMsg>(() => new CInputMouseMotionMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CInputMouseMotionMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputMouseMotionMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputMouseMotionMsg(CInputMouseMotionMsg other) : this() {
    inputMark_ = other.inputMark_;
    xNormalized_ = other.xNormalized_;
    yNormalized_ = other.yNormalized_;
    dx_ = other.dx_;
    dy_ = other.dy_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputMouseMotionMsg Clone() {
    return new CInputMouseMotionMsg(this);
  }

  /// <summary>Field number for the "input_mark" field.</summary>
  public const int InputMarkFieldNumber = 1;
  /// <summary>Default value for the "input_mark" field</summary>
  public const uint InputMarkDefaultValue = 0;

  private uint? inputMark_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InputMark {
    get { return inputMark_ ?? InputMarkDefaultValue; }
    set {
      inputMark_ = value;
    }
  }
  /// <summary>Gets whether the "input_mark" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInputMark {
    get { return inputMark_ != null; }
  }
  /// <summary>Clears the value of the "input_mark" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInputMark() {
    inputMark_ = null;
  }

  /// <summary>Field number for the "x_normalized" field.</summary>
  public const int XNormalizedFieldNumber = 2;
  /// <summary>Default value for the "x_normalized" field</summary>
  public const float XNormalizedDefaultValue = 0F;

  private float? xNormalized_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float XNormalized {
    get { return xNormalized_ ?? XNormalizedDefaultValue; }
    set {
      xNormalized_ = value;
    }
  }
  /// <summary>Gets whether the "x_normalized" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasXNormalized {
    get { return xNormalized_ != null; }
  }
  /// <summary>Clears the value of the "x_normalized" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearXNormalized() {
    xNormalized_ = null;
  }

  /// <summary>Field number for the "y_normalized" field.</summary>
  public const int YNormalizedFieldNumber = 3;
  /// <summary>Default value for the "y_normalized" field</summary>
  public const float YNormalizedDefaultValue = 0F;

  private float? yNormalized_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float YNormalized {
    get { return yNormalized_ ?? YNormalizedDefaultValue; }
    set {
      yNormalized_ = value;
    }
  }
  /// <summary>Gets whether the "y_normalized" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasYNormalized {
    get { return yNormalized_ != null; }
  }
  /// <summary>Clears the value of the "y_normalized" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearYNormalized() {
    yNormalized_ = null;
  }

  /// <summary>Field number for the "dx" field.</summary>
  public const int DxFieldNumber = 4;
  /// <summary>Default value for the "dx" field</summary>
  public const int DxDefaultValue = 0;

  private int? dx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Dx {
    get { return dx_ ?? DxDefaultValue; }
    set {
      dx_ = value;
    }
  }
  /// <summary>Gets whether the "dx" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDx {
    get { return dx_ != null; }
  }
  /// <summary>Clears the value of the "dx" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDx() {
    dx_ = null;
  }

  /// <summary>Field number for the "dy" field.</summary>
  public const int DyFieldNumber = 5;
  /// <summary>Default value for the "dy" field</summary>
  public const int DyDefaultValue = 0;

  private int? dy_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Dy {
    get { return dy_ ?? DyDefaultValue; }
    set {
      dy_ = value;
    }
  }
  /// <summary>Gets whether the "dy" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDy {
    get { return dy_ != null; }
  }
  /// <summary>Clears the value of the "dy" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDy() {
    dy_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CInputMouseMotionMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CInputMouseMotionMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (InputMark != other.InputMark) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XNormalized, other.XNormalized)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YNormalized, other.YNormalized)) return false;
    if (Dx != other.Dx) return false;
    if (Dy != other.Dy) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInputMark) hash ^= InputMark.GetHashCode();
    if (HasXNormalized) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XNormalized);
    if (HasYNormalized) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YNormalized);
    if (HasDx) hash ^= Dx.GetHashCode();
    if (HasDy) hash ^= Dy.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasInputMark) {
      output.WriteRawTag(8);
      output.WriteUInt32(InputMark);
    }
    if (HasXNormalized) {
      output.WriteRawTag(21);
      output.WriteFloat(XNormalized);
    }
    if (HasYNormalized) {
      output.WriteRawTag(29);
      output.WriteFloat(YNormalized);
    }
    if (HasDx) {
      output.WriteRawTag(32);
      output.WriteInt32(Dx);
    }
    if (HasDy) {
      output.WriteRawTag(40);
      output.WriteInt32(Dy);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInputMark) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputMark);
    }
    if (HasXNormalized) {
      size += 1 + 4;
    }
    if (HasYNormalized) {
      size += 1 + 4;
    }
    if (HasDx) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dx);
    }
    if (HasDy) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dy);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CInputMouseMotionMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasInputMark) {
      InputMark = other.InputMark;
    }
    if (other.HasXNormalized) {
      XNormalized = other.XNormalized;
    }
    if (other.HasYNormalized) {
      YNormalized = other.YNormalized;
    }
    if (other.HasDx) {
      Dx = other.Dx;
    }
    if (other.HasDy) {
      Dy = other.Dy;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          InputMark = input.ReadUInt32();
          break;
        }
        case 21: {
          XNormalized = input.ReadFloat();
          break;
        }
        case 29: {
          YNormalized = input.ReadFloat();
          break;
        }
        case 32: {
          Dx = input.ReadInt32();
          break;
        }
        case 40: {
          Dy = input.ReadInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CInputMouseWheelMsg : pb::IMessage<CInputMouseWheelMsg> {
  private static readonly pb::MessageParser<CInputMouseWheelMsg> _parser = new pb::MessageParser<CInputMouseWheelMsg>(() => new CInputMouseWheelMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CInputMouseWheelMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputMouseWheelMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputMouseWheelMsg(CInputMouseWheelMsg other) : this() {
    inputMark_ = other.inputMark_;
    direction_ = other.direction_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputMouseWheelMsg Clone() {
    return new CInputMouseWheelMsg(this);
  }

  /// <summary>Field number for the "input_mark" field.</summary>
  public const int InputMarkFieldNumber = 1;
  /// <summary>Default value for the "input_mark" field</summary>
  public const uint InputMarkDefaultValue = 0;

  private uint? inputMark_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InputMark {
    get { return inputMark_ ?? InputMarkDefaultValue; }
    set {
      inputMark_ = value;
    }
  }
  /// <summary>Gets whether the "input_mark" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInputMark {
    get { return inputMark_ != null; }
  }
  /// <summary>Clears the value of the "input_mark" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInputMark() {
    inputMark_ = null;
  }

  /// <summary>Field number for the "direction" field.</summary>
  public const int DirectionFieldNumber = 2;
  /// <summary>Default value for the "direction" field</summary>
  public const global::EStreamMouseWheelDirection DirectionDefaultValue = global::EStreamMouseWheelDirection.KEstreamMouseWheelUp;

  private global::EStreamMouseWheelDirection? direction_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamMouseWheelDirection Direction {
    get { return direction_ ?? DirectionDefaultValue; }
    set {
      direction_ = value;
    }
  }
  /// <summary>Gets whether the "direction" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDirection {
    get { return direction_ != null; }
  }
  /// <summary>Clears the value of the "direction" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDirection() {
    direction_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CInputMouseWheelMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CInputMouseWheelMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (InputMark != other.InputMark) return false;
    if (Direction != other.Direction) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInputMark) hash ^= InputMark.GetHashCode();
    if (HasDirection) hash ^= Direction.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasInputMark) {
      output.WriteRawTag(8);
      output.WriteUInt32(InputMark);
    }
    if (HasDirection) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Direction);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInputMark) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputMark);
    }
    if (HasDirection) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CInputMouseWheelMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasInputMark) {
      InputMark = other.InputMark;
    }
    if (other.HasDirection) {
      Direction = other.Direction;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          InputMark = input.ReadUInt32();
          break;
        }
        case 16: {
          direction_ = (global::EStreamMouseWheelDirection) input.ReadEnum();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasDirection) {
      return false;
    }
    return true;
  }
}

public sealed partial class CInputMouseDownMsg : pb::IMessage<CInputMouseDownMsg> {
  private static readonly pb::MessageParser<CInputMouseDownMsg> _parser = new pb::MessageParser<CInputMouseDownMsg>(() => new CInputMouseDownMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CInputMouseDownMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputMouseDownMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputMouseDownMsg(CInputMouseDownMsg other) : this() {
    inputMark_ = other.inputMark_;
    button_ = other.button_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputMouseDownMsg Clone() {
    return new CInputMouseDownMsg(this);
  }

  /// <summary>Field number for the "input_mark" field.</summary>
  public const int InputMarkFieldNumber = 1;
  /// <summary>Default value for the "input_mark" field</summary>
  public const uint InputMarkDefaultValue = 0;

  private uint? inputMark_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InputMark {
    get { return inputMark_ ?? InputMarkDefaultValue; }
    set {
      inputMark_ = value;
    }
  }
  /// <summary>Gets whether the "input_mark" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInputMark {
    get { return inputMark_ != null; }
  }
  /// <summary>Clears the value of the "input_mark" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInputMark() {
    inputMark_ = null;
  }

  /// <summary>Field number for the "button" field.</summary>
  public const int ButtonFieldNumber = 2;
  /// <summary>Default value for the "button" field</summary>
  public const global::EStreamMouseButton ButtonDefaultValue = global::EStreamMouseButton.KEstreamMouseButtonLeft;

  private global::EStreamMouseButton? button_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamMouseButton Button {
    get { return button_ ?? ButtonDefaultValue; }
    set {
      button_ = value;
    }
  }
  /// <summary>Gets whether the "button" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasButton {
    get { return button_ != null; }
  }
  /// <summary>Clears the value of the "button" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearButton() {
    button_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CInputMouseDownMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CInputMouseDownMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (InputMark != other.InputMark) return false;
    if (Button != other.Button) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInputMark) hash ^= InputMark.GetHashCode();
    if (HasButton) hash ^= Button.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasInputMark) {
      output.WriteRawTag(8);
      output.WriteUInt32(InputMark);
    }
    if (HasButton) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Button);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInputMark) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputMark);
    }
    if (HasButton) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Button);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CInputMouseDownMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasInputMark) {
      InputMark = other.InputMark;
    }
    if (other.HasButton) {
      Button = other.Button;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          InputMark = input.ReadUInt32();
          break;
        }
        case 16: {
          button_ = (global::EStreamMouseButton) input.ReadEnum();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasButton) {
      return false;
    }
    return true;
  }
}

public sealed partial class CInputMouseUpMsg : pb::IMessage<CInputMouseUpMsg> {
  private static readonly pb::MessageParser<CInputMouseUpMsg> _parser = new pb::MessageParser<CInputMouseUpMsg>(() => new CInputMouseUpMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CInputMouseUpMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputMouseUpMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputMouseUpMsg(CInputMouseUpMsg other) : this() {
    inputMark_ = other.inputMark_;
    button_ = other.button_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputMouseUpMsg Clone() {
    return new CInputMouseUpMsg(this);
  }

  /// <summary>Field number for the "input_mark" field.</summary>
  public const int InputMarkFieldNumber = 1;
  /// <summary>Default value for the "input_mark" field</summary>
  public const uint InputMarkDefaultValue = 0;

  private uint? inputMark_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InputMark {
    get { return inputMark_ ?? InputMarkDefaultValue; }
    set {
      inputMark_ = value;
    }
  }
  /// <summary>Gets whether the "input_mark" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInputMark {
    get { return inputMark_ != null; }
  }
  /// <summary>Clears the value of the "input_mark" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInputMark() {
    inputMark_ = null;
  }

  /// <summary>Field number for the "button" field.</summary>
  public const int ButtonFieldNumber = 2;
  /// <summary>Default value for the "button" field</summary>
  public const global::EStreamMouseButton ButtonDefaultValue = global::EStreamMouseButton.KEstreamMouseButtonLeft;

  private global::EStreamMouseButton? button_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamMouseButton Button {
    get { return button_ ?? ButtonDefaultValue; }
    set {
      button_ = value;
    }
  }
  /// <summary>Gets whether the "button" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasButton {
    get { return button_ != null; }
  }
  /// <summary>Clears the value of the "button" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearButton() {
    button_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CInputMouseUpMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CInputMouseUpMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (InputMark != other.InputMark) return false;
    if (Button != other.Button) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInputMark) hash ^= InputMark.GetHashCode();
    if (HasButton) hash ^= Button.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasInputMark) {
      output.WriteRawTag(8);
      output.WriteUInt32(InputMark);
    }
    if (HasButton) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Button);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInputMark) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputMark);
    }
    if (HasButton) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Button);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CInputMouseUpMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasInputMark) {
      InputMark = other.InputMark;
    }
    if (other.HasButton) {
      Button = other.Button;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          InputMark = input.ReadUInt32();
          break;
        }
        case 16: {
          button_ = (global::EStreamMouseButton) input.ReadEnum();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasButton) {
      return false;
    }
    return true;
  }
}

public sealed partial class CInputKeyDownMsg : pb::IMessage<CInputKeyDownMsg> {
  private static readonly pb::MessageParser<CInputKeyDownMsg> _parser = new pb::MessageParser<CInputKeyDownMsg>(() => new CInputKeyDownMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CInputKeyDownMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputKeyDownMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputKeyDownMsg(CInputKeyDownMsg other) : this() {
    inputMark_ = other.inputMark_;
    scancode_ = other.scancode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputKeyDownMsg Clone() {
    return new CInputKeyDownMsg(this);
  }

  /// <summary>Field number for the "input_mark" field.</summary>
  public const int InputMarkFieldNumber = 1;
  /// <summary>Default value for the "input_mark" field</summary>
  public const uint InputMarkDefaultValue = 0;

  private uint? inputMark_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InputMark {
    get { return inputMark_ ?? InputMarkDefaultValue; }
    set {
      inputMark_ = value;
    }
  }
  /// <summary>Gets whether the "input_mark" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInputMark {
    get { return inputMark_ != null; }
  }
  /// <summary>Clears the value of the "input_mark" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInputMark() {
    inputMark_ = null;
  }

  /// <summary>Field number for the "scancode" field.</summary>
  public const int ScancodeFieldNumber = 2;
  /// <summary>Default value for the "scancode" field</summary>
  public const uint ScancodeDefaultValue = 0;

  private uint? scancode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Scancode {
    get { return scancode_ ?? ScancodeDefaultValue; }
    set {
      scancode_ = value;
    }
  }
  /// <summary>Gets whether the "scancode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasScancode {
    get { return scancode_ != null; }
  }
  /// <summary>Clears the value of the "scancode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearScancode() {
    scancode_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CInputKeyDownMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CInputKeyDownMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (InputMark != other.InputMark) return false;
    if (Scancode != other.Scancode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInputMark) hash ^= InputMark.GetHashCode();
    if (HasScancode) hash ^= Scancode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasInputMark) {
      output.WriteRawTag(8);
      output.WriteUInt32(InputMark);
    }
    if (HasScancode) {
      output.WriteRawTag(16);
      output.WriteUInt32(Scancode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInputMark) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputMark);
    }
    if (HasScancode) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Scancode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CInputKeyDownMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasInputMark) {
      InputMark = other.InputMark;
    }
    if (other.HasScancode) {
      Scancode = other.Scancode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          InputMark = input.ReadUInt32();
          break;
        }
        case 16: {
          Scancode = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasScancode) {
      return false;
    }
    return true;
  }
}

public sealed partial class CInputKeyUpMsg : pb::IMessage<CInputKeyUpMsg> {
  private static readonly pb::MessageParser<CInputKeyUpMsg> _parser = new pb::MessageParser<CInputKeyUpMsg>(() => new CInputKeyUpMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CInputKeyUpMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputKeyUpMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputKeyUpMsg(CInputKeyUpMsg other) : this() {
    inputMark_ = other.inputMark_;
    scancode_ = other.scancode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputKeyUpMsg Clone() {
    return new CInputKeyUpMsg(this);
  }

  /// <summary>Field number for the "input_mark" field.</summary>
  public const int InputMarkFieldNumber = 1;
  /// <summary>Default value for the "input_mark" field</summary>
  public const uint InputMarkDefaultValue = 0;

  private uint? inputMark_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InputMark {
    get { return inputMark_ ?? InputMarkDefaultValue; }
    set {
      inputMark_ = value;
    }
  }
  /// <summary>Gets whether the "input_mark" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInputMark {
    get { return inputMark_ != null; }
  }
  /// <summary>Clears the value of the "input_mark" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInputMark() {
    inputMark_ = null;
  }

  /// <summary>Field number for the "scancode" field.</summary>
  public const int ScancodeFieldNumber = 2;
  /// <summary>Default value for the "scancode" field</summary>
  public const uint ScancodeDefaultValue = 0;

  private uint? scancode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Scancode {
    get { return scancode_ ?? ScancodeDefaultValue; }
    set {
      scancode_ = value;
    }
  }
  /// <summary>Gets whether the "scancode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasScancode {
    get { return scancode_ != null; }
  }
  /// <summary>Clears the value of the "scancode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearScancode() {
    scancode_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CInputKeyUpMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CInputKeyUpMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (InputMark != other.InputMark) return false;
    if (Scancode != other.Scancode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInputMark) hash ^= InputMark.GetHashCode();
    if (HasScancode) hash ^= Scancode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasInputMark) {
      output.WriteRawTag(8);
      output.WriteUInt32(InputMark);
    }
    if (HasScancode) {
      output.WriteRawTag(16);
      output.WriteUInt32(Scancode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInputMark) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputMark);
    }
    if (HasScancode) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Scancode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CInputKeyUpMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasInputMark) {
      InputMark = other.InputMark;
    }
    if (other.HasScancode) {
      Scancode = other.Scancode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          InputMark = input.ReadUInt32();
          break;
        }
        case 16: {
          Scancode = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasScancode) {
      return false;
    }
    return true;
  }
}

public sealed partial class CInputTextMsg : pb::IMessage<CInputTextMsg> {
  private static readonly pb::MessageParser<CInputTextMsg> _parser = new pb::MessageParser<CInputTextMsg>(() => new CInputTextMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CInputTextMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputTextMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputTextMsg(CInputTextMsg other) : this() {
    inputMark_ = other.inputMark_;
    textUtf8_ = other.textUtf8_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CInputTextMsg Clone() {
    return new CInputTextMsg(this);
  }

  /// <summary>Field number for the "input_mark" field.</summary>
  public const int InputMarkFieldNumber = 1;
  /// <summary>Default value for the "input_mark" field</summary>
  public const uint InputMarkDefaultValue = 0;

  private uint? inputMark_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InputMark {
    get { return inputMark_ ?? InputMarkDefaultValue; }
    set {
      inputMark_ = value;
    }
  }
  /// <summary>Gets whether the "input_mark" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInputMark {
    get { return inputMark_ != null; }
  }
  /// <summary>Clears the value of the "input_mark" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInputMark() {
    inputMark_ = null;
  }

  /// <summary>Field number for the "text_utf8" field.</summary>
  public const int TextUtf8FieldNumber = 2;
  /// <summary>Default value for the "text_utf8" field</summary>
  public const string TextUtf8DefaultValue = "";

  private string textUtf8_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TextUtf8 {
    get { return textUtf8_ ?? TextUtf8DefaultValue; }
    set {
      textUtf8_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "text_utf8" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTextUtf8 {
    get { return textUtf8_ != null; }
  }
  /// <summary>Clears the value of the "text_utf8" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTextUtf8() {
    textUtf8_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CInputTextMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CInputTextMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (InputMark != other.InputMark) return false;
    if (TextUtf8 != other.TextUtf8) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInputMark) hash ^= InputMark.GetHashCode();
    if (HasTextUtf8) hash ^= TextUtf8.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasInputMark) {
      output.WriteRawTag(8);
      output.WriteUInt32(InputMark);
    }
    if (HasTextUtf8) {
      output.WriteRawTag(18);
      output.WriteString(TextUtf8);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInputMark) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputMark);
    }
    if (HasTextUtf8) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TextUtf8);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CInputTextMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasInputMark) {
      InputMark = other.InputMark;
    }
    if (other.HasTextUtf8) {
      TextUtf8 = other.TextUtf8;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          InputMark = input.ReadUInt32();
          break;
        }
        case 18: {
          TextUtf8 = input.ReadString();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasTextUtf8) {
      return false;
    }
    return true;
  }
}

public sealed partial class CSetTitleMsg : pb::IMessage<CSetTitleMsg> {
  private static readonly pb::MessageParser<CSetTitleMsg> _parser = new pb::MessageParser<CSetTitleMsg>(() => new CSetTitleMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSetTitleMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTitleMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTitleMsg(CSetTitleMsg other) : this() {
    text_ = other.text_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTitleMsg Clone() {
    return new CSetTitleMsg(this);
  }

  /// <summary>Field number for the "text" field.</summary>
  public const int TextFieldNumber = 1;
  /// <summary>Default value for the "text" field</summary>
  public const string TextDefaultValue = "";

  private string text_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Text {
    get { return text_ ?? TextDefaultValue; }
    set {
      text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "text" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasText {
    get { return text_ != null; }
  }
  /// <summary>Clears the value of the "text" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearText() {
    text_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSetTitleMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSetTitleMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Text != other.Text) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasText) hash ^= Text.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasText) {
      output.WriteRawTag(10);
      output.WriteString(Text);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasText) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSetTitleMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasText) {
      Text = other.Text;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Text = input.ReadString();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CSetIconMsg : pb::IMessage<CSetIconMsg> {
  private static readonly pb::MessageParser<CSetIconMsg> _parser = new pb::MessageParser<CSetIconMsg>(() => new CSetIconMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSetIconMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetIconMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetIconMsg(CSetIconMsg other) : this() {
    width_ = other.width_;
    height_ = other.height_;
    image_ = other.image_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetIconMsg Clone() {
    return new CSetIconMsg(this);
  }

  /// <summary>Field number for the "width" field.</summary>
  public const int WidthFieldNumber = 1;
  /// <summary>Default value for the "width" field</summary>
  public const int WidthDefaultValue = 0;

  private int? width_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Width {
    get { return width_ ?? WidthDefaultValue; }
    set {
      width_ = value;
    }
  }
  /// <summary>Gets whether the "width" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWidth {
    get { return width_ != null; }
  }
  /// <summary>Clears the value of the "width" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWidth() {
    width_ = null;
  }

  /// <summary>Field number for the "height" field.</summary>
  public const int HeightFieldNumber = 2;
  /// <summary>Default value for the "height" field</summary>
  public const int HeightDefaultValue = 0;

  private int? height_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Height {
    get { return height_ ?? HeightDefaultValue; }
    set {
      height_ = value;
    }
  }
  /// <summary>Gets whether the "height" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHeight {
    get { return height_ != null; }
  }
  /// <summary>Clears the value of the "height" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHeight() {
    height_ = null;
  }

  /// <summary>Field number for the "image" field.</summary>
  public const int ImageFieldNumber = 3;
  /// <summary>Default value for the "image" field</summary>
  public readonly static pb::ByteString ImageDefaultValue = pb::ByteString.Empty;

  private pb::ByteString image_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Image {
    get { return image_ ?? ImageDefaultValue; }
    set {
      image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "image" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasImage {
    get { return image_ != null; }
  }
  /// <summary>Clears the value of the "image" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearImage() {
    image_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSetIconMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSetIconMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Width != other.Width) return false;
    if (Height != other.Height) return false;
    if (Image != other.Image) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasWidth) hash ^= Width.GetHashCode();
    if (HasHeight) hash ^= Height.GetHashCode();
    if (HasImage) hash ^= Image.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasWidth) {
      output.WriteRawTag(8);
      output.WriteInt32(Width);
    }
    if (HasHeight) {
      output.WriteRawTag(16);
      output.WriteInt32(Height);
    }
    if (HasImage) {
      output.WriteRawTag(26);
      output.WriteBytes(Image);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasWidth) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
    }
    if (HasHeight) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
    }
    if (HasImage) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSetIconMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasWidth) {
      Width = other.Width;
    }
    if (other.HasHeight) {
      Height = other.Height;
    }
    if (other.HasImage) {
      Image = other.Image;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Width = input.ReadInt32();
          break;
        }
        case 16: {
          Height = input.ReadInt32();
          break;
        }
        case 26: {
          Image = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CShowCursorMsg : pb::IMessage<CShowCursorMsg> {
  private static readonly pb::MessageParser<CShowCursorMsg> _parser = new pb::MessageParser<CShowCursorMsg>(() => new CShowCursorMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CShowCursorMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CShowCursorMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CShowCursorMsg(CShowCursorMsg other) : this() {
    xNormalized_ = other.xNormalized_;
    yNormalized_ = other.yNormalized_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CShowCursorMsg Clone() {
    return new CShowCursorMsg(this);
  }

  /// <summary>Field number for the "x_normalized" field.</summary>
  public const int XNormalizedFieldNumber = 1;
  /// <summary>Default value for the "x_normalized" field</summary>
  public const float XNormalizedDefaultValue = 0F;

  private float? xNormalized_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float XNormalized {
    get { return xNormalized_ ?? XNormalizedDefaultValue; }
    set {
      xNormalized_ = value;
    }
  }
  /// <summary>Gets whether the "x_normalized" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasXNormalized {
    get { return xNormalized_ != null; }
  }
  /// <summary>Clears the value of the "x_normalized" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearXNormalized() {
    xNormalized_ = null;
  }

  /// <summary>Field number for the "y_normalized" field.</summary>
  public const int YNormalizedFieldNumber = 2;
  /// <summary>Default value for the "y_normalized" field</summary>
  public const float YNormalizedDefaultValue = 0F;

  private float? yNormalized_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float YNormalized {
    get { return yNormalized_ ?? YNormalizedDefaultValue; }
    set {
      yNormalized_ = value;
    }
  }
  /// <summary>Gets whether the "y_normalized" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasYNormalized {
    get { return yNormalized_ != null; }
  }
  /// <summary>Clears the value of the "y_normalized" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearYNormalized() {
    yNormalized_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CShowCursorMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CShowCursorMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XNormalized, other.XNormalized)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YNormalized, other.YNormalized)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasXNormalized) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XNormalized);
    if (HasYNormalized) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YNormalized);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasXNormalized) {
      output.WriteRawTag(13);
      output.WriteFloat(XNormalized);
    }
    if (HasYNormalized) {
      output.WriteRawTag(21);
      output.WriteFloat(YNormalized);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasXNormalized) {
      size += 1 + 4;
    }
    if (HasYNormalized) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CShowCursorMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasXNormalized) {
      XNormalized = other.XNormalized;
    }
    if (other.HasYNormalized) {
      YNormalized = other.YNormalized;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          XNormalized = input.ReadFloat();
          break;
        }
        case 21: {
          YNormalized = input.ReadFloat();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CHideCursorMsg : pb::IMessage<CHideCursorMsg> {
  private static readonly pb::MessageParser<CHideCursorMsg> _parser = new pb::MessageParser<CHideCursorMsg>(() => new CHideCursorMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CHideCursorMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CHideCursorMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CHideCursorMsg(CHideCursorMsg other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CHideCursorMsg Clone() {
    return new CHideCursorMsg(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CHideCursorMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CHideCursorMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CHideCursorMsg other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CSetCursorMsg : pb::IMessage<CSetCursorMsg> {
  private static readonly pb::MessageParser<CSetCursorMsg> _parser = new pb::MessageParser<CSetCursorMsg>(() => new CSetCursorMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSetCursorMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetCursorMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetCursorMsg(CSetCursorMsg other) : this() {
    cursorId_ = other.cursorId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetCursorMsg Clone() {
    return new CSetCursorMsg(this);
  }

  /// <summary>Field number for the "cursor_id" field.</summary>
  public const int CursorIdFieldNumber = 1;
  /// <summary>Default value for the "cursor_id" field</summary>
  public const ulong CursorIdDefaultValue = 0UL;

  private ulong? cursorId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong CursorId {
    get { return cursorId_ ?? CursorIdDefaultValue; }
    set {
      cursorId_ = value;
    }
  }
  /// <summary>Gets whether the "cursor_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCursorId {
    get { return cursorId_ != null; }
  }
  /// <summary>Clears the value of the "cursor_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCursorId() {
    cursorId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSetCursorMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSetCursorMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CursorId != other.CursorId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCursorId) hash ^= CursorId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasCursorId) {
      output.WriteRawTag(8);
      output.WriteUInt64(CursorId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCursorId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CursorId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSetCursorMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasCursorId) {
      CursorId = other.CursorId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CursorId = input.ReadUInt64();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasCursorId) {
      return false;
    }
    return true;
  }
}

public sealed partial class CGetCursorImageMsg : pb::IMessage<CGetCursorImageMsg> {
  private static readonly pb::MessageParser<CGetCursorImageMsg> _parser = new pb::MessageParser<CGetCursorImageMsg>(() => new CGetCursorImageMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGetCursorImageMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGetCursorImageMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGetCursorImageMsg(CGetCursorImageMsg other) : this() {
    cursorId_ = other.cursorId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGetCursorImageMsg Clone() {
    return new CGetCursorImageMsg(this);
  }

  /// <summary>Field number for the "cursor_id" field.</summary>
  public const int CursorIdFieldNumber = 1;
  /// <summary>Default value for the "cursor_id" field</summary>
  public const ulong CursorIdDefaultValue = 0UL;

  private ulong? cursorId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong CursorId {
    get { return cursorId_ ?? CursorIdDefaultValue; }
    set {
      cursorId_ = value;
    }
  }
  /// <summary>Gets whether the "cursor_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCursorId {
    get { return cursorId_ != null; }
  }
  /// <summary>Clears the value of the "cursor_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCursorId() {
    cursorId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGetCursorImageMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGetCursorImageMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CursorId != other.CursorId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCursorId) hash ^= CursorId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasCursorId) {
      output.WriteRawTag(8);
      output.WriteUInt64(CursorId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCursorId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CursorId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGetCursorImageMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasCursorId) {
      CursorId = other.CursorId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CursorId = input.ReadUInt64();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasCursorId) {
      return false;
    }
    return true;
  }
}

public sealed partial class CSetCursorImageMsg : pb::IMessage<CSetCursorImageMsg> {
  private static readonly pb::MessageParser<CSetCursorImageMsg> _parser = new pb::MessageParser<CSetCursorImageMsg>(() => new CSetCursorImageMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSetCursorImageMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetCursorImageMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetCursorImageMsg(CSetCursorImageMsg other) : this() {
    cursorId_ = other.cursorId_;
    width_ = other.width_;
    height_ = other.height_;
    hotX_ = other.hotX_;
    hotY_ = other.hotY_;
    image_ = other.image_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetCursorImageMsg Clone() {
    return new CSetCursorImageMsg(this);
  }

  /// <summary>Field number for the "cursor_id" field.</summary>
  public const int CursorIdFieldNumber = 1;
  /// <summary>Default value for the "cursor_id" field</summary>
  public const ulong CursorIdDefaultValue = 0UL;

  private ulong? cursorId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong CursorId {
    get { return cursorId_ ?? CursorIdDefaultValue; }
    set {
      cursorId_ = value;
    }
  }
  /// <summary>Gets whether the "cursor_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCursorId {
    get { return cursorId_ != null; }
  }
  /// <summary>Clears the value of the "cursor_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCursorId() {
    cursorId_ = null;
  }

  /// <summary>Field number for the "width" field.</summary>
  public const int WidthFieldNumber = 2;
  /// <summary>Default value for the "width" field</summary>
  public const int WidthDefaultValue = 0;

  private int? width_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Width {
    get { return width_ ?? WidthDefaultValue; }
    set {
      width_ = value;
    }
  }
  /// <summary>Gets whether the "width" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWidth {
    get { return width_ != null; }
  }
  /// <summary>Clears the value of the "width" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWidth() {
    width_ = null;
  }

  /// <summary>Field number for the "height" field.</summary>
  public const int HeightFieldNumber = 3;
  /// <summary>Default value for the "height" field</summary>
  public const int HeightDefaultValue = 0;

  private int? height_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Height {
    get { return height_ ?? HeightDefaultValue; }
    set {
      height_ = value;
    }
  }
  /// <summary>Gets whether the "height" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHeight {
    get { return height_ != null; }
  }
  /// <summary>Clears the value of the "height" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHeight() {
    height_ = null;
  }

  /// <summary>Field number for the "hot_x" field.</summary>
  public const int HotXFieldNumber = 4;
  /// <summary>Default value for the "hot_x" field</summary>
  public const int HotXDefaultValue = 0;

  private int? hotX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HotX {
    get { return hotX_ ?? HotXDefaultValue; }
    set {
      hotX_ = value;
    }
  }
  /// <summary>Gets whether the "hot_x" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHotX {
    get { return hotX_ != null; }
  }
  /// <summary>Clears the value of the "hot_x" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHotX() {
    hotX_ = null;
  }

  /// <summary>Field number for the "hot_y" field.</summary>
  public const int HotYFieldNumber = 5;
  /// <summary>Default value for the "hot_y" field</summary>
  public const int HotYDefaultValue = 0;

  private int? hotY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HotY {
    get { return hotY_ ?? HotYDefaultValue; }
    set {
      hotY_ = value;
    }
  }
  /// <summary>Gets whether the "hot_y" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHotY {
    get { return hotY_ != null; }
  }
  /// <summary>Clears the value of the "hot_y" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHotY() {
    hotY_ = null;
  }

  /// <summary>Field number for the "image" field.</summary>
  public const int ImageFieldNumber = 6;
  /// <summary>Default value for the "image" field</summary>
  public readonly static pb::ByteString ImageDefaultValue = pb::ByteString.Empty;

  private pb::ByteString image_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Image {
    get { return image_ ?? ImageDefaultValue; }
    set {
      image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "image" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasImage {
    get { return image_ != null; }
  }
  /// <summary>Clears the value of the "image" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearImage() {
    image_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSetCursorImageMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSetCursorImageMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CursorId != other.CursorId) return false;
    if (Width != other.Width) return false;
    if (Height != other.Height) return false;
    if (HotX != other.HotX) return false;
    if (HotY != other.HotY) return false;
    if (Image != other.Image) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCursorId) hash ^= CursorId.GetHashCode();
    if (HasWidth) hash ^= Width.GetHashCode();
    if (HasHeight) hash ^= Height.GetHashCode();
    if (HasHotX) hash ^= HotX.GetHashCode();
    if (HasHotY) hash ^= HotY.GetHashCode();
    if (HasImage) hash ^= Image.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasCursorId) {
      output.WriteRawTag(8);
      output.WriteUInt64(CursorId);
    }
    if (HasWidth) {
      output.WriteRawTag(16);
      output.WriteInt32(Width);
    }
    if (HasHeight) {
      output.WriteRawTag(24);
      output.WriteInt32(Height);
    }
    if (HasHotX) {
      output.WriteRawTag(32);
      output.WriteInt32(HotX);
    }
    if (HasHotY) {
      output.WriteRawTag(40);
      output.WriteInt32(HotY);
    }
    if (HasImage) {
      output.WriteRawTag(50);
      output.WriteBytes(Image);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCursorId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CursorId);
    }
    if (HasWidth) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
    }
    if (HasHeight) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
    }
    if (HasHotX) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HotX);
    }
    if (HasHotY) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HotY);
    }
    if (HasImage) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSetCursorImageMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasCursorId) {
      CursorId = other.CursorId;
    }
    if (other.HasWidth) {
      Width = other.Width;
    }
    if (other.HasHeight) {
      Height = other.Height;
    }
    if (other.HasHotX) {
      HotX = other.HotX;
    }
    if (other.HasHotY) {
      HotY = other.HotY;
    }
    if (other.HasImage) {
      Image = other.Image;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CursorId = input.ReadUInt64();
          break;
        }
        case 16: {
          Width = input.ReadInt32();
          break;
        }
        case 24: {
          Height = input.ReadInt32();
          break;
        }
        case 32: {
          HotX = input.ReadInt32();
          break;
        }
        case 40: {
          HotY = input.ReadInt32();
          break;
        }
        case 50: {
          Image = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasCursorId) {
      return false;
    }
    return true;
  }
}

public sealed partial class CVideoDecoderInfoMsg : pb::IMessage<CVideoDecoderInfoMsg> {
  private static readonly pb::MessageParser<CVideoDecoderInfoMsg> _parser = new pb::MessageParser<CVideoDecoderInfoMsg>(() => new CVideoDecoderInfoMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CVideoDecoderInfoMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVideoDecoderInfoMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVideoDecoderInfoMsg(CVideoDecoderInfoMsg other) : this() {
    info_ = other.info_;
    threads_ = other.threads_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVideoDecoderInfoMsg Clone() {
    return new CVideoDecoderInfoMsg(this);
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 1;
  /// <summary>Default value for the "info" field</summary>
  public const string InfoDefaultValue = "";

  private string info_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Info {
    get { return info_ ?? InfoDefaultValue; }
    set {
      info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "info" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInfo {
    get { return info_ != null; }
  }
  /// <summary>Clears the value of the "info" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInfo() {
    info_ = null;
  }

  /// <summary>Field number for the "threads" field.</summary>
  public const int ThreadsFieldNumber = 2;
  /// <summary>Default value for the "threads" field</summary>
  public const int ThreadsDefaultValue = 0;

  private int? threads_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Threads {
    get { return threads_ ?? ThreadsDefaultValue; }
    set {
      threads_ = value;
    }
  }
  /// <summary>Gets whether the "threads" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasThreads {
    get { return threads_ != null; }
  }
  /// <summary>Clears the value of the "threads" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearThreads() {
    threads_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CVideoDecoderInfoMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CVideoDecoderInfoMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Info != other.Info) return false;
    if (Threads != other.Threads) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInfo) hash ^= Info.GetHashCode();
    if (HasThreads) hash ^= Threads.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasInfo) {
      output.WriteRawTag(10);
      output.WriteString(Info);
    }
    if (HasThreads) {
      output.WriteRawTag(16);
      output.WriteInt32(Threads);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInfo) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
    }
    if (HasThreads) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Threads);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CVideoDecoderInfoMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasInfo) {
      Info = other.Info;
    }
    if (other.HasThreads) {
      Threads = other.Threads;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Info = input.ReadString();
          break;
        }
        case 16: {
          Threads = input.ReadInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CVideoEncoderInfoMsg : pb::IMessage<CVideoEncoderInfoMsg> {
  private static readonly pb::MessageParser<CVideoEncoderInfoMsg> _parser = new pb::MessageParser<CVideoEncoderInfoMsg>(() => new CVideoEncoderInfoMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CVideoEncoderInfoMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVideoEncoderInfoMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVideoEncoderInfoMsg(CVideoEncoderInfoMsg other) : this() {
    info_ = other.info_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVideoEncoderInfoMsg Clone() {
    return new CVideoEncoderInfoMsg(this);
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 1;
  /// <summary>Default value for the "info" field</summary>
  public const string InfoDefaultValue = "";

  private string info_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Info {
    get { return info_ ?? InfoDefaultValue; }
    set {
      info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "info" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInfo {
    get { return info_ != null; }
  }
  /// <summary>Clears the value of the "info" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInfo() {
    info_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CVideoEncoderInfoMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CVideoEncoderInfoMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Info != other.Info) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInfo) hash ^= Info.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasInfo) {
      output.WriteRawTag(10);
      output.WriteString(Info);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInfo) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CVideoEncoderInfoMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasInfo) {
      Info = other.Info;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Info = input.ReadString();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CQuitRequest : pb::IMessage<CQuitRequest> {
  private static readonly pb::MessageParser<CQuitRequest> _parser = new pb::MessageParser<CQuitRequest>(() => new CQuitRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CQuitRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CQuitRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CQuitRequest(CQuitRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CQuitRequest Clone() {
    return new CQuitRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CQuitRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CQuitRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CQuitRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CDeleteCursorMsg : pb::IMessage<CDeleteCursorMsg> {
  private static readonly pb::MessageParser<CDeleteCursorMsg> _parser = new pb::MessageParser<CDeleteCursorMsg>(() => new CDeleteCursorMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDeleteCursorMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDeleteCursorMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDeleteCursorMsg(CDeleteCursorMsg other) : this() {
    cursorId_ = other.cursorId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDeleteCursorMsg Clone() {
    return new CDeleteCursorMsg(this);
  }

  /// <summary>Field number for the "cursor_id" field.</summary>
  public const int CursorIdFieldNumber = 1;
  /// <summary>Default value for the "cursor_id" field</summary>
  public const ulong CursorIdDefaultValue = 0UL;

  private ulong? cursorId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong CursorId {
    get { return cursorId_ ?? CursorIdDefaultValue; }
    set {
      cursorId_ = value;
    }
  }
  /// <summary>Gets whether the "cursor_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCursorId {
    get { return cursorId_ != null; }
  }
  /// <summary>Clears the value of the "cursor_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCursorId() {
    cursorId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDeleteCursorMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDeleteCursorMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CursorId != other.CursorId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCursorId) hash ^= CursorId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasCursorId) {
      output.WriteRawTag(8);
      output.WriteUInt64(CursorId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCursorId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CursorId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDeleteCursorMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasCursorId) {
      CursorId = other.CursorId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CursorId = input.ReadUInt64();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasCursorId) {
      return false;
    }
    return true;
  }
}

public sealed partial class CSetStreamingClientConfig : pb::IMessage<CSetStreamingClientConfig> {
  private static readonly pb::MessageParser<CSetStreamingClientConfig> _parser = new pb::MessageParser<CSetStreamingClientConfig>(() => new CSetStreamingClientConfig());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSetStreamingClientConfig> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetStreamingClientConfig() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetStreamingClientConfig(CSetStreamingClientConfig other) : this() {
    Config = other.HasConfig ? other.Config.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetStreamingClientConfig Clone() {
    return new CSetStreamingClientConfig(this);
  }

  /// <summary>Field number for the "config" field.</summary>
  public const int ConfigFieldNumber = 1;
  private global::CStreamingClientConfig config_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CStreamingClientConfig Config {
    get { return config_; }
    set {
      config_ = value;
    }
  }
  /// <summary>Gets whether the config field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasConfig {
    get { return config_ != null; }
  }
  /// <summary>Clears the value of the config field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearConfig() {
    config_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSetStreamingClientConfig);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSetStreamingClientConfig other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Config, other.Config)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasConfig) hash ^= Config.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasConfig) {
      output.WriteRawTag(10);
      output.WriteMessage(Config);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasConfig) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSetStreamingClientConfig other) {
    if (other == null) {
      return;
    }
    if (other.HasConfig) {
      if (!HasConfig) {
        config_ = new global::CStreamingClientConfig();
      }
      Config.MergeFrom(other.Config);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (!HasConfig) {
            config_ = new global::CStreamingClientConfig();
          }
          input.ReadMessage(config_);
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (HasConfig) {
      if (!Config.IsInitialized()) return false;
    }
    else {
      return false;
    }
    return true;
  }
}

public sealed partial class CSetQoSMsg : pb::IMessage<CSetQoSMsg> {
  private static readonly pb::MessageParser<CSetQoSMsg> _parser = new pb::MessageParser<CSetQoSMsg>(() => new CSetQoSMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSetQoSMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetQoSMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetQoSMsg(CSetQoSMsg other) : this() {
    useQos_ = other.useQos_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetQoSMsg Clone() {
    return new CSetQoSMsg(this);
  }

  /// <summary>Field number for the "use_qos" field.</summary>
  public const int UseQosFieldNumber = 1;
  /// <summary>Default value for the "use_qos" field</summary>
  public const bool UseQosDefaultValue = false;

  private bool? useQos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UseQos {
    get { return useQos_ ?? UseQosDefaultValue; }
    set {
      useQos_ = value;
    }
  }
  /// <summary>Gets whether the "use_qos" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUseQos {
    get { return useQos_ != null; }
  }
  /// <summary>Clears the value of the "use_qos" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUseQos() {
    useQos_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSetQoSMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSetQoSMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UseQos != other.UseQos) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasUseQos) hash ^= UseQos.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasUseQos) {
      output.WriteRawTag(8);
      output.WriteBool(UseQos);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasUseQos) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSetQoSMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasUseQos) {
      UseQos = other.UseQos;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UseQos = input.ReadBool();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasUseQos) {
      return false;
    }
    return true;
  }
}

public sealed partial class CSetTargetFramerateMsg : pb::IMessage<CSetTargetFramerateMsg> {
  private static readonly pb::MessageParser<CSetTargetFramerateMsg> _parser = new pb::MessageParser<CSetTargetFramerateMsg>(() => new CSetTargetFramerateMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSetTargetFramerateMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTargetFramerateMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTargetFramerateMsg(CSetTargetFramerateMsg other) : this() {
    framerate_ = other.framerate_;
    reasons_ = other.reasons_;
    framerateNumerator_ = other.framerateNumerator_;
    framerateDenominator_ = other.framerateDenominator_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTargetFramerateMsg Clone() {
    return new CSetTargetFramerateMsg(this);
  }

  /// <summary>Field number for the "framerate" field.</summary>
  public const int FramerateFieldNumber = 1;
  /// <summary>Default value for the "framerate" field</summary>
  public const uint FramerateDefaultValue = 0;

  private uint? framerate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Framerate {
    get { return framerate_ ?? FramerateDefaultValue; }
    set {
      framerate_ = value;
    }
  }
  /// <summary>Gets whether the "framerate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFramerate {
    get { return framerate_ != null; }
  }
  /// <summary>Clears the value of the "framerate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFramerate() {
    framerate_ = null;
  }

  /// <summary>Field number for the "reasons" field.</summary>
  public const int ReasonsFieldNumber = 2;
  /// <summary>Default value for the "reasons" field</summary>
  public const uint ReasonsDefaultValue = 0;

  private uint? reasons_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Reasons {
    get { return reasons_ ?? ReasonsDefaultValue; }
    set {
      reasons_ = value;
    }
  }
  /// <summary>Gets whether the "reasons" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReasons {
    get { return reasons_ != null; }
  }
  /// <summary>Clears the value of the "reasons" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReasons() {
    reasons_ = null;
  }

  /// <summary>Field number for the "framerate_numerator" field.</summary>
  public const int FramerateNumeratorFieldNumber = 3;
  /// <summary>Default value for the "framerate_numerator" field</summary>
  public const uint FramerateNumeratorDefaultValue = 0;

  private uint? framerateNumerator_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FramerateNumerator {
    get { return framerateNumerator_ ?? FramerateNumeratorDefaultValue; }
    set {
      framerateNumerator_ = value;
    }
  }
  /// <summary>Gets whether the "framerate_numerator" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFramerateNumerator {
    get { return framerateNumerator_ != null; }
  }
  /// <summary>Clears the value of the "framerate_numerator" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFramerateNumerator() {
    framerateNumerator_ = null;
  }

  /// <summary>Field number for the "framerate_denominator" field.</summary>
  public const int FramerateDenominatorFieldNumber = 4;
  /// <summary>Default value for the "framerate_denominator" field</summary>
  public const uint FramerateDenominatorDefaultValue = 0;

  private uint? framerateDenominator_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FramerateDenominator {
    get { return framerateDenominator_ ?? FramerateDenominatorDefaultValue; }
    set {
      framerateDenominator_ = value;
    }
  }
  /// <summary>Gets whether the "framerate_denominator" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFramerateDenominator {
    get { return framerateDenominator_ != null; }
  }
  /// <summary>Clears the value of the "framerate_denominator" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFramerateDenominator() {
    framerateDenominator_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSetTargetFramerateMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSetTargetFramerateMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Framerate != other.Framerate) return false;
    if (Reasons != other.Reasons) return false;
    if (FramerateNumerator != other.FramerateNumerator) return false;
    if (FramerateDenominator != other.FramerateDenominator) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFramerate) hash ^= Framerate.GetHashCode();
    if (HasReasons) hash ^= Reasons.GetHashCode();
    if (HasFramerateNumerator) hash ^= FramerateNumerator.GetHashCode();
    if (HasFramerateDenominator) hash ^= FramerateDenominator.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasFramerate) {
      output.WriteRawTag(8);
      output.WriteUInt32(Framerate);
    }
    if (HasReasons) {
      output.WriteRawTag(16);
      output.WriteUInt32(Reasons);
    }
    if (HasFramerateNumerator) {
      output.WriteRawTag(24);
      output.WriteUInt32(FramerateNumerator);
    }
    if (HasFramerateDenominator) {
      output.WriteRawTag(32);
      output.WriteUInt32(FramerateDenominator);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFramerate) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Framerate);
    }
    if (HasReasons) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reasons);
    }
    if (HasFramerateNumerator) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FramerateNumerator);
    }
    if (HasFramerateDenominator) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FramerateDenominator);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSetTargetFramerateMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasFramerate) {
      Framerate = other.Framerate;
    }
    if (other.HasReasons) {
      Reasons = other.Reasons;
    }
    if (other.HasFramerateNumerator) {
      FramerateNumerator = other.FramerateNumerator;
    }
    if (other.HasFramerateDenominator) {
      FramerateDenominator = other.FramerateDenominator;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Framerate = input.ReadUInt32();
          break;
        }
        case 16: {
          Reasons = input.ReadUInt32();
          break;
        }
        case 24: {
          FramerateNumerator = input.ReadUInt32();
          break;
        }
        case 32: {
          FramerateDenominator = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasFramerate) {
      return false;
    }
    return true;
  }
}

public sealed partial class CSetTargetBitrateMsg : pb::IMessage<CSetTargetBitrateMsg> {
  private static readonly pb::MessageParser<CSetTargetBitrateMsg> _parser = new pb::MessageParser<CSetTargetBitrateMsg>(() => new CSetTargetBitrateMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSetTargetBitrateMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTargetBitrateMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTargetBitrateMsg(CSetTargetBitrateMsg other) : this() {
    bitrate_ = other.bitrate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTargetBitrateMsg Clone() {
    return new CSetTargetBitrateMsg(this);
  }

  /// <summary>Field number for the "bitrate" field.</summary>
  public const int BitrateFieldNumber = 1;
  /// <summary>Default value for the "bitrate" field</summary>
  public const int BitrateDefaultValue = 0;

  private int? bitrate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Bitrate {
    get { return bitrate_ ?? BitrateDefaultValue; }
    set {
      bitrate_ = value;
    }
  }
  /// <summary>Gets whether the "bitrate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBitrate {
    get { return bitrate_ != null; }
  }
  /// <summary>Clears the value of the "bitrate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBitrate() {
    bitrate_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSetTargetBitrateMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSetTargetBitrateMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Bitrate != other.Bitrate) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasBitrate) hash ^= Bitrate.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasBitrate) {
      output.WriteRawTag(8);
      output.WriteInt32(Bitrate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasBitrate) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bitrate);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSetTargetBitrateMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasBitrate) {
      Bitrate = other.Bitrate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Bitrate = input.ReadInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasBitrate) {
      return false;
    }
    return true;
  }
}

public sealed partial class COverlayEnabledMsg : pb::IMessage<COverlayEnabledMsg> {
  private static readonly pb::MessageParser<COverlayEnabledMsg> _parser = new pb::MessageParser<COverlayEnabledMsg>(() => new COverlayEnabledMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<COverlayEnabledMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public COverlayEnabledMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public COverlayEnabledMsg(COverlayEnabledMsg other) : this() {
    enabled_ = other.enabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public COverlayEnabledMsg Clone() {
    return new COverlayEnabledMsg(this);
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 1;
  /// <summary>Default value for the "enabled" field</summary>
  public const bool EnabledDefaultValue = false;

  private bool? enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { return enabled_ ?? EnabledDefaultValue; }
    set {
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnabled {
    get { return enabled_ != null; }
  }
  /// <summary>Clears the value of the "enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnabled() {
    enabled_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as COverlayEnabledMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(COverlayEnabledMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enabled != other.Enabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasEnabled) {
      output.WriteRawTag(8);
      output.WriteBool(Enabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(COverlayEnabledMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enabled = input.ReadBool();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasEnabled) {
      return false;
    }
    return true;
  }
}

public sealed partial class CSetGammaRampMsg : pb::IMessage<CSetGammaRampMsg> {
  private static readonly pb::MessageParser<CSetGammaRampMsg> _parser = new pb::MessageParser<CSetGammaRampMsg>(() => new CSetGammaRampMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSetGammaRampMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetGammaRampMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetGammaRampMsg(CSetGammaRampMsg other) : this() {
    gammaRamp_ = other.gammaRamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetGammaRampMsg Clone() {
    return new CSetGammaRampMsg(this);
  }

  /// <summary>Field number for the "gamma_ramp" field.</summary>
  public const int GammaRampFieldNumber = 1;
  /// <summary>Default value for the "gamma_ramp" field</summary>
  public readonly static pb::ByteString GammaRampDefaultValue = pb::ByteString.Empty;

  private pb::ByteString gammaRamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString GammaRamp {
    get { return gammaRamp_ ?? GammaRampDefaultValue; }
    set {
      gammaRamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "gamma_ramp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGammaRamp {
    get { return gammaRamp_ != null; }
  }
  /// <summary>Clears the value of the "gamma_ramp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGammaRamp() {
    gammaRamp_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSetGammaRampMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSetGammaRampMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GammaRamp != other.GammaRamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasGammaRamp) hash ^= GammaRamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasGammaRamp) {
      output.WriteRawTag(10);
      output.WriteBytes(GammaRamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasGammaRamp) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(GammaRamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSetGammaRampMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasGammaRamp) {
      GammaRamp = other.GammaRamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          GammaRamp = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CSetActivityMsg : pb::IMessage<CSetActivityMsg> {
  private static readonly pb::MessageParser<CSetActivityMsg> _parser = new pb::MessageParser<CSetActivityMsg>(() => new CSetActivityMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSetActivityMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetActivityMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetActivityMsg(CSetActivityMsg other) : this() {
    activity_ = other.activity_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetActivityMsg Clone() {
    return new CSetActivityMsg(this);
  }

  /// <summary>Field number for the "activity" field.</summary>
  public const int ActivityFieldNumber = 1;
  /// <summary>Default value for the "activity" field</summary>
  public const global::EStreamActivity ActivityDefaultValue = global::EStreamActivity.KEstreamActivityIdle;

  private global::EStreamActivity? activity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamActivity Activity {
    get { return activity_ ?? ActivityDefaultValue; }
    set {
      activity_ = value;
    }
  }
  /// <summary>Gets whether the "activity" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasActivity {
    get { return activity_ != null; }
  }
  /// <summary>Clears the value of the "activity" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearActivity() {
    activity_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSetActivityMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSetActivityMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Activity != other.Activity) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasActivity) hash ^= Activity.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasActivity) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Activity);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasActivity) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Activity);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSetActivityMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasActivity) {
      Activity = other.Activity;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          activity_ = (global::EStreamActivity) input.ReadEnum();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CSystemSuspendMsg : pb::IMessage<CSystemSuspendMsg> {
  private static readonly pb::MessageParser<CSystemSuspendMsg> _parser = new pb::MessageParser<CSystemSuspendMsg>(() => new CSystemSuspendMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSystemSuspendMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSystemSuspendMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSystemSuspendMsg(CSystemSuspendMsg other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSystemSuspendMsg Clone() {
    return new CSystemSuspendMsg(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSystemSuspendMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSystemSuspendMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSystemSuspendMsg other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CVirtualHereRequestMsg : pb::IMessage<CVirtualHereRequestMsg> {
  private static readonly pb::MessageParser<CVirtualHereRequestMsg> _parser = new pb::MessageParser<CVirtualHereRequestMsg>(() => new CVirtualHereRequestMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CVirtualHereRequestMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVirtualHereRequestMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVirtualHereRequestMsg(CVirtualHereRequestMsg other) : this() {
    hostname_ = other.hostname_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVirtualHereRequestMsg Clone() {
    return new CVirtualHereRequestMsg(this);
  }

  /// <summary>Field number for the "hostname" field.</summary>
  public const int HostnameFieldNumber = 1;
  /// <summary>Default value for the "hostname" field</summary>
  public const string HostnameDefaultValue = "";

  private string hostname_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Hostname {
    get { return hostname_ ?? HostnameDefaultValue; }
    set {
      hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "hostname" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHostname {
    get { return hostname_ != null; }
  }
  /// <summary>Clears the value of the "hostname" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHostname() {
    hostname_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CVirtualHereRequestMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CVirtualHereRequestMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Hostname != other.Hostname) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasHostname) hash ^= Hostname.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasHostname) {
      output.WriteRawTag(10);
      output.WriteString(Hostname);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasHostname) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostname);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CVirtualHereRequestMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasHostname) {
      Hostname = other.Hostname;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Hostname = input.ReadString();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CVirtualHereReadyMsg : pb::IMessage<CVirtualHereReadyMsg> {
  private static readonly pb::MessageParser<CVirtualHereReadyMsg> _parser = new pb::MessageParser<CVirtualHereReadyMsg>(() => new CVirtualHereReadyMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CVirtualHereReadyMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVirtualHereReadyMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVirtualHereReadyMsg(CVirtualHereReadyMsg other) : this() {
    licensedDeviceCount_ = other.licensedDeviceCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVirtualHereReadyMsg Clone() {
    return new CVirtualHereReadyMsg(this);
  }

  /// <summary>Field number for the "licensed_device_count" field.</summary>
  public const int LicensedDeviceCountFieldNumber = 1;
  /// <summary>Default value for the "licensed_device_count" field</summary>
  public const uint LicensedDeviceCountDefaultValue = 0;

  private uint? licensedDeviceCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LicensedDeviceCount {
    get { return licensedDeviceCount_ ?? LicensedDeviceCountDefaultValue; }
    set {
      licensedDeviceCount_ = value;
    }
  }
  /// <summary>Gets whether the "licensed_device_count" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLicensedDeviceCount {
    get { return licensedDeviceCount_ != null; }
  }
  /// <summary>Clears the value of the "licensed_device_count" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLicensedDeviceCount() {
    licensedDeviceCount_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CVirtualHereReadyMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CVirtualHereReadyMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LicensedDeviceCount != other.LicensedDeviceCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLicensedDeviceCount) hash ^= LicensedDeviceCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasLicensedDeviceCount) {
      output.WriteRawTag(8);
      output.WriteUInt32(LicensedDeviceCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasLicensedDeviceCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LicensedDeviceCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CVirtualHereReadyMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasLicensedDeviceCount) {
      LicensedDeviceCount = other.LicensedDeviceCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          LicensedDeviceCount = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CVirtualHereShareDeviceMsg : pb::IMessage<CVirtualHereShareDeviceMsg> {
  private static readonly pb::MessageParser<CVirtualHereShareDeviceMsg> _parser = new pb::MessageParser<CVirtualHereShareDeviceMsg>(() => new CVirtualHereShareDeviceMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CVirtualHereShareDeviceMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVirtualHereShareDeviceMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVirtualHereShareDeviceMsg(CVirtualHereShareDeviceMsg other) : this() {
    deviceAddress_ = other.deviceAddress_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVirtualHereShareDeviceMsg Clone() {
    return new CVirtualHereShareDeviceMsg(this);
  }

  /// <summary>Field number for the "device_address" field.</summary>
  public const int DeviceAddressFieldNumber = 1;
  /// <summary>Default value for the "device_address" field</summary>
  public const string DeviceAddressDefaultValue = "";

  private string deviceAddress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceAddress {
    get { return deviceAddress_ ?? DeviceAddressDefaultValue; }
    set {
      deviceAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "device_address" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeviceAddress {
    get { return deviceAddress_ != null; }
  }
  /// <summary>Clears the value of the "device_address" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeviceAddress() {
    deviceAddress_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CVirtualHereShareDeviceMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CVirtualHereShareDeviceMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceAddress != other.DeviceAddress) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDeviceAddress) hash ^= DeviceAddress.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasDeviceAddress) {
      output.WriteRawTag(10);
      output.WriteString(DeviceAddress);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDeviceAddress) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceAddress);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CVirtualHereShareDeviceMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasDeviceAddress) {
      DeviceAddress = other.DeviceAddress;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceAddress = input.ReadString();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CSetSpectatorModeMsg : pb::IMessage<CSetSpectatorModeMsg> {
  private static readonly pb::MessageParser<CSetSpectatorModeMsg> _parser = new pb::MessageParser<CSetSpectatorModeMsg>(() => new CSetSpectatorModeMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSetSpectatorModeMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetSpectatorModeMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetSpectatorModeMsg(CSetSpectatorModeMsg other) : this() {
    enabled_ = other.enabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetSpectatorModeMsg Clone() {
    return new CSetSpectatorModeMsg(this);
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 1;
  /// <summary>Default value for the "enabled" field</summary>
  public const bool EnabledDefaultValue = false;

  private bool? enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { return enabled_ ?? EnabledDefaultValue; }
    set {
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnabled {
    get { return enabled_ != null; }
  }
  /// <summary>Clears the value of the "enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnabled() {
    enabled_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSetSpectatorModeMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSetSpectatorModeMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enabled != other.Enabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasEnabled) {
      output.WriteRawTag(8);
      output.WriteBool(Enabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSetSpectatorModeMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enabled = input.ReadBool();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CRemoteHIDMsg : pb::IMessage<CRemoteHIDMsg> {
  private static readonly pb::MessageParser<CRemoteHIDMsg> _parser = new pb::MessageParser<CRemoteHIDMsg>(() => new CRemoteHIDMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CRemoteHIDMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CRemoteHIDMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CRemoteHIDMsg(CRemoteHIDMsg other) : this() {
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CRemoteHIDMsg Clone() {
    return new CRemoteHIDMsg(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  /// <summary>Default value for the "data" field</summary>
  public readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString data_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_ ?? DataDefaultValue; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "data" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasData {
    get { return data_ != null; }
  }
  /// <summary>Clears the value of the "data" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearData() {
    data_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CRemoteHIDMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CRemoteHIDMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasData) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasData) {
      output.WriteRawTag(10);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasData) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CRemoteHIDMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasData) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CTouchConfigActiveMsg : pb::IMessage<CTouchConfigActiveMsg> {
  private static readonly pb::MessageParser<CTouchConfigActiveMsg> _parser = new pb::MessageParser<CTouchConfigActiveMsg>(() => new CTouchConfigActiveMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CTouchConfigActiveMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CTouchConfigActiveMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CTouchConfigActiveMsg(CTouchConfigActiveMsg other) : this() {
    appid_ = other.appid_;
    revision_ = other.revision_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CTouchConfigActiveMsg Clone() {
    return new CTouchConfigActiveMsg(this);
  }

  /// <summary>Field number for the "appid" field.</summary>
  public const int AppidFieldNumber = 1;
  /// <summary>Default value for the "appid" field</summary>
  public const uint AppidDefaultValue = 0;

  private uint? appid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Appid {
    get { return appid_ ?? AppidDefaultValue; }
    set {
      appid_ = value;
    }
  }
  /// <summary>Gets whether the "appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAppid {
    get { return appid_ != null; }
  }
  /// <summary>Clears the value of the "appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAppid() {
    appid_ = null;
  }

  /// <summary>Field number for the "revision" field.</summary>
  public const int RevisionFieldNumber = 2;
  /// <summary>Default value for the "revision" field</summary>
  public const uint RevisionDefaultValue = 0;

  private uint? revision_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Revision {
    get { return revision_ ?? RevisionDefaultValue; }
    set {
      revision_ = value;
    }
  }
  /// <summary>Gets whether the "revision" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevision {
    get { return revision_ != null; }
  }
  /// <summary>Clears the value of the "revision" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevision() {
    revision_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CTouchConfigActiveMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CTouchConfigActiveMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Appid != other.Appid) return false;
    if (Revision != other.Revision) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAppid) hash ^= Appid.GetHashCode();
    if (HasRevision) hash ^= Revision.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasAppid) {
      output.WriteRawTag(8);
      output.WriteUInt32(Appid);
    }
    if (HasRevision) {
      output.WriteRawTag(16);
      output.WriteUInt32(Revision);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAppid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
    }
    if (HasRevision) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Revision);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CTouchConfigActiveMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasAppid) {
      Appid = other.Appid;
    }
    if (other.HasRevision) {
      Revision = other.Revision;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Appid = input.ReadUInt32();
          break;
        }
        case 16: {
          Revision = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CGetTouchConfigDataMsg : pb::IMessage<CGetTouchConfigDataMsg> {
  private static readonly pb::MessageParser<CGetTouchConfigDataMsg> _parser = new pb::MessageParser<CGetTouchConfigDataMsg>(() => new CGetTouchConfigDataMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGetTouchConfigDataMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGetTouchConfigDataMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGetTouchConfigDataMsg(CGetTouchConfigDataMsg other) : this() {
    appid_ = other.appid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGetTouchConfigDataMsg Clone() {
    return new CGetTouchConfigDataMsg(this);
  }

  /// <summary>Field number for the "appid" field.</summary>
  public const int AppidFieldNumber = 1;
  /// <summary>Default value for the "appid" field</summary>
  public const uint AppidDefaultValue = 0;

  private uint? appid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Appid {
    get { return appid_ ?? AppidDefaultValue; }
    set {
      appid_ = value;
    }
  }
  /// <summary>Gets whether the "appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAppid {
    get { return appid_ != null; }
  }
  /// <summary>Clears the value of the "appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAppid() {
    appid_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGetTouchConfigDataMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGetTouchConfigDataMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Appid != other.Appid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAppid) hash ^= Appid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasAppid) {
      output.WriteRawTag(8);
      output.WriteUInt32(Appid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAppid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGetTouchConfigDataMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasAppid) {
      Appid = other.Appid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Appid = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CSetTouchConfigDataMsg : pb::IMessage<CSetTouchConfigDataMsg> {
  private static readonly pb::MessageParser<CSetTouchConfigDataMsg> _parser = new pb::MessageParser<CSetTouchConfigDataMsg>(() => new CSetTouchConfigDataMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSetTouchConfigDataMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTouchConfigDataMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTouchConfigDataMsg(CSetTouchConfigDataMsg other) : this() {
    appid_ = other.appid_;
    revision_ = other.revision_;
    data_ = other.data_;
    layout_ = other.layout_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTouchConfigDataMsg Clone() {
    return new CSetTouchConfigDataMsg(this);
  }

  /// <summary>Field number for the "appid" field.</summary>
  public const int AppidFieldNumber = 1;
  /// <summary>Default value for the "appid" field</summary>
  public const uint AppidDefaultValue = 0;

  private uint? appid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Appid {
    get { return appid_ ?? AppidDefaultValue; }
    set {
      appid_ = value;
    }
  }
  /// <summary>Gets whether the "appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAppid {
    get { return appid_ != null; }
  }
  /// <summary>Clears the value of the "appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAppid() {
    appid_ = null;
  }

  /// <summary>Field number for the "revision" field.</summary>
  public const int RevisionFieldNumber = 2;
  /// <summary>Default value for the "revision" field</summary>
  public const uint RevisionDefaultValue = 0;

  private uint? revision_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Revision {
    get { return revision_ ?? RevisionDefaultValue; }
    set {
      revision_ = value;
    }
  }
  /// <summary>Gets whether the "revision" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevision {
    get { return revision_ != null; }
  }
  /// <summary>Clears the value of the "revision" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevision() {
    revision_ = null;
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 3;
  /// <summary>Default value for the "data" field</summary>
  public readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString data_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_ ?? DataDefaultValue; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "data" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasData {
    get { return data_ != null; }
  }
  /// <summary>Clears the value of the "data" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearData() {
    data_ = null;
  }

  /// <summary>Field number for the "layout" field.</summary>
  public const int LayoutFieldNumber = 4;
  /// <summary>Default value for the "layout" field</summary>
  public readonly static pb::ByteString LayoutDefaultValue = pb::ByteString.Empty;

  private pb::ByteString layout_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Layout {
    get { return layout_ ?? LayoutDefaultValue; }
    set {
      layout_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "layout" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLayout {
    get { return layout_ != null; }
  }
  /// <summary>Clears the value of the "layout" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLayout() {
    layout_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSetTouchConfigDataMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSetTouchConfigDataMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Appid != other.Appid) return false;
    if (Revision != other.Revision) return false;
    if (Data != other.Data) return false;
    if (Layout != other.Layout) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAppid) hash ^= Appid.GetHashCode();
    if (HasRevision) hash ^= Revision.GetHashCode();
    if (HasData) hash ^= Data.GetHashCode();
    if (HasLayout) hash ^= Layout.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasAppid) {
      output.WriteRawTag(8);
      output.WriteUInt32(Appid);
    }
    if (HasRevision) {
      output.WriteRawTag(16);
      output.WriteUInt32(Revision);
    }
    if (HasData) {
      output.WriteRawTag(26);
      output.WriteBytes(Data);
    }
    if (HasLayout) {
      output.WriteRawTag(34);
      output.WriteBytes(Layout);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAppid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
    }
    if (HasRevision) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Revision);
    }
    if (HasData) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (HasLayout) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Layout);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSetTouchConfigDataMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasAppid) {
      Appid = other.Appid;
    }
    if (other.HasRevision) {
      Revision = other.Revision;
    }
    if (other.HasData) {
      Data = other.Data;
    }
    if (other.HasLayout) {
      Layout = other.Layout;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Appid = input.ReadUInt32();
          break;
        }
        case 16: {
          Revision = input.ReadUInt32();
          break;
        }
        case 26: {
          Data = input.ReadBytes();
          break;
        }
        case 34: {
          Layout = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CSaveTouchConfigLayoutMsg : pb::IMessage<CSaveTouchConfigLayoutMsg> {
  private static readonly pb::MessageParser<CSaveTouchConfigLayoutMsg> _parser = new pb::MessageParser<CSaveTouchConfigLayoutMsg>(() => new CSaveTouchConfigLayoutMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSaveTouchConfigLayoutMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSaveTouchConfigLayoutMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSaveTouchConfigLayoutMsg(CSaveTouchConfigLayoutMsg other) : this() {
    appid_ = other.appid_;
    layout_ = other.layout_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSaveTouchConfigLayoutMsg Clone() {
    return new CSaveTouchConfigLayoutMsg(this);
  }

  /// <summary>Field number for the "appid" field.</summary>
  public const int AppidFieldNumber = 1;
  /// <summary>Default value for the "appid" field</summary>
  public const uint AppidDefaultValue = 0;

  private uint? appid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Appid {
    get { return appid_ ?? AppidDefaultValue; }
    set {
      appid_ = value;
    }
  }
  /// <summary>Gets whether the "appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAppid {
    get { return appid_ != null; }
  }
  /// <summary>Clears the value of the "appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAppid() {
    appid_ = null;
  }

  /// <summary>Field number for the "layout" field.</summary>
  public const int LayoutFieldNumber = 4;
  /// <summary>Default value for the "layout" field</summary>
  public readonly static pb::ByteString LayoutDefaultValue = pb::ByteString.Empty;

  private pb::ByteString layout_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Layout {
    get { return layout_ ?? LayoutDefaultValue; }
    set {
      layout_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "layout" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLayout {
    get { return layout_ != null; }
  }
  /// <summary>Clears the value of the "layout" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLayout() {
    layout_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSaveTouchConfigLayoutMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSaveTouchConfigLayoutMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Appid != other.Appid) return false;
    if (Layout != other.Layout) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAppid) hash ^= Appid.GetHashCode();
    if (HasLayout) hash ^= Layout.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasAppid) {
      output.WriteRawTag(8);
      output.WriteUInt32(Appid);
    }
    if (HasLayout) {
      output.WriteRawTag(34);
      output.WriteBytes(Layout);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAppid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
    }
    if (HasLayout) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Layout);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSaveTouchConfigLayoutMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasAppid) {
      Appid = other.Appid;
    }
    if (other.HasLayout) {
      Layout = other.Layout;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Appid = input.ReadUInt32();
          break;
        }
        case 34: {
          Layout = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CTouchActionSetActiveMsg : pb::IMessage<CTouchActionSetActiveMsg> {
  private static readonly pb::MessageParser<CTouchActionSetActiveMsg> _parser = new pb::MessageParser<CTouchActionSetActiveMsg>(() => new CTouchActionSetActiveMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CTouchActionSetActiveMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CTouchActionSetActiveMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CTouchActionSetActiveMsg(CTouchActionSetActiveMsg other) : this() {
    appid_ = other.appid_;
    actionsetId_ = other.actionsetId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CTouchActionSetActiveMsg Clone() {
    return new CTouchActionSetActiveMsg(this);
  }

  /// <summary>Field number for the "appid" field.</summary>
  public const int AppidFieldNumber = 1;
  /// <summary>Default value for the "appid" field</summary>
  public const uint AppidDefaultValue = 0;

  private uint? appid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Appid {
    get { return appid_ ?? AppidDefaultValue; }
    set {
      appid_ = value;
    }
  }
  /// <summary>Gets whether the "appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAppid {
    get { return appid_ != null; }
  }
  /// <summary>Clears the value of the "appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAppid() {
    appid_ = null;
  }

  /// <summary>Field number for the "actionset_id" field.</summary>
  public const int ActionsetIdFieldNumber = 2;
  /// <summary>Default value for the "actionset_id" field</summary>
  public const int ActionsetIdDefaultValue = 0;

  private int? actionsetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ActionsetId {
    get { return actionsetId_ ?? ActionsetIdDefaultValue; }
    set {
      actionsetId_ = value;
    }
  }
  /// <summary>Gets whether the "actionset_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasActionsetId {
    get { return actionsetId_ != null; }
  }
  /// <summary>Clears the value of the "actionset_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearActionsetId() {
    actionsetId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CTouchActionSetActiveMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CTouchActionSetActiveMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Appid != other.Appid) return false;
    if (ActionsetId != other.ActionsetId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAppid) hash ^= Appid.GetHashCode();
    if (HasActionsetId) hash ^= ActionsetId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasAppid) {
      output.WriteRawTag(8);
      output.WriteUInt32(Appid);
    }
    if (HasActionsetId) {
      output.WriteRawTag(16);
      output.WriteInt32(ActionsetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAppid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
    }
    if (HasActionsetId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionsetId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CTouchActionSetActiveMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasAppid) {
      Appid = other.Appid;
    }
    if (other.HasActionsetId) {
      ActionsetId = other.ActionsetId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Appid = input.ReadUInt32();
          break;
        }
        case 16: {
          ActionsetId = input.ReadInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CGetTouchIconDataMsg : pb::IMessage<CGetTouchIconDataMsg> {
  private static readonly pb::MessageParser<CGetTouchIconDataMsg> _parser = new pb::MessageParser<CGetTouchIconDataMsg>(() => new CGetTouchIconDataMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGetTouchIconDataMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGetTouchIconDataMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGetTouchIconDataMsg(CGetTouchIconDataMsg other) : this() {
    appid_ = other.appid_;
    icon_ = other.icon_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGetTouchIconDataMsg Clone() {
    return new CGetTouchIconDataMsg(this);
  }

  /// <summary>Field number for the "appid" field.</summary>
  public const int AppidFieldNumber = 1;
  /// <summary>Default value for the "appid" field</summary>
  public const uint AppidDefaultValue = 0;

  private uint? appid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Appid {
    get { return appid_ ?? AppidDefaultValue; }
    set {
      appid_ = value;
    }
  }
  /// <summary>Gets whether the "appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAppid {
    get { return appid_ != null; }
  }
  /// <summary>Clears the value of the "appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAppid() {
    appid_ = null;
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 2;
  /// <summary>Default value for the "icon" field</summary>
  public const string IconDefaultValue = "";

  private string icon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_ ?? IconDefaultValue; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "icon" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIcon {
    get { return icon_ != null; }
  }
  /// <summary>Clears the value of the "icon" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIcon() {
    icon_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGetTouchIconDataMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGetTouchIconDataMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Appid != other.Appid) return false;
    if (Icon != other.Icon) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAppid) hash ^= Appid.GetHashCode();
    if (HasIcon) hash ^= Icon.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasAppid) {
      output.WriteRawTag(8);
      output.WriteUInt32(Appid);
    }
    if (HasIcon) {
      output.WriteRawTag(18);
      output.WriteString(Icon);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAppid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
    }
    if (HasIcon) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGetTouchIconDataMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasAppid) {
      Appid = other.Appid;
    }
    if (other.HasIcon) {
      Icon = other.Icon;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Appid = input.ReadUInt32();
          break;
        }
        case 18: {
          Icon = input.ReadString();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CSetTouchIconDataMsg : pb::IMessage<CSetTouchIconDataMsg> {
  private static readonly pb::MessageParser<CSetTouchIconDataMsg> _parser = new pb::MessageParser<CSetTouchIconDataMsg>(() => new CSetTouchIconDataMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSetTouchIconDataMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTouchIconDataMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTouchIconDataMsg(CSetTouchIconDataMsg other) : this() {
    appid_ = other.appid_;
    icon_ = other.icon_;
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSetTouchIconDataMsg Clone() {
    return new CSetTouchIconDataMsg(this);
  }

  /// <summary>Field number for the "appid" field.</summary>
  public const int AppidFieldNumber = 1;
  /// <summary>Default value for the "appid" field</summary>
  public const uint AppidDefaultValue = 0;

  private uint? appid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Appid {
    get { return appid_ ?? AppidDefaultValue; }
    set {
      appid_ = value;
    }
  }
  /// <summary>Gets whether the "appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAppid {
    get { return appid_ != null; }
  }
  /// <summary>Clears the value of the "appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAppid() {
    appid_ = null;
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 2;
  /// <summary>Default value for the "icon" field</summary>
  public const string IconDefaultValue = "";

  private string icon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_ ?? IconDefaultValue; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "icon" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIcon {
    get { return icon_ != null; }
  }
  /// <summary>Clears the value of the "icon" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIcon() {
    icon_ = null;
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 3;
  /// <summary>Default value for the "data" field</summary>
  public readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString data_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_ ?? DataDefaultValue; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "data" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasData {
    get { return data_ != null; }
  }
  /// <summary>Clears the value of the "data" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearData() {
    data_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSetTouchIconDataMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSetTouchIconDataMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Appid != other.Appid) return false;
    if (Icon != other.Icon) return false;
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAppid) hash ^= Appid.GetHashCode();
    if (HasIcon) hash ^= Icon.GetHashCode();
    if (HasData) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasAppid) {
      output.WriteRawTag(8);
      output.WriteUInt32(Appid);
    }
    if (HasIcon) {
      output.WriteRawTag(18);
      output.WriteString(Icon);
    }
    if (HasData) {
      output.WriteRawTag(26);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAppid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
    }
    if (HasIcon) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (HasData) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSetTouchIconDataMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasAppid) {
      Appid = other.Appid;
    }
    if (other.HasIcon) {
      Icon = other.Icon;
    }
    if (other.HasData) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Appid = input.ReadUInt32();
          break;
        }
        case 18: {
          Icon = input.ReadString();
          break;
        }
        case 26: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CStreamDataLostMsg : pb::IMessage<CStreamDataLostMsg> {
  private static readonly pb::MessageParser<CStreamDataLostMsg> _parser = new pb::MessageParser<CStreamDataLostMsg>(() => new CStreamDataLostMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CStreamDataLostMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamDataLostMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamDataLostMsg(CStreamDataLostMsg other) : this() {
    packets_ = other.packets_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamDataLostMsg Clone() {
    return new CStreamDataLostMsg(this);
  }

  /// <summary>Field number for the "packets" field.</summary>
  public const int PacketsFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_packets_codec
      = pb::FieldCodec.ForUInt32(8);
  private readonly pbc::RepeatedField<uint> packets_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Packets {
    get { return packets_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CStreamDataLostMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CStreamDataLostMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!packets_.Equals(other.packets_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= packets_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    packets_.WriteTo(output, _repeated_packets_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += packets_.CalculateSize(_repeated_packets_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CStreamDataLostMsg other) {
    if (other == null) {
      return;
    }
    packets_.Add(other.packets_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          packets_.AddEntriesFrom(input, _repeated_packets_codec);
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CAudioFormat : pb::IMessage<CAudioFormat> {
  private static readonly pb::MessageParser<CAudioFormat> _parser = new pb::MessageParser<CAudioFormat>(() => new CAudioFormat());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CAudioFormat> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAudioFormat() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAudioFormat(CAudioFormat other) : this() {
    format_ = other.format_;
    frequency_ = other.frequency_;
    channels_ = other.channels_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAudioFormat Clone() {
    return new CAudioFormat(this);
  }

  /// <summary>Field number for the "format" field.</summary>
  public const int FormatFieldNumber = 1;
  /// <summary>Default value for the "format" field</summary>
  public const global::EAudioFormat FormatDefaultValue = global::EAudioFormat.KEaudioFormatNone;

  private global::EAudioFormat? format_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EAudioFormat Format {
    get { return format_ ?? FormatDefaultValue; }
    set {
      format_ = value;
    }
  }
  /// <summary>Gets whether the "format" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFormat {
    get { return format_ != null; }
  }
  /// <summary>Clears the value of the "format" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFormat() {
    format_ = null;
  }

  /// <summary>Field number for the "frequency" field.</summary>
  public const int FrequencyFieldNumber = 2;
  /// <summary>Default value for the "frequency" field</summary>
  public const uint FrequencyDefaultValue = 0;

  private uint? frequency_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Frequency {
    get { return frequency_ ?? FrequencyDefaultValue; }
    set {
      frequency_ = value;
    }
  }
  /// <summary>Gets whether the "frequency" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFrequency {
    get { return frequency_ != null; }
  }
  /// <summary>Clears the value of the "frequency" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFrequency() {
    frequency_ = null;
  }

  /// <summary>Field number for the "channels" field.</summary>
  public const int ChannelsFieldNumber = 3;
  /// <summary>Default value for the "channels" field</summary>
  public const uint ChannelsDefaultValue = 0;

  private uint? channels_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Channels {
    get { return channels_ ?? ChannelsDefaultValue; }
    set {
      channels_ = value;
    }
  }
  /// <summary>Gets whether the "channels" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasChannels {
    get { return channels_ != null; }
  }
  /// <summary>Clears the value of the "channels" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearChannels() {
    channels_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CAudioFormat);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CAudioFormat other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Format != other.Format) return false;
    if (Frequency != other.Frequency) return false;
    if (Channels != other.Channels) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFormat) hash ^= Format.GetHashCode();
    if (HasFrequency) hash ^= Frequency.GetHashCode();
    if (HasChannels) hash ^= Channels.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasFormat) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Format);
    }
    if (HasFrequency) {
      output.WriteRawTag(16);
      output.WriteUInt32(Frequency);
    }
    if (HasChannels) {
      output.WriteRawTag(24);
      output.WriteUInt32(Channels);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFormat) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
    }
    if (HasFrequency) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frequency);
    }
    if (HasChannels) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channels);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CAudioFormat other) {
    if (other == null) {
      return;
    }
    if (other.HasFormat) {
      Format = other.Format;
    }
    if (other.HasFrequency) {
      Frequency = other.Frequency;
    }
    if (other.HasChannels) {
      Channels = other.Channels;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          format_ = (global::EAudioFormat) input.ReadEnum();
          break;
        }
        case 16: {
          Frequency = input.ReadUInt32();
          break;
        }
        case 24: {
          Channels = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasFormat) {
      return false;
    }
    return true;
  }
}

public sealed partial class CVideoFormat : pb::IMessage<CVideoFormat> {
  private static readonly pb::MessageParser<CVideoFormat> _parser = new pb::MessageParser<CVideoFormat>(() => new CVideoFormat());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CVideoFormat> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVideoFormat() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVideoFormat(CVideoFormat other) : this() {
    format_ = other.format_;
    width_ = other.width_;
    height_ = other.height_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CVideoFormat Clone() {
    return new CVideoFormat(this);
  }

  /// <summary>Field number for the "format" field.</summary>
  public const int FormatFieldNumber = 1;
  /// <summary>Default value for the "format" field</summary>
  public const global::EVideoFormat FormatDefaultValue = global::EVideoFormat.KEvideoFormatNone;

  private global::EVideoFormat? format_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EVideoFormat Format {
    get { return format_ ?? FormatDefaultValue; }
    set {
      format_ = value;
    }
  }
  /// <summary>Gets whether the "format" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFormat {
    get { return format_ != null; }
  }
  /// <summary>Clears the value of the "format" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFormat() {
    format_ = null;
  }

  /// <summary>Field number for the "width" field.</summary>
  public const int WidthFieldNumber = 2;
  /// <summary>Default value for the "width" field</summary>
  public const uint WidthDefaultValue = 0;

  private uint? width_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Width {
    get { return width_ ?? WidthDefaultValue; }
    set {
      width_ = value;
    }
  }
  /// <summary>Gets whether the "width" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWidth {
    get { return width_ != null; }
  }
  /// <summary>Clears the value of the "width" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWidth() {
    width_ = null;
  }

  /// <summary>Field number for the "height" field.</summary>
  public const int HeightFieldNumber = 3;
  /// <summary>Default value for the "height" field</summary>
  public const uint HeightDefaultValue = 0;

  private uint? height_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Height {
    get { return height_ ?? HeightDefaultValue; }
    set {
      height_ = value;
    }
  }
  /// <summary>Gets whether the "height" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHeight {
    get { return height_ != null; }
  }
  /// <summary>Clears the value of the "height" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHeight() {
    height_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CVideoFormat);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CVideoFormat other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Format != other.Format) return false;
    if (Width != other.Width) return false;
    if (Height != other.Height) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFormat) hash ^= Format.GetHashCode();
    if (HasWidth) hash ^= Width.GetHashCode();
    if (HasHeight) hash ^= Height.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasFormat) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Format);
    }
    if (HasWidth) {
      output.WriteRawTag(16);
      output.WriteUInt32(Width);
    }
    if (HasHeight) {
      output.WriteRawTag(24);
      output.WriteUInt32(Height);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFormat) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
    }
    if (HasWidth) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
    }
    if (HasHeight) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CVideoFormat other) {
    if (other == null) {
      return;
    }
    if (other.HasFormat) {
      Format = other.Format;
    }
    if (other.HasWidth) {
      Width = other.Width;
    }
    if (other.HasHeight) {
      Height = other.Height;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          format_ = (global::EVideoFormat) input.ReadEnum();
          break;
        }
        case 16: {
          Width = input.ReadUInt32();
          break;
        }
        case 24: {
          Height = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasFormat) {
      return false;
    }
    return true;
  }
}

public sealed partial class CFrameEvent : pb::IMessage<CFrameEvent> {
  private static readonly pb::MessageParser<CFrameEvent> _parser = new pb::MessageParser<CFrameEvent>(() => new CFrameEvent());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CFrameEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CFrameEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CFrameEvent(CFrameEvent other) : this() {
    eventId_ = other.eventId_;
    timestamp_ = other.timestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CFrameEvent Clone() {
    return new CFrameEvent(this);
  }

  /// <summary>Field number for the "event_id" field.</summary>
  public const int EventIdFieldNumber = 1;
  /// <summary>Default value for the "event_id" field</summary>
  public const global::EStreamFrameEvent EventIdDefaultValue = global::EStreamFrameEvent.KEstreamInputEventStart;

  private global::EStreamFrameEvent? eventId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamFrameEvent EventId {
    get { return eventId_ ?? EventIdDefaultValue; }
    set {
      eventId_ = value;
    }
  }
  /// <summary>Gets whether the "event_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEventId {
    get { return eventId_ != null; }
  }
  /// <summary>Clears the value of the "event_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEventId() {
    eventId_ = null;
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 2;
  /// <summary>Default value for the "timestamp" field</summary>
  public const uint TimestampDefaultValue = 0;

  private uint? timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Timestamp {
    get { return timestamp_ ?? TimestampDefaultValue; }
    set {
      timestamp_ = value;
    }
  }
  /// <summary>Gets whether the "timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTimestamp {
    get { return timestamp_ != null; }
  }
  /// <summary>Clears the value of the "timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTimestamp() {
    timestamp_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CFrameEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CFrameEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EventId != other.EventId) return false;
    if (Timestamp != other.Timestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEventId) hash ^= EventId.GetHashCode();
    if (HasTimestamp) hash ^= Timestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasEventId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) EventId);
    }
    if (HasTimestamp) {
      output.WriteRawTag(16);
      output.WriteUInt32(Timestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEventId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
    }
    if (HasTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CFrameEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasEventId) {
      EventId = other.EventId;
    }
    if (other.HasTimestamp) {
      Timestamp = other.Timestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          eventId_ = (global::EStreamFrameEvent) input.ReadEnum();
          break;
        }
        case 16: {
          Timestamp = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasEventId) {
      return false;
    }
    if (!HasTimestamp) {
      return false;
    }
    return true;
  }
}

public sealed partial class CFrameStats : pb::IMessage<CFrameStats> {
  private static readonly pb::MessageParser<CFrameStats> _parser = new pb::MessageParser<CFrameStats>(() => new CFrameStats());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CFrameStats> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CFrameStats() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CFrameStats(CFrameStats other) : this() {
    frameId_ = other.frameId_;
    inputMark_ = other.inputMark_;
    events_ = other.events_.Clone();
    result_ = other.result_;
    frameStartDelta_ = other.frameStartDelta_;
    frameDisplayDelta_ = other.frameDisplayDelta_;
    pingTime_ = other.pingTime_;
    serverBitrate_ = other.serverBitrate_;
    clientBitrate_ = other.clientBitrate_;
    linkBandwidth_ = other.linkBandwidth_;
    packetLoss_ = other.packetLoss_;
    frameSize_ = other.frameSize_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CFrameStats Clone() {
    return new CFrameStats(this);
  }

  /// <summary>Field number for the "frame_id" field.</summary>
  public const int FrameIdFieldNumber = 1;
  /// <summary>Default value for the "frame_id" field</summary>
  public const uint FrameIdDefaultValue = 0;

  private uint? frameId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FrameId {
    get { return frameId_ ?? FrameIdDefaultValue; }
    set {
      frameId_ = value;
    }
  }
  /// <summary>Gets whether the "frame_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFrameId {
    get { return frameId_ != null; }
  }
  /// <summary>Clears the value of the "frame_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFrameId() {
    frameId_ = null;
  }

  /// <summary>Field number for the "input_mark" field.</summary>
  public const int InputMarkFieldNumber = 2;
  /// <summary>Default value for the "input_mark" field</summary>
  public const uint InputMarkDefaultValue = 0;

  private uint? inputMark_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InputMark {
    get { return inputMark_ ?? InputMarkDefaultValue; }
    set {
      inputMark_ = value;
    }
  }
  /// <summary>Gets whether the "input_mark" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInputMark {
    get { return inputMark_ != null; }
  }
  /// <summary>Clears the value of the "input_mark" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInputMark() {
    inputMark_ = null;
  }

  /// <summary>Field number for the "events" field.</summary>
  public const int EventsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::CFrameEvent> _repeated_events_codec
      = pb::FieldCodec.ForMessage(26, global::CFrameEvent.Parser);
  private readonly pbc::RepeatedField<global::CFrameEvent> events_ = new pbc::RepeatedField<global::CFrameEvent>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CFrameEvent> Events {
    get { return events_; }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 4;
  /// <summary>Default value for the "result" field</summary>
  public const global::EStreamFrameResult ResultDefaultValue = global::EStreamFrameResult.KEstreamFrameResultPending;

  private global::EStreamFrameResult? result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamFrameResult Result {
    get { return result_ ?? ResultDefaultValue; }
    set {
      result_ = value;
    }
  }
  /// <summary>Gets whether the "result" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResult {
    get { return result_ != null; }
  }
  /// <summary>Clears the value of the "result" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResult() {
    result_ = null;
  }

  /// <summary>Field number for the "frame_start_delta" field.</summary>
  public const int FrameStartDeltaFieldNumber = 5;
  /// <summary>Default value for the "frame_start_delta" field</summary>
  public const float FrameStartDeltaDefaultValue = 0F;

  private float? frameStartDelta_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float FrameStartDelta {
    get { return frameStartDelta_ ?? FrameStartDeltaDefaultValue; }
    set {
      frameStartDelta_ = value;
    }
  }
  /// <summary>Gets whether the "frame_start_delta" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFrameStartDelta {
    get { return frameStartDelta_ != null; }
  }
  /// <summary>Clears the value of the "frame_start_delta" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFrameStartDelta() {
    frameStartDelta_ = null;
  }

  /// <summary>Field number for the "frame_display_delta" field.</summary>
  public const int FrameDisplayDeltaFieldNumber = 6;
  /// <summary>Default value for the "frame_display_delta" field</summary>
  public const float FrameDisplayDeltaDefaultValue = 0F;

  private float? frameDisplayDelta_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float FrameDisplayDelta {
    get { return frameDisplayDelta_ ?? FrameDisplayDeltaDefaultValue; }
    set {
      frameDisplayDelta_ = value;
    }
  }
  /// <summary>Gets whether the "frame_display_delta" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFrameDisplayDelta {
    get { return frameDisplayDelta_ != null; }
  }
  /// <summary>Clears the value of the "frame_display_delta" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFrameDisplayDelta() {
    frameDisplayDelta_ = null;
  }

  /// <summary>Field number for the "ping_time" field.</summary>
  public const int PingTimeFieldNumber = 7;
  /// <summary>Default value for the "ping_time" field</summary>
  public const float PingTimeDefaultValue = 0F;

  private float? pingTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PingTime {
    get { return pingTime_ ?? PingTimeDefaultValue; }
    set {
      pingTime_ = value;
    }
  }
  /// <summary>Gets whether the "ping_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPingTime {
    get { return pingTime_ != null; }
  }
  /// <summary>Clears the value of the "ping_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPingTime() {
    pingTime_ = null;
  }

  /// <summary>Field number for the "server_bitrate" field.</summary>
  public const int ServerBitrateFieldNumber = 8;
  /// <summary>Default value for the "server_bitrate" field</summary>
  public const float ServerBitrateDefaultValue = 0F;

  private float? serverBitrate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ServerBitrate {
    get { return serverBitrate_ ?? ServerBitrateDefaultValue; }
    set {
      serverBitrate_ = value;
    }
  }
  /// <summary>Gets whether the "server_bitrate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerBitrate {
    get { return serverBitrate_ != null; }
  }
  /// <summary>Clears the value of the "server_bitrate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerBitrate() {
    serverBitrate_ = null;
  }

  /// <summary>Field number for the "client_bitrate" field.</summary>
  public const int ClientBitrateFieldNumber = 9;
  /// <summary>Default value for the "client_bitrate" field</summary>
  public const float ClientBitrateDefaultValue = 0F;

  private float? clientBitrate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ClientBitrate {
    get { return clientBitrate_ ?? ClientBitrateDefaultValue; }
    set {
      clientBitrate_ = value;
    }
  }
  /// <summary>Gets whether the "client_bitrate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientBitrate {
    get { return clientBitrate_ != null; }
  }
  /// <summary>Clears the value of the "client_bitrate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientBitrate() {
    clientBitrate_ = null;
  }

  /// <summary>Field number for the "link_bandwidth" field.</summary>
  public const int LinkBandwidthFieldNumber = 10;
  /// <summary>Default value for the "link_bandwidth" field</summary>
  public const float LinkBandwidthDefaultValue = 0F;

  private float? linkBandwidth_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float LinkBandwidth {
    get { return linkBandwidth_ ?? LinkBandwidthDefaultValue; }
    set {
      linkBandwidth_ = value;
    }
  }
  /// <summary>Gets whether the "link_bandwidth" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLinkBandwidth {
    get { return linkBandwidth_ != null; }
  }
  /// <summary>Clears the value of the "link_bandwidth" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLinkBandwidth() {
    linkBandwidth_ = null;
  }

  /// <summary>Field number for the "packet_loss" field.</summary>
  public const int PacketLossFieldNumber = 11;
  /// <summary>Default value for the "packet_loss" field</summary>
  public const float PacketLossDefaultValue = 0F;

  private float? packetLoss_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PacketLoss {
    get { return packetLoss_ ?? PacketLossDefaultValue; }
    set {
      packetLoss_ = value;
    }
  }
  /// <summary>Gets whether the "packet_loss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPacketLoss {
    get { return packetLoss_ != null; }
  }
  /// <summary>Clears the value of the "packet_loss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPacketLoss() {
    packetLoss_ = null;
  }

  /// <summary>Field number for the "frame_size" field.</summary>
  public const int FrameSizeFieldNumber = 12;
  /// <summary>Default value for the "frame_size" field</summary>
  public const uint FrameSizeDefaultValue = 0;

  private uint? frameSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FrameSize {
    get { return frameSize_ ?? FrameSizeDefaultValue; }
    set {
      frameSize_ = value;
    }
  }
  /// <summary>Gets whether the "frame_size" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFrameSize {
    get { return frameSize_ != null; }
  }
  /// <summary>Clears the value of the "frame_size" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFrameSize() {
    frameSize_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CFrameStats);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CFrameStats other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FrameId != other.FrameId) return false;
    if (InputMark != other.InputMark) return false;
    if(!events_.Equals(other.events_)) return false;
    if (Result != other.Result) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FrameStartDelta, other.FrameStartDelta)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FrameDisplayDelta, other.FrameDisplayDelta)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PingTime, other.PingTime)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ServerBitrate, other.ServerBitrate)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ClientBitrate, other.ClientBitrate)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LinkBandwidth, other.LinkBandwidth)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PacketLoss, other.PacketLoss)) return false;
    if (FrameSize != other.FrameSize) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFrameId) hash ^= FrameId.GetHashCode();
    if (HasInputMark) hash ^= InputMark.GetHashCode();
    hash ^= events_.GetHashCode();
    if (HasResult) hash ^= Result.GetHashCode();
    if (HasFrameStartDelta) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FrameStartDelta);
    if (HasFrameDisplayDelta) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FrameDisplayDelta);
    if (HasPingTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PingTime);
    if (HasServerBitrate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ServerBitrate);
    if (HasClientBitrate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ClientBitrate);
    if (HasLinkBandwidth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LinkBandwidth);
    if (HasPacketLoss) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PacketLoss);
    if (HasFrameSize) hash ^= FrameSize.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasFrameId) {
      output.WriteRawTag(8);
      output.WriteUInt32(FrameId);
    }
    if (HasInputMark) {
      output.WriteRawTag(16);
      output.WriteUInt32(InputMark);
    }
    events_.WriteTo(output, _repeated_events_codec);
    if (HasResult) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Result);
    }
    if (HasFrameStartDelta) {
      output.WriteRawTag(45);
      output.WriteFloat(FrameStartDelta);
    }
    if (HasFrameDisplayDelta) {
      output.WriteRawTag(53);
      output.WriteFloat(FrameDisplayDelta);
    }
    if (HasPingTime) {
      output.WriteRawTag(61);
      output.WriteFloat(PingTime);
    }
    if (HasServerBitrate) {
      output.WriteRawTag(69);
      output.WriteFloat(ServerBitrate);
    }
    if (HasClientBitrate) {
      output.WriteRawTag(77);
      output.WriteFloat(ClientBitrate);
    }
    if (HasLinkBandwidth) {
      output.WriteRawTag(85);
      output.WriteFloat(LinkBandwidth);
    }
    if (HasPacketLoss) {
      output.WriteRawTag(93);
      output.WriteFloat(PacketLoss);
    }
    if (HasFrameSize) {
      output.WriteRawTag(96);
      output.WriteUInt32(FrameSize);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFrameId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameId);
    }
    if (HasInputMark) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputMark);
    }
    size += events_.CalculateSize(_repeated_events_codec);
    if (HasResult) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
    }
    if (HasFrameStartDelta) {
      size += 1 + 4;
    }
    if (HasFrameDisplayDelta) {
      size += 1 + 4;
    }
    if (HasPingTime) {
      size += 1 + 4;
    }
    if (HasServerBitrate) {
      size += 1 + 4;
    }
    if (HasClientBitrate) {
      size += 1 + 4;
    }
    if (HasLinkBandwidth) {
      size += 1 + 4;
    }
    if (HasPacketLoss) {
      size += 1 + 4;
    }
    if (HasFrameSize) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameSize);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CFrameStats other) {
    if (other == null) {
      return;
    }
    if (other.HasFrameId) {
      FrameId = other.FrameId;
    }
    if (other.HasInputMark) {
      InputMark = other.InputMark;
    }
    events_.Add(other.events_);
    if (other.HasResult) {
      Result = other.Result;
    }
    if (other.HasFrameStartDelta) {
      FrameStartDelta = other.FrameStartDelta;
    }
    if (other.HasFrameDisplayDelta) {
      FrameDisplayDelta = other.FrameDisplayDelta;
    }
    if (other.HasPingTime) {
      PingTime = other.PingTime;
    }
    if (other.HasServerBitrate) {
      ServerBitrate = other.ServerBitrate;
    }
    if (other.HasClientBitrate) {
      ClientBitrate = other.ClientBitrate;
    }
    if (other.HasLinkBandwidth) {
      LinkBandwidth = other.LinkBandwidth;
    }
    if (other.HasPacketLoss) {
      PacketLoss = other.PacketLoss;
    }
    if (other.HasFrameSize) {
      FrameSize = other.FrameSize;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FrameId = input.ReadUInt32();
          break;
        }
        case 16: {
          InputMark = input.ReadUInt32();
          break;
        }
        case 26: {
          events_.AddEntriesFrom(input, _repeated_events_codec);
          break;
        }
        case 32: {
          result_ = (global::EStreamFrameResult) input.ReadEnum();
          break;
        }
        case 45: {
          FrameStartDelta = input.ReadFloat();
          break;
        }
        case 53: {
          FrameDisplayDelta = input.ReadFloat();
          break;
        }
        case 61: {
          PingTime = input.ReadFloat();
          break;
        }
        case 69: {
          ServerBitrate = input.ReadFloat();
          break;
        }
        case 77: {
          ClientBitrate = input.ReadFloat();
          break;
        }
        case 85: {
          LinkBandwidth = input.ReadFloat();
          break;
        }
        case 93: {
          PacketLoss = input.ReadFloat();
          break;
        }
        case 96: {
          FrameSize = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasFrameId) {
      return false;
    }
    if (!events_.IsInitialized()) return false;
    if (!HasResult) {
      return false;
    }
    return true;
  }
}

public sealed partial class CFrameStatAccumulatedValue : pb::IMessage<CFrameStatAccumulatedValue> {
  private static readonly pb::MessageParser<CFrameStatAccumulatedValue> _parser = new pb::MessageParser<CFrameStatAccumulatedValue>(() => new CFrameStatAccumulatedValue());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CFrameStatAccumulatedValue> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CFrameStatAccumulatedValue() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CFrameStatAccumulatedValue(CFrameStatAccumulatedValue other) : this() {
    statType_ = other.statType_;
    count_ = other.count_;
    average_ = other.average_;
    stddev_ = other.stddev_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CFrameStatAccumulatedValue Clone() {
    return new CFrameStatAccumulatedValue(this);
  }

  /// <summary>Field number for the "stat_type" field.</summary>
  public const int StatTypeFieldNumber = 1;
  /// <summary>Default value for the "stat_type" field</summary>
  public const global::EFrameAccumulatedStat StatTypeDefaultValue = global::EFrameAccumulatedStat.KEframeStatFps;

  private global::EFrameAccumulatedStat? statType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EFrameAccumulatedStat StatType {
    get { return statType_ ?? StatTypeDefaultValue; }
    set {
      statType_ = value;
    }
  }
  /// <summary>Gets whether the "stat_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStatType {
    get { return statType_ != null; }
  }
  /// <summary>Clears the value of the "stat_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStatType() {
    statType_ = null;
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  /// <summary>Default value for the "count" field</summary>
  public const int CountDefaultValue = 0;

  private int? count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_ ?? CountDefaultValue; }
    set {
      count_ = value;
    }
  }
  /// <summary>Gets whether the "count" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCount {
    get { return count_ != null; }
  }
  /// <summary>Clears the value of the "count" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCount() {
    count_ = null;
  }

  /// <summary>Field number for the "average" field.</summary>
  public const int AverageFieldNumber = 3;
  /// <summary>Default value for the "average" field</summary>
  public const float AverageDefaultValue = 0F;

  private float? average_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Average {
    get { return average_ ?? AverageDefaultValue; }
    set {
      average_ = value;
    }
  }
  /// <summary>Gets whether the "average" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAverage {
    get { return average_ != null; }
  }
  /// <summary>Clears the value of the "average" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAverage() {
    average_ = null;
  }

  /// <summary>Field number for the "stddev" field.</summary>
  public const int StddevFieldNumber = 4;
  /// <summary>Default value for the "stddev" field</summary>
  public const float StddevDefaultValue = 0F;

  private float? stddev_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Stddev {
    get { return stddev_ ?? StddevDefaultValue; }
    set {
      stddev_ = value;
    }
  }
  /// <summary>Gets whether the "stddev" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStddev {
    get { return stddev_ != null; }
  }
  /// <summary>Clears the value of the "stddev" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStddev() {
    stddev_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CFrameStatAccumulatedValue);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CFrameStatAccumulatedValue other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StatType != other.StatType) return false;
    if (Count != other.Count) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Average, other.Average)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Stddev, other.Stddev)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasStatType) hash ^= StatType.GetHashCode();
    if (HasCount) hash ^= Count.GetHashCode();
    if (HasAverage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Average);
    if (HasStddev) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Stddev);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasStatType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) StatType);
    }
    if (HasCount) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (HasAverage) {
      output.WriteRawTag(29);
      output.WriteFloat(Average);
    }
    if (HasStddev) {
      output.WriteRawTag(37);
      output.WriteFloat(Stddev);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasStatType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatType);
    }
    if (HasCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (HasAverage) {
      size += 1 + 4;
    }
    if (HasStddev) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CFrameStatAccumulatedValue other) {
    if (other == null) {
      return;
    }
    if (other.HasStatType) {
      StatType = other.StatType;
    }
    if (other.HasCount) {
      Count = other.Count;
    }
    if (other.HasAverage) {
      Average = other.Average;
    }
    if (other.HasStddev) {
      Stddev = other.Stddev;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          statType_ = (global::EFrameAccumulatedStat) input.ReadEnum();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
        case 29: {
          Average = input.ReadFloat();
          break;
        }
        case 37: {
          Stddev = input.ReadFloat();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasStatType) {
      return false;
    }
    if (!HasCount) {
      return false;
    }
    if (!HasAverage) {
      return false;
    }
    return true;
  }
}

public sealed partial class CFrameStatsListMsg : pb::IMessage<CFrameStatsListMsg> {
  private static readonly pb::MessageParser<CFrameStatsListMsg> _parser = new pb::MessageParser<CFrameStatsListMsg>(() => new CFrameStatsListMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CFrameStatsListMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[67]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CFrameStatsListMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CFrameStatsListMsg(CFrameStatsListMsg other) : this() {
    dataType_ = other.dataType_;
    stats_ = other.stats_.Clone();
    accumulatedStats_ = other.accumulatedStats_.Clone();
    latestFrameId_ = other.latestFrameId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CFrameStatsListMsg Clone() {
    return new CFrameStatsListMsg(this);
  }

  /// <summary>Field number for the "data_type" field.</summary>
  public const int DataTypeFieldNumber = 1;
  /// <summary>Default value for the "data_type" field</summary>
  public const global::EStreamingDataType DataTypeDefaultValue = global::EStreamingDataType.KEstreamingAudioData;

  private global::EStreamingDataType? dataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamingDataType DataType {
    get { return dataType_ ?? DataTypeDefaultValue; }
    set {
      dataType_ = value;
    }
  }
  /// <summary>Gets whether the "data_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataType {
    get { return dataType_ != null; }
  }
  /// <summary>Clears the value of the "data_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataType() {
    dataType_ = null;
  }

  /// <summary>Field number for the "stats" field.</summary>
  public const int StatsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CFrameStats> _repeated_stats_codec
      = pb::FieldCodec.ForMessage(18, global::CFrameStats.Parser);
  private readonly pbc::RepeatedField<global::CFrameStats> stats_ = new pbc::RepeatedField<global::CFrameStats>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CFrameStats> Stats {
    get { return stats_; }
  }

  /// <summary>Field number for the "accumulated_stats" field.</summary>
  public const int AccumulatedStatsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::CFrameStatAccumulatedValue> _repeated_accumulatedStats_codec
      = pb::FieldCodec.ForMessage(26, global::CFrameStatAccumulatedValue.Parser);
  private readonly pbc::RepeatedField<global::CFrameStatAccumulatedValue> accumulatedStats_ = new pbc::RepeatedField<global::CFrameStatAccumulatedValue>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CFrameStatAccumulatedValue> AccumulatedStats {
    get { return accumulatedStats_; }
  }

  /// <summary>Field number for the "latest_frame_id" field.</summary>
  public const int LatestFrameIdFieldNumber = 4;
  /// <summary>Default value for the "latest_frame_id" field</summary>
  public const int LatestFrameIdDefaultValue = 0;

  private int? latestFrameId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LatestFrameId {
    get { return latestFrameId_ ?? LatestFrameIdDefaultValue; }
    set {
      latestFrameId_ = value;
    }
  }
  /// <summary>Gets whether the "latest_frame_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLatestFrameId {
    get { return latestFrameId_ != null; }
  }
  /// <summary>Clears the value of the "latest_frame_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLatestFrameId() {
    latestFrameId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CFrameStatsListMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CFrameStatsListMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DataType != other.DataType) return false;
    if(!stats_.Equals(other.stats_)) return false;
    if(!accumulatedStats_.Equals(other.accumulatedStats_)) return false;
    if (LatestFrameId != other.LatestFrameId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDataType) hash ^= DataType.GetHashCode();
    hash ^= stats_.GetHashCode();
    hash ^= accumulatedStats_.GetHashCode();
    if (HasLatestFrameId) hash ^= LatestFrameId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasDataType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) DataType);
    }
    stats_.WriteTo(output, _repeated_stats_codec);
    accumulatedStats_.WriteTo(output, _repeated_accumulatedStats_codec);
    if (HasLatestFrameId) {
      output.WriteRawTag(32);
      output.WriteInt32(LatestFrameId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDataType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
    }
    size += stats_.CalculateSize(_repeated_stats_codec);
    size += accumulatedStats_.CalculateSize(_repeated_accumulatedStats_codec);
    if (HasLatestFrameId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LatestFrameId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CFrameStatsListMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasDataType) {
      DataType = other.DataType;
    }
    stats_.Add(other.stats_);
    accumulatedStats_.Add(other.accumulatedStats_);
    if (other.HasLatestFrameId) {
      LatestFrameId = other.LatestFrameId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          dataType_ = (global::EStreamingDataType) input.ReadEnum();
          break;
        }
        case 18: {
          stats_.AddEntriesFrom(input, _repeated_stats_codec);
          break;
        }
        case 26: {
          accumulatedStats_.AddEntriesFrom(input, _repeated_accumulatedStats_codec);
          break;
        }
        case 32: {
          LatestFrameId = input.ReadInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasDataType) {
      return false;
    }
    if (!stats_.IsInitialized()) return false;
    if (!accumulatedStats_.IsInitialized()) return false;
    if (!HasLatestFrameId) {
      return false;
    }
    return true;
  }
}

public sealed partial class CStreamingSessionStats : pb::IMessage<CStreamingSessionStats> {
  private static readonly pb::MessageParser<CStreamingSessionStats> _parser = new pb::MessageParser<CStreamingSessionStats>(() => new CStreamingSessionStats());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CStreamingSessionStats> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[68]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingSessionStats() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingSessionStats(CStreamingSessionStats other) : this() {
    frameLossPercentage_ = other.frameLossPercentage_;
    averageNetworkTimeMs_ = other.averageNetworkTimeMs_;
    stddevNetworkTimeMs_ = other.stddevNetworkTimeMs_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CStreamingSessionStats Clone() {
    return new CStreamingSessionStats(this);
  }

  /// <summary>Field number for the "frame_loss_percentage" field.</summary>
  public const int FrameLossPercentageFieldNumber = 1;
  /// <summary>Default value for the "frame_loss_percentage" field</summary>
  public const float FrameLossPercentageDefaultValue = 0F;

  private float? frameLossPercentage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float FrameLossPercentage {
    get { return frameLossPercentage_ ?? FrameLossPercentageDefaultValue; }
    set {
      frameLossPercentage_ = value;
    }
  }
  /// <summary>Gets whether the "frame_loss_percentage" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFrameLossPercentage {
    get { return frameLossPercentage_ != null; }
  }
  /// <summary>Clears the value of the "frame_loss_percentage" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFrameLossPercentage() {
    frameLossPercentage_ = null;
  }

  /// <summary>Field number for the "average_network_time_ms" field.</summary>
  public const int AverageNetworkTimeMsFieldNumber = 2;
  /// <summary>Default value for the "average_network_time_ms" field</summary>
  public const float AverageNetworkTimeMsDefaultValue = 0F;

  private float? averageNetworkTimeMs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float AverageNetworkTimeMs {
    get { return averageNetworkTimeMs_ ?? AverageNetworkTimeMsDefaultValue; }
    set {
      averageNetworkTimeMs_ = value;
    }
  }
  /// <summary>Gets whether the "average_network_time_ms" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAverageNetworkTimeMs {
    get { return averageNetworkTimeMs_ != null; }
  }
  /// <summary>Clears the value of the "average_network_time_ms" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAverageNetworkTimeMs() {
    averageNetworkTimeMs_ = null;
  }

  /// <summary>Field number for the "stddev_network_time_ms" field.</summary>
  public const int StddevNetworkTimeMsFieldNumber = 3;
  /// <summary>Default value for the "stddev_network_time_ms" field</summary>
  public const float StddevNetworkTimeMsDefaultValue = 0F;

  private float? stddevNetworkTimeMs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float StddevNetworkTimeMs {
    get { return stddevNetworkTimeMs_ ?? StddevNetworkTimeMsDefaultValue; }
    set {
      stddevNetworkTimeMs_ = value;
    }
  }
  /// <summary>Gets whether the "stddev_network_time_ms" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStddevNetworkTimeMs {
    get { return stddevNetworkTimeMs_ != null; }
  }
  /// <summary>Clears the value of the "stddev_network_time_ms" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStddevNetworkTimeMs() {
    stddevNetworkTimeMs_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CStreamingSessionStats);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CStreamingSessionStats other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FrameLossPercentage, other.FrameLossPercentage)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AverageNetworkTimeMs, other.AverageNetworkTimeMs)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StddevNetworkTimeMs, other.StddevNetworkTimeMs)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFrameLossPercentage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FrameLossPercentage);
    if (HasAverageNetworkTimeMs) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AverageNetworkTimeMs);
    if (HasStddevNetworkTimeMs) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StddevNetworkTimeMs);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasFrameLossPercentage) {
      output.WriteRawTag(13);
      output.WriteFloat(FrameLossPercentage);
    }
    if (HasAverageNetworkTimeMs) {
      output.WriteRawTag(21);
      output.WriteFloat(AverageNetworkTimeMs);
    }
    if (HasStddevNetworkTimeMs) {
      output.WriteRawTag(29);
      output.WriteFloat(StddevNetworkTimeMs);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFrameLossPercentage) {
      size += 1 + 4;
    }
    if (HasAverageNetworkTimeMs) {
      size += 1 + 4;
    }
    if (HasStddevNetworkTimeMs) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CStreamingSessionStats other) {
    if (other == null) {
      return;
    }
    if (other.HasFrameLossPercentage) {
      FrameLossPercentage = other.FrameLossPercentage;
    }
    if (other.HasAverageNetworkTimeMs) {
      AverageNetworkTimeMs = other.AverageNetworkTimeMs;
    }
    if (other.HasStddevNetworkTimeMs) {
      StddevNetworkTimeMs = other.StddevNetworkTimeMs;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          FrameLossPercentage = input.ReadFloat();
          break;
        }
        case 21: {
          AverageNetworkTimeMs = input.ReadFloat();
          break;
        }
        case 29: {
          StddevNetworkTimeMs = input.ReadFloat();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CDebugDumpMsg : pb::IMessage<CDebugDumpMsg> {
  private static readonly pb::MessageParser<CDebugDumpMsg> _parser = new pb::MessageParser<CDebugDumpMsg>(() => new CDebugDumpMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDebugDumpMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[69]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDebugDumpMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDebugDumpMsg(CDebugDumpMsg other) : this() {
    screenshot_ = other.screenshot_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDebugDumpMsg Clone() {
    return new CDebugDumpMsg(this);
  }

  /// <summary>Field number for the "screenshot" field.</summary>
  public const int ScreenshotFieldNumber = 1;
  /// <summary>Default value for the "screenshot" field</summary>
  public readonly static pb::ByteString ScreenshotDefaultValue = pb::ByteString.Empty;

  private pb::ByteString screenshot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Screenshot {
    get { return screenshot_ ?? ScreenshotDefaultValue; }
    set {
      screenshot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "screenshot" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasScreenshot {
    get { return screenshot_ != null; }
  }
  /// <summary>Clears the value of the "screenshot" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearScreenshot() {
    screenshot_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDebugDumpMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDebugDumpMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Screenshot != other.Screenshot) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasScreenshot) hash ^= Screenshot.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasScreenshot) {
      output.WriteRawTag(10);
      output.WriteBytes(Screenshot);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasScreenshot) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Screenshot);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDebugDumpMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasScreenshot) {
      Screenshot = other.Screenshot;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Screenshot = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CLogMsg : pb::IMessage<CLogMsg> {
  private static readonly pb::MessageParser<CLogMsg> _parser = new pb::MessageParser<CLogMsg>(() => new CLogMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CLogMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[70]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLogMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLogMsg(CLogMsg other) : this() {
    type_ = other.type_;
    message_ = other.message_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLogMsg Clone() {
    return new CLogMsg(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  /// <summary>Default value for the "type" field</summary>
  public const int TypeDefaultValue = 0;

  private int? type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_ ?? TypeDefaultValue; }
    set {
      type_ = value;
    }
  }
  /// <summary>Gets whether the "type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasType {
    get { return type_ != null; }
  }
  /// <summary>Clears the value of the "type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearType() {
    type_ = null;
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 2;
  /// <summary>Default value for the "message" field</summary>
  public const string MessageDefaultValue = "";

  private string message_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_ ?? MessageDefaultValue; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMessage {
    get { return message_ != null; }
  }
  /// <summary>Clears the value of the "message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMessage() {
    message_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CLogMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CLogMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Message != other.Message) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasType) hash ^= Type.GetHashCode();
    if (HasMessage) hash ^= Message.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasType) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (HasMessage) {
      output.WriteRawTag(18);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (HasMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CLogMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasType) {
      Type = other.Type;
    }
    if (other.HasMessage) {
      Message = other.Message;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 18: {
          Message = input.ReadString();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CLogUploadMsg : pb::IMessage<CLogUploadMsg> {
  private static readonly pb::MessageParser<CLogUploadMsg> _parser = new pb::MessageParser<CLogUploadMsg>(() => new CLogUploadMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CLogUploadMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[71]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLogUploadMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLogUploadMsg(CLogUploadMsg other) : this() {
    type_ = other.type_;
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLogUploadMsg Clone() {
    return new CLogUploadMsg(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  /// <summary>Default value for the "type" field</summary>
  public const global::ELogFileType TypeDefaultValue = global::ELogFileType.KElogFileSystemBoot;

  private global::ELogFileType? type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ELogFileType Type {
    get { return type_ ?? TypeDefaultValue; }
    set {
      type_ = value;
    }
  }
  /// <summary>Gets whether the "type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasType {
    get { return type_ != null; }
  }
  /// <summary>Clears the value of the "type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearType() {
    type_ = null;
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 3;
  /// <summary>Default value for the "data" field</summary>
  public readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString data_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_ ?? DataDefaultValue; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "data" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasData {
    get { return data_ != null; }
  }
  /// <summary>Clears the value of the "data" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearData() {
    data_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CLogUploadMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CLogUploadMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasType) hash ^= Type.GetHashCode();
    if (HasData) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (HasData) {
      output.WriteRawTag(26);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (HasData) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CLogUploadMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasType) {
      Type = other.Type;
    }
    if (other.HasData) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          type_ = (global::ELogFileType) input.ReadEnum();
          break;
        }
        case 26: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CTransportSignalMsg : pb::IMessage<CTransportSignalMsg> {
  private static readonly pb::MessageParser<CTransportSignalMsg> _parser = new pb::MessageParser<CTransportSignalMsg>(() => new CTransportSignalMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CTransportSignalMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StreamReflection.Descriptor.MessageTypes[72]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CTransportSignalMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CTransportSignalMsg(CTransportSignalMsg other) : this() {
    Webrtc = other.HasWebrtc ? other.Webrtc.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CTransportSignalMsg Clone() {
    return new CTransportSignalMsg(this);
  }

  /// <summary>Field number for the "webrtc" field.</summary>
  public const int WebrtcFieldNumber = 1;
  private global::CTransportSignalMsg.Types.WebRTCMessage webrtc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CTransportSignalMsg.Types.WebRTCMessage Webrtc {
    get { return webrtc_; }
    set {
      webrtc_ = value;
    }
  }
  /// <summary>Gets whether the webrtc field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWebrtc {
    get { return webrtc_ != null; }
  }
  /// <summary>Clears the value of the webrtc field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWebrtc() {
    webrtc_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CTransportSignalMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CTransportSignalMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Webrtc, other.Webrtc)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasWebrtc) hash ^= Webrtc.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasWebrtc) {
      output.WriteRawTag(10);
      output.WriteMessage(Webrtc);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasWebrtc) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Webrtc);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CTransportSignalMsg other) {
    if (other == null) {
      return;
    }
    if (other.HasWebrtc) {
      if (!HasWebrtc) {
        webrtc_ = new global::CTransportSignalMsg.Types.WebRTCMessage();
      }
      Webrtc.MergeFrom(other.Webrtc);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (!HasWebrtc) {
            webrtc_ = new global::CTransportSignalMsg.Types.WebRTCMessage();
          }
          input.ReadMessage(webrtc_);
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (HasWebrtc) {
      if (!Webrtc.IsInitialized()) return false;
    }
    return true;
  }
  #region Nested types
  /// <summary>Container for nested types declared in the CTransportSignalMsg message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class WebRTCMessage : pb::IMessage<WebRTCMessage> {
      private static readonly pb::MessageParser<WebRTCMessage> _parser = new pb::MessageParser<WebRTCMessage>(() => new WebRTCMessage());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<WebRTCMessage> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CTransportSignalMsg.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public WebRTCMessage() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public WebRTCMessage(WebRTCMessage other) : this() {
        switch (other.MsgCase) {
          case MsgOneofCase.Greeting:
            Greeting = other.Greeting;
            break;
          case MsgOneofCase.Offer:
            Offer = other.Offer;
            break;
          case MsgOneofCase.Answer:
            Answer = other.Answer;
            break;
          case MsgOneofCase.Candidate:
            Candidate = other.Candidate.Clone();
            break;
        }

        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public WebRTCMessage Clone() {
        return new WebRTCMessage(this);
      }

      /// <summary>Field number for the "greeting" field.</summary>
      public const int GreetingFieldNumber = 1;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Greeting {
        get { return HasGreeting ? (bool) msg_ : false; }
        set {
          msg_ = value;
          msgCase_ = MsgOneofCase.Greeting;
        }
      }
      /// <summary>Gets whether the "greeting" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasGreeting {
        get { return msgCase_ == MsgOneofCase.Greeting; }
      }
      /// <summary> Clears the value of the oneof if it's currently set to "greeting" </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearGreeting() {
        if (HasGreeting) {
          ClearMsg();
        }
      }

      /// <summary>Field number for the "offer" field.</summary>
      public const int OfferFieldNumber = 2;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Offer {
        get { return HasOffer ? (string) msg_ : ""; }
        set {
          msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          msgCase_ = MsgOneofCase.Offer;
        }
      }
      /// <summary>Gets whether the "offer" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasOffer {
        get { return msgCase_ == MsgOneofCase.Offer; }
      }
      /// <summary> Clears the value of the oneof if it's currently set to "offer" </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearOffer() {
        if (HasOffer) {
          ClearMsg();
        }
      }

      /// <summary>Field number for the "answer" field.</summary>
      public const int AnswerFieldNumber = 3;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Answer {
        get { return HasAnswer ? (string) msg_ : ""; }
        set {
          msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          msgCase_ = MsgOneofCase.Answer;
        }
      }
      /// <summary>Gets whether the "answer" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAnswer {
        get { return msgCase_ == MsgOneofCase.Answer; }
      }
      /// <summary> Clears the value of the oneof if it's currently set to "answer" </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAnswer() {
        if (HasAnswer) {
          ClearMsg();
        }
      }

      /// <summary>Field number for the "candidate" field.</summary>
      public const int CandidateFieldNumber = 4;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::CTransportSignalMsg.Types.WebRTCMessage.Types.Candidate Candidate {
        get { return HasCandidate ? (global::CTransportSignalMsg.Types.WebRTCMessage.Types.Candidate) msg_ : null; }
        set {
          msg_ = value;
          msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Candidate;
        }
      }
      /// <summary>Gets whether the "candidate" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasCandidate {
        get { return msgCase_ == MsgOneofCase.Candidate; }
      }
      /// <summary> Clears the value of the oneof if it's currently set to "candidate" </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearCandidate() {
        if (HasCandidate) {
          ClearMsg();
        }
      }

      private object msg_;
      /// <summary>Enum of possible cases for the "msg" oneof.</summary>
      public enum MsgOneofCase {
        None = 0,
        Greeting = 1,
        Offer = 2,
        Answer = 3,
        Candidate = 4,
      }
      private MsgOneofCase msgCase_ = MsgOneofCase.None;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public MsgOneofCase MsgCase {
        get { return msgCase_; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearMsg() {
        msgCase_ = MsgOneofCase.None;
        msg_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as WebRTCMessage);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(WebRTCMessage other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Greeting != other.Greeting) return false;
        if (Offer != other.Offer) return false;
        if (Answer != other.Answer) return false;
        if (!object.Equals(Candidate, other.Candidate)) return false;
        if (MsgCase != other.MsgCase) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasGreeting) hash ^= Greeting.GetHashCode();
        if (HasOffer) hash ^= Offer.GetHashCode();
        if (HasAnswer) hash ^= Answer.GetHashCode();
        if (HasCandidate) hash ^= Candidate.GetHashCode();
        hash ^= (int) msgCase_;
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        pb::ProtoPreconditions.CheckInitialized(this);
        if (HasGreeting) {
          output.WriteRawTag(8);
          output.WriteBool(Greeting);
        }
        if (HasOffer) {
          output.WriteRawTag(18);
          output.WriteString(Offer);
        }
        if (HasAnswer) {
          output.WriteRawTag(26);
          output.WriteString(Answer);
        }
        if (HasCandidate) {
          output.WriteRawTag(34);
          output.WriteMessage(Candidate);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasGreeting) {
          size += 1 + 1;
        }
        if (HasOffer) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Offer);
        }
        if (HasAnswer) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Answer);
        }
        if (HasCandidate) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Candidate);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(WebRTCMessage other) {
        if (other == null) {
          return;
        }
        switch (other.MsgCase) {
          case MsgOneofCase.Greeting:
            Greeting = other.Greeting;
            break;
          case MsgOneofCase.Offer:
            Offer = other.Offer;
            break;
          case MsgOneofCase.Answer:
            Answer = other.Answer;
            break;
          case MsgOneofCase.Candidate:
            if (Candidate == null) {
              Candidate = new global::CTransportSignalMsg.Types.WebRTCMessage.Types.Candidate();
            }
            Candidate.MergeFrom(other.Candidate);
            break;
        }

        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Greeting = input.ReadBool();
              break;
            }
            case 18: {
              Offer = input.ReadString();
              break;
            }
            case 26: {
              Answer = input.ReadString();
              break;
            }
            case 34: {
              global::CTransportSignalMsg.Types.WebRTCMessage.Types.Candidate subBuilder = new global::CTransportSignalMsg.Types.WebRTCMessage.Types.Candidate();
              if (HasCandidate) {
                subBuilder.MergeFrom(Candidate);
              }
              input.ReadMessage(subBuilder);
              Candidate = subBuilder;
              break;
            }
          }
        }
        pb::ProtoPreconditions.CheckMergedRequiredFields(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsInitialized() {
        if (HasCandidate) {
          if (!Candidate.IsInitialized()) return false;
        }
        return true;
      }
      #region Nested types
      /// <summary>Container for nested types declared in the WebRTCMessage message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static partial class Types {
        public sealed partial class Candidate : pb::IMessage<Candidate> {
          private static readonly pb::MessageParser<Candidate> _parser = new pb::MessageParser<Candidate>(() => new Candidate());
          private pb::UnknownFieldSet _unknownFields;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<Candidate> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::CTransportSignalMsg.Types.WebRTCMessage.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Candidate() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Candidate(Candidate other) : this() {
            sdpMid_ = other.sdpMid_;
            sdpMlineIndex_ = other.sdpMlineIndex_;
            candidate_ = other.candidate_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Candidate Clone() {
            return new Candidate(this);
          }

          /// <summary>Field number for the "sdp_mid" field.</summary>
          public const int SdpMidFieldNumber = 1;
          /// <summary>Default value for the "sdp_mid" field</summary>
          public const string SdpMidDefaultValue = "";

          private string sdpMid_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string SdpMid {
            get { return sdpMid_ ?? SdpMidDefaultValue; }
            set {
              sdpMid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "sdp_mid" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasSdpMid {
            get { return sdpMid_ != null; }
          }
          /// <summary>Clears the value of the "sdp_mid" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearSdpMid() {
            sdpMid_ = null;
          }

          /// <summary>Field number for the "sdp_mline_index" field.</summary>
          public const int SdpMlineIndexFieldNumber = 2;
          /// <summary>Default value for the "sdp_mline_index" field</summary>
          public const int SdpMlineIndexDefaultValue = 0;

          private int? sdpMlineIndex_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int SdpMlineIndex {
            get { return sdpMlineIndex_ ?? SdpMlineIndexDefaultValue; }
            set {
              sdpMlineIndex_ = value;
            }
          }
          /// <summary>Gets whether the "sdp_mline_index" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasSdpMlineIndex {
            get { return sdpMlineIndex_ != null; }
          }
          /// <summary>Clears the value of the "sdp_mline_index" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearSdpMlineIndex() {
            sdpMlineIndex_ = null;
          }

          /// <summary>Field number for the "candidate" field.</summary>
          public const int Candidate_FieldNumber = 3;
          /// <summary>Default value for the "candidate" field</summary>
          public const string Candidate_DefaultValue = "";

          private string candidate_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Candidate_ {
            get { return candidate_ ?? Candidate_DefaultValue; }
            set {
              candidate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "candidate" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasCandidate_ {
            get { return candidate_ != null; }
          }
          /// <summary>Clears the value of the "candidate" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearCandidate_() {
            candidate_ = null;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as Candidate);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(Candidate other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (SdpMid != other.SdpMid) return false;
            if (SdpMlineIndex != other.SdpMlineIndex) return false;
            if (Candidate_ != other.Candidate_) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasSdpMid) hash ^= SdpMid.GetHashCode();
            if (HasSdpMlineIndex) hash ^= SdpMlineIndex.GetHashCode();
            if (HasCandidate_) hash ^= Candidate_.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            pb::ProtoPreconditions.CheckInitialized(this);
            if (HasSdpMid) {
              output.WriteRawTag(10);
              output.WriteString(SdpMid);
            }
            if (HasSdpMlineIndex) {
              output.WriteRawTag(16);
              output.WriteInt32(SdpMlineIndex);
            }
            if (HasCandidate_) {
              output.WriteRawTag(26);
              output.WriteString(Candidate_);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasSdpMid) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(SdpMid);
            }
            if (HasSdpMlineIndex) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(SdpMlineIndex);
            }
            if (HasCandidate_) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Candidate_);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(Candidate other) {
            if (other == null) {
              return;
            }
            if (other.HasSdpMid) {
              SdpMid = other.SdpMid;
            }
            if (other.HasSdpMlineIndex) {
              SdpMlineIndex = other.SdpMlineIndex;
            }
            if (other.HasCandidate_) {
              Candidate_ = other.Candidate_;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  SdpMid = input.ReadString();
                  break;
                }
                case 16: {
                  SdpMlineIndex = input.ReadInt32();
                  break;
                }
                case 26: {
                  Candidate_ = input.ReadString();
                  break;
                }
              }
            }
            pb::ProtoPreconditions.CheckMergedRequiredFields(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool IsInitialized() {
            return true;
          }
        }

      }
      #endregion

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
