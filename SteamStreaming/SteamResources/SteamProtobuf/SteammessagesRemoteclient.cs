// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: steammessages_remoteclient.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from steammessages_remoteclient.proto</summary>
public static partial class SteammessagesRemoteclientReflection {

  #region Descriptor
  /// <summary>File descriptor for steammessages_remoteclient.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SteammessagesRemoteclientReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CiBzdGVhbW1lc3NhZ2VzX3JlbW90ZWNsaWVudC5wcm90bxoYc3RlYW1tZXNz",
          "YWdlc19iYXNlLnByb3RvGipzdGVhbW1lc3NhZ2VzX3JlbW90ZWNsaWVudF9k",
          "aXNjb3ZlcnkucHJvdG8itAQKGUNNc2dSZW1vdGVDbGllbnRBcHBTdGF0dXMS",
          "PAoOc3RhdHVzX3VwZGF0ZXMYASADKAsyJC5DTXNnUmVtb3RlQ2xpZW50QXBw",
          "U3RhdHVzLkFwcFN0YXR1cxroAQoNQXBwVXBkYXRlSW5mbxIZChF0aW1lX3Vw",
          "ZGF0ZV9zdGFydBgBIAEoBxIZChFieXRlc190b19kb3dubG9hZBgCIAEoBBIY",
          "ChBieXRlc19kb3dubG9hZGVkGAMgASgEEhgKEGJ5dGVzX3RvX3Byb2Nlc3MY",
          "BCABKAQSFwoPYnl0ZXNfcHJvY2Vzc2VkGAUgASgEEicKG2VzdGltYXRlZF9z",
          "ZWNvbmRzX3JlbWFpbmluZxgGIAEoBToCLTESFQoNdXBkYXRlX3Jlc3VsdBgH",
          "IAEoBRIUCgx1cGRhdGVfc3RhdGUYCCABKA0aPgoMU2hvcnRjdXRJbmZvEgwK",
          "BG5hbWUYASABKAkSDAoEaWNvbhgCIAEoCRISCgpjYXRlZ29yaWVzGAMgAygJ",
          "Gq0BCglBcHBTdGF0dXMSDgoGYXBwX2lkGAEgASgNEhEKCWFwcF9zdGF0ZRgC",
          "IAEoDRI9Cgt1cGRhdGVfaW5mbxgDIAEoCzIoLkNNc2dSZW1vdGVDbGllbnRB",
          "cHBTdGF0dXMuQXBwVXBkYXRlSW5mbxI+Cg1zaG9ydGN1dF9pbmZvGAQgASgL",
          "MicuQ01zZ1JlbW90ZUNsaWVudEFwcFN0YXR1cy5TaG9ydGN1dEluZm8icAoU",
          "Q01zZ1JlbW90ZUNsaWVudEF1dGgSEQoJY2xpZW50X2lkGAEgASgEEjAKBnN0",
          "YXR1cxgCIAEoCzIgLkNNc2dSZW1vdGVDbGllbnRCcm9hZGNhc3RTdGF0dXMS",
          "EwoLaW5zdGFuY2VfaWQYAyABKAQiMgocQ01zZ1JlbW90ZUNsaWVudEF1dGhS",
          "ZXNwb25zZRISCgdlcmVzdWx0GAEgASgFOgEyIpkDChtDTXNnUmVtb3RlQ2xp",
          "ZW50U3RhcnRTdHJlYW0SDgoGYXBwX2lkGAEgASgNEhMKC2Vudmlyb25tZW50",
          "GAIgASgFEhUKDWdhbWVwYWRfY291bnQYAyABKAUSGQoNbGF1bmNoX29wdGlv",
          "bhgEIAEoBToCLTESIQoSbG9ja19wYXJlbnRhbF9sb2NrGAUgASgIOgVmYWxz",
          "ZRIcChR1bmxvY2tfcGFyZW50YWxfbG9jaxgGIAEoCRIcChRtYXhpbXVtX3Jl",
          "c29sdXRpb25feBgHIAEoBRIcChRtYXhpbXVtX3Jlc29sdXRpb25feRgIIAEo",
          "BRI+CghnYW1lcGFkcxgJIAMoCzIsLkNNc2dSZW1vdGVDbGllbnRTdGFydFN0",
          "cmVhbS5SZXNlcnZlZEdhbWVwYWQSHgoTYXVkaW9fY2hhbm5lbF9jb3VudBgK",
          "IAEoBToBMhpGCg9SZXNlcnZlZEdhbWVwYWQSFwoPY29udHJvbGxlcl90eXBl",
          "GAEgASgNEhoKEmNvbnRyb2xsZXJfc3VidHlwZRgCIAEoDSKCAQojQ01zZ1Jl",
          "bW90ZUNsaWVudFN0YXJ0U3RyZWFtUmVzcG9uc2USGgoPZV9sYXVuY2hfcmVz",
          "dWx0GAEgASgFOgEyEhMKC3N0cmVhbV9wb3J0GAIgASgNEhYKDmxhdW5jaF9v",
          "cHRpb25zGAMgAygFEhIKCmF1dGhfdG9rZW4YBCABKAwiFgoUQ01zZ1JlbW90",
          "ZUNsaWVudFBpbmciHgocQ01zZ1JlbW90ZUNsaWVudFBpbmdSZXNwb25zZSIs",
          "ChpDTXNnUmVtb3RlQ2xpZW50QWNjZXB0RVVMQRIOCgZhcHBfaWQYASADKA0i",
          "TwojQ01zZ1JlbW90ZUNsaWVudEdldENvbnRyb2xsZXJDb25maWcSDgoGYXBw",
          "X2lkGAEgASgNEhgKEGNvbnRyb2xsZXJfaW5kZXgYAyABKA0iVQorQ01zZ1Jl",
          "bW90ZUNsaWVudEdldENvbnRyb2xsZXJDb25maWdSZXNwb25zZRISCgdlcmVz",
          "dWx0GAEgASgFOgEyEhIKCmNvbmZpZ192ZGYYAiABKAwiMwogQ01zZ1JlbW90",
          "ZUNsaWVudFN0cmVhbWluZ0VuYWJsZWQSDwoHZW5hYmxlZBgBIAIoCEIFSAGA",
          "AQA="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::SteammessagesBaseReflection.Descriptor, global::SteammessagesRemoteclientDiscoveryReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientAppStatus), global::CMsgRemoteClientAppStatus.Parser, new[]{ "StatusUpdates" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientAppStatus.Types.AppUpdateInfo), global::CMsgRemoteClientAppStatus.Types.AppUpdateInfo.Parser, new[]{ "TimeUpdateStart", "BytesToDownload", "BytesDownloaded", "BytesToProcess", "BytesProcessed", "EstimatedSecondsRemaining", "UpdateResult", "UpdateState" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientAppStatus.Types.ShortcutInfo), global::CMsgRemoteClientAppStatus.Types.ShortcutInfo.Parser, new[]{ "Name", "Icon", "Categories" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientAppStatus.Types.AppStatus), global::CMsgRemoteClientAppStatus.Types.AppStatus.Parser, new[]{ "AppId", "AppState", "UpdateInfo", "ShortcutInfo" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientAuth), global::CMsgRemoteClientAuth.Parser, new[]{ "ClientId", "Status", "InstanceId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientAuthResponse), global::CMsgRemoteClientAuthResponse.Parser, new[]{ "Eresult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientStartStream), global::CMsgRemoteClientStartStream.Parser, new[]{ "AppId", "Environment", "GamepadCount", "LaunchOption", "LockParentalLock", "UnlockParentalLock", "MaximumResolutionX", "MaximumResolutionY", "Gamepads", "AudioChannelCount" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientStartStream.Types.ReservedGamepad), global::CMsgRemoteClientStartStream.Types.ReservedGamepad.Parser, new[]{ "ControllerType", "ControllerSubtype" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientStartStreamResponse), global::CMsgRemoteClientStartStreamResponse.Parser, new[]{ "ELaunchResult", "StreamPort", "LaunchOptions", "AuthToken" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientPing), global::CMsgRemoteClientPing.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientPingResponse), global::CMsgRemoteClientPingResponse.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientAcceptEULA), global::CMsgRemoteClientAcceptEULA.Parser, new[]{ "AppId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientGetControllerConfig), global::CMsgRemoteClientGetControllerConfig.Parser, new[]{ "AppId", "ControllerIndex" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientGetControllerConfigResponse), global::CMsgRemoteClientGetControllerConfigResponse.Parser, new[]{ "Eresult", "ConfigVdf" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientStreamingEnabled), global::CMsgRemoteClientStreamingEnabled.Parser, new[]{ "Enabled" }, null, null, null, null)
        }));
  }
  #endregion

}

#region Messages
public sealed partial class CMsgRemoteClientAppStatus : pb::IMessage<CMsgRemoteClientAppStatus> {
  private static readonly pb::MessageParser<CMsgRemoteClientAppStatus> _parser = new pb::MessageParser<CMsgRemoteClientAppStatus>(() => new CMsgRemoteClientAppStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientAppStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientAppStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientAppStatus(CMsgRemoteClientAppStatus other) : this() {
    statusUpdates_ = other.statusUpdates_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientAppStatus Clone() {
    return new CMsgRemoteClientAppStatus(this);
  }

  /// <summary>Field number for the "status_updates" field.</summary>
  public const int StatusUpdatesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgRemoteClientAppStatus.Types.AppStatus> _repeated_statusUpdates_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgRemoteClientAppStatus.Types.AppStatus.Parser);
  private readonly pbc::RepeatedField<global::CMsgRemoteClientAppStatus.Types.AppStatus> statusUpdates_ = new pbc::RepeatedField<global::CMsgRemoteClientAppStatus.Types.AppStatus>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CMsgRemoteClientAppStatus.Types.AppStatus> StatusUpdates {
    get { return statusUpdates_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientAppStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientAppStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!statusUpdates_.Equals(other.statusUpdates_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= statusUpdates_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    statusUpdates_.WriteTo(output, _repeated_statusUpdates_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += statusUpdates_.CalculateSize(_repeated_statusUpdates_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientAppStatus other) {
    if (other == null) {
      return;
    }
    statusUpdates_.Add(other.statusUpdates_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          statusUpdates_.AddEntriesFrom(input, _repeated_statusUpdates_codec);
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!statusUpdates_.IsInitialized()) return false;
    return true;
  }
  #region Nested types
  /// <summary>Container for nested types declared in the CMsgRemoteClientAppStatus message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class AppUpdateInfo : pb::IMessage<AppUpdateInfo> {
      private static readonly pb::MessageParser<AppUpdateInfo> _parser = new pb::MessageParser<AppUpdateInfo>(() => new AppUpdateInfo());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<AppUpdateInfo> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgRemoteClientAppStatus.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public AppUpdateInfo() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public AppUpdateInfo(AppUpdateInfo other) : this() {
        timeUpdateStart_ = other.timeUpdateStart_;
        bytesToDownload_ = other.bytesToDownload_;
        bytesDownloaded_ = other.bytesDownloaded_;
        bytesToProcess_ = other.bytesToProcess_;
        bytesProcessed_ = other.bytesProcessed_;
        estimatedSecondsRemaining_ = other.estimatedSecondsRemaining_;
        updateResult_ = other.updateResult_;
        updateState_ = other.updateState_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public AppUpdateInfo Clone() {
        return new AppUpdateInfo(this);
      }

      /// <summary>Field number for the "time_update_start" field.</summary>
      public const int TimeUpdateStartFieldNumber = 1;
      /// <summary>Default value for the "time_update_start" field</summary>
      public const uint TimeUpdateStartDefaultValue = 0;

      private uint? timeUpdateStart_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint TimeUpdateStart {
        get { return timeUpdateStart_ ?? TimeUpdateStartDefaultValue; }
        set {
          timeUpdateStart_ = value;
        }
      }
      /// <summary>Gets whether the "time_update_start" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasTimeUpdateStart {
        get { return timeUpdateStart_ != null; }
      }
      /// <summary>Clears the value of the "time_update_start" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearTimeUpdateStart() {
        timeUpdateStart_ = null;
      }

      /// <summary>Field number for the "bytes_to_download" field.</summary>
      public const int BytesToDownloadFieldNumber = 2;
      /// <summary>Default value for the "bytes_to_download" field</summary>
      public const ulong BytesToDownloadDefaultValue = 0UL;

      private ulong? bytesToDownload_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ulong BytesToDownload {
        get { return bytesToDownload_ ?? BytesToDownloadDefaultValue; }
        set {
          bytesToDownload_ = value;
        }
      }
      /// <summary>Gets whether the "bytes_to_download" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasBytesToDownload {
        get { return bytesToDownload_ != null; }
      }
      /// <summary>Clears the value of the "bytes_to_download" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearBytesToDownload() {
        bytesToDownload_ = null;
      }

      /// <summary>Field number for the "bytes_downloaded" field.</summary>
      public const int BytesDownloadedFieldNumber = 3;
      /// <summary>Default value for the "bytes_downloaded" field</summary>
      public const ulong BytesDownloadedDefaultValue = 0UL;

      private ulong? bytesDownloaded_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ulong BytesDownloaded {
        get { return bytesDownloaded_ ?? BytesDownloadedDefaultValue; }
        set {
          bytesDownloaded_ = value;
        }
      }
      /// <summary>Gets whether the "bytes_downloaded" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasBytesDownloaded {
        get { return bytesDownloaded_ != null; }
      }
      /// <summary>Clears the value of the "bytes_downloaded" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearBytesDownloaded() {
        bytesDownloaded_ = null;
      }

      /// <summary>Field number for the "bytes_to_process" field.</summary>
      public const int BytesToProcessFieldNumber = 4;
      /// <summary>Default value for the "bytes_to_process" field</summary>
      public const ulong BytesToProcessDefaultValue = 0UL;

      private ulong? bytesToProcess_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ulong BytesToProcess {
        get { return bytesToProcess_ ?? BytesToProcessDefaultValue; }
        set {
          bytesToProcess_ = value;
        }
      }
      /// <summary>Gets whether the "bytes_to_process" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasBytesToProcess {
        get { return bytesToProcess_ != null; }
      }
      /// <summary>Clears the value of the "bytes_to_process" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearBytesToProcess() {
        bytesToProcess_ = null;
      }

      /// <summary>Field number for the "bytes_processed" field.</summary>
      public const int BytesProcessedFieldNumber = 5;
      /// <summary>Default value for the "bytes_processed" field</summary>
      public const ulong BytesProcessedDefaultValue = 0UL;

      private ulong? bytesProcessed_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ulong BytesProcessed {
        get { return bytesProcessed_ ?? BytesProcessedDefaultValue; }
        set {
          bytesProcessed_ = value;
        }
      }
      /// <summary>Gets whether the "bytes_processed" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasBytesProcessed {
        get { return bytesProcessed_ != null; }
      }
      /// <summary>Clears the value of the "bytes_processed" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearBytesProcessed() {
        bytesProcessed_ = null;
      }

      /// <summary>Field number for the "estimated_seconds_remaining" field.</summary>
      public const int EstimatedSecondsRemainingFieldNumber = 6;
      /// <summary>Default value for the "estimated_seconds_remaining" field</summary>
      public const int EstimatedSecondsRemainingDefaultValue = -1;

      private int? estimatedSecondsRemaining_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int EstimatedSecondsRemaining {
        get { return estimatedSecondsRemaining_ ?? EstimatedSecondsRemainingDefaultValue; }
        set {
          estimatedSecondsRemaining_ = value;
        }
      }
      /// <summary>Gets whether the "estimated_seconds_remaining" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasEstimatedSecondsRemaining {
        get { return estimatedSecondsRemaining_ != null; }
      }
      /// <summary>Clears the value of the "estimated_seconds_remaining" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearEstimatedSecondsRemaining() {
        estimatedSecondsRemaining_ = null;
      }

      /// <summary>Field number for the "update_result" field.</summary>
      public const int UpdateResultFieldNumber = 7;
      /// <summary>Default value for the "update_result" field</summary>
      public const int UpdateResultDefaultValue = 0;

      private int? updateResult_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int UpdateResult {
        get { return updateResult_ ?? UpdateResultDefaultValue; }
        set {
          updateResult_ = value;
        }
      }
      /// <summary>Gets whether the "update_result" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasUpdateResult {
        get { return updateResult_ != null; }
      }
      /// <summary>Clears the value of the "update_result" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearUpdateResult() {
        updateResult_ = null;
      }

      /// <summary>Field number for the "update_state" field.</summary>
      public const int UpdateStateFieldNumber = 8;
      /// <summary>Default value for the "update_state" field</summary>
      public const uint UpdateStateDefaultValue = 0;

      private uint? updateState_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint UpdateState {
        get { return updateState_ ?? UpdateStateDefaultValue; }
        set {
          updateState_ = value;
        }
      }
      /// <summary>Gets whether the "update_state" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasUpdateState {
        get { return updateState_ != null; }
      }
      /// <summary>Clears the value of the "update_state" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearUpdateState() {
        updateState_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as AppUpdateInfo);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(AppUpdateInfo other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (TimeUpdateStart != other.TimeUpdateStart) return false;
        if (BytesToDownload != other.BytesToDownload) return false;
        if (BytesDownloaded != other.BytesDownloaded) return false;
        if (BytesToProcess != other.BytesToProcess) return false;
        if (BytesProcessed != other.BytesProcessed) return false;
        if (EstimatedSecondsRemaining != other.EstimatedSecondsRemaining) return false;
        if (UpdateResult != other.UpdateResult) return false;
        if (UpdateState != other.UpdateState) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasTimeUpdateStart) hash ^= TimeUpdateStart.GetHashCode();
        if (HasBytesToDownload) hash ^= BytesToDownload.GetHashCode();
        if (HasBytesDownloaded) hash ^= BytesDownloaded.GetHashCode();
        if (HasBytesToProcess) hash ^= BytesToProcess.GetHashCode();
        if (HasBytesProcessed) hash ^= BytesProcessed.GetHashCode();
        if (HasEstimatedSecondsRemaining) hash ^= EstimatedSecondsRemaining.GetHashCode();
        if (HasUpdateResult) hash ^= UpdateResult.GetHashCode();
        if (HasUpdateState) hash ^= UpdateState.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        pb::ProtoPreconditions.CheckInitialized(this);
        if (HasTimeUpdateStart) {
          output.WriteRawTag(13);
          output.WriteFixed32(TimeUpdateStart);
        }
        if (HasBytesToDownload) {
          output.WriteRawTag(16);
          output.WriteUInt64(BytesToDownload);
        }
        if (HasBytesDownloaded) {
          output.WriteRawTag(24);
          output.WriteUInt64(BytesDownloaded);
        }
        if (HasBytesToProcess) {
          output.WriteRawTag(32);
          output.WriteUInt64(BytesToProcess);
        }
        if (HasBytesProcessed) {
          output.WriteRawTag(40);
          output.WriteUInt64(BytesProcessed);
        }
        if (HasEstimatedSecondsRemaining) {
          output.WriteRawTag(48);
          output.WriteInt32(EstimatedSecondsRemaining);
        }
        if (HasUpdateResult) {
          output.WriteRawTag(56);
          output.WriteInt32(UpdateResult);
        }
        if (HasUpdateState) {
          output.WriteRawTag(64);
          output.WriteUInt32(UpdateState);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasTimeUpdateStart) {
          size += 1 + 4;
        }
        if (HasBytesToDownload) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesToDownload);
        }
        if (HasBytesDownloaded) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesDownloaded);
        }
        if (HasBytesToProcess) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesToProcess);
        }
        if (HasBytesProcessed) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesProcessed);
        }
        if (HasEstimatedSecondsRemaining) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(EstimatedSecondsRemaining);
        }
        if (HasUpdateResult) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpdateResult);
        }
        if (HasUpdateState) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpdateState);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(AppUpdateInfo other) {
        if (other == null) {
          return;
        }
        if (other.HasTimeUpdateStart) {
          TimeUpdateStart = other.TimeUpdateStart;
        }
        if (other.HasBytesToDownload) {
          BytesToDownload = other.BytesToDownload;
        }
        if (other.HasBytesDownloaded) {
          BytesDownloaded = other.BytesDownloaded;
        }
        if (other.HasBytesToProcess) {
          BytesToProcess = other.BytesToProcess;
        }
        if (other.HasBytesProcessed) {
          BytesProcessed = other.BytesProcessed;
        }
        if (other.HasEstimatedSecondsRemaining) {
          EstimatedSecondsRemaining = other.EstimatedSecondsRemaining;
        }
        if (other.HasUpdateResult) {
          UpdateResult = other.UpdateResult;
        }
        if (other.HasUpdateState) {
          UpdateState = other.UpdateState;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              TimeUpdateStart = input.ReadFixed32();
              break;
            }
            case 16: {
              BytesToDownload = input.ReadUInt64();
              break;
            }
            case 24: {
              BytesDownloaded = input.ReadUInt64();
              break;
            }
            case 32: {
              BytesToProcess = input.ReadUInt64();
              break;
            }
            case 40: {
              BytesProcessed = input.ReadUInt64();
              break;
            }
            case 48: {
              EstimatedSecondsRemaining = input.ReadInt32();
              break;
            }
            case 56: {
              UpdateResult = input.ReadInt32();
              break;
            }
            case 64: {
              UpdateState = input.ReadUInt32();
              break;
            }
          }
        }
        pb::ProtoPreconditions.CheckMergedRequiredFields(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsInitialized() {
        return true;
      }
    }

    public sealed partial class ShortcutInfo : pb::IMessage<ShortcutInfo> {
      private static readonly pb::MessageParser<ShortcutInfo> _parser = new pb::MessageParser<ShortcutInfo>(() => new ShortcutInfo());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<ShortcutInfo> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgRemoteClientAppStatus.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ShortcutInfo() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ShortcutInfo(ShortcutInfo other) : this() {
        name_ = other.name_;
        icon_ = other.icon_;
        categories_ = other.categories_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ShortcutInfo Clone() {
        return new ShortcutInfo(this);
      }

      /// <summary>Field number for the "name" field.</summary>
      public const int NameFieldNumber = 1;
      /// <summary>Default value for the "name" field</summary>
      public const string NameDefaultValue = "";

      private string name_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Name {
        get { return name_ ?? NameDefaultValue; }
        set {
          name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "name" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasName {
        get { return name_ != null; }
      }
      /// <summary>Clears the value of the "name" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearName() {
        name_ = null;
      }

      /// <summary>Field number for the "icon" field.</summary>
      public const int IconFieldNumber = 2;
      /// <summary>Default value for the "icon" field</summary>
      public const string IconDefaultValue = "";

      private string icon_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Icon {
        get { return icon_ ?? IconDefaultValue; }
        set {
          icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "icon" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasIcon {
        get { return icon_ != null; }
      }
      /// <summary>Clears the value of the "icon" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearIcon() {
        icon_ = null;
      }

      /// <summary>Field number for the "categories" field.</summary>
      public const int CategoriesFieldNumber = 3;
      private static readonly pb::FieldCodec<string> _repeated_categories_codec
          = pb::FieldCodec.ForString(26);
      private readonly pbc::RepeatedField<string> categories_ = new pbc::RepeatedField<string>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<string> Categories {
        get { return categories_; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as ShortcutInfo);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(ShortcutInfo other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Name != other.Name) return false;
        if (Icon != other.Icon) return false;
        if(!categories_.Equals(other.categories_)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasName) hash ^= Name.GetHashCode();
        if (HasIcon) hash ^= Icon.GetHashCode();
        hash ^= categories_.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        pb::ProtoPreconditions.CheckInitialized(this);
        if (HasName) {
          output.WriteRawTag(10);
          output.WriteString(Name);
        }
        if (HasIcon) {
          output.WriteRawTag(18);
          output.WriteString(Icon);
        }
        categories_.WriteTo(output, _repeated_categories_codec);
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasName) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
        }
        if (HasIcon) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
        }
        size += categories_.CalculateSize(_repeated_categories_codec);
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(ShortcutInfo other) {
        if (other == null) {
          return;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasIcon) {
          Icon = other.Icon;
        }
        categories_.Add(other.categories_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Name = input.ReadString();
              break;
            }
            case 18: {
              Icon = input.ReadString();
              break;
            }
            case 26: {
              categories_.AddEntriesFrom(input, _repeated_categories_codec);
              break;
            }
          }
        }
        pb::ProtoPreconditions.CheckMergedRequiredFields(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsInitialized() {
        return true;
      }
    }

    public sealed partial class AppStatus : pb::IMessage<AppStatus> {
      private static readonly pb::MessageParser<AppStatus> _parser = new pb::MessageParser<AppStatus>(() => new AppStatus());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<AppStatus> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgRemoteClientAppStatus.Descriptor.NestedTypes[2]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public AppStatus() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public AppStatus(AppStatus other) : this() {
        appId_ = other.appId_;
        appState_ = other.appState_;
        UpdateInfo = other.HasUpdateInfo ? other.UpdateInfo.Clone() : null;
        ShortcutInfo = other.HasShortcutInfo ? other.ShortcutInfo.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public AppStatus Clone() {
        return new AppStatus(this);
      }

      /// <summary>Field number for the "app_id" field.</summary>
      public const int AppIdFieldNumber = 1;
      /// <summary>Default value for the "app_id" field</summary>
      public const uint AppIdDefaultValue = 0;

      private uint? appId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint AppId {
        get { return appId_ ?? AppIdDefaultValue; }
        set {
          appId_ = value;
        }
      }
      /// <summary>Gets whether the "app_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAppId {
        get { return appId_ != null; }
      }
      /// <summary>Clears the value of the "app_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAppId() {
        appId_ = null;
      }

      /// <summary>Field number for the "app_state" field.</summary>
      public const int AppStateFieldNumber = 2;
      /// <summary>Default value for the "app_state" field</summary>
      public const uint AppStateDefaultValue = 0;

      private uint? appState_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint AppState {
        get { return appState_ ?? AppStateDefaultValue; }
        set {
          appState_ = value;
        }
      }
      /// <summary>Gets whether the "app_state" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAppState {
        get { return appState_ != null; }
      }
      /// <summary>Clears the value of the "app_state" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAppState() {
        appState_ = null;
      }

      /// <summary>Field number for the "update_info" field.</summary>
      public const int UpdateInfoFieldNumber = 3;
      private global::CMsgRemoteClientAppStatus.Types.AppUpdateInfo updateInfo_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::CMsgRemoteClientAppStatus.Types.AppUpdateInfo UpdateInfo {
        get { return updateInfo_; }
        set {
          updateInfo_ = value;
        }
      }
      /// <summary>Gets whether the update_info field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasUpdateInfo {
        get { return updateInfo_ != null; }
      }
      /// <summary>Clears the value of the update_info field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearUpdateInfo() {
        updateInfo_ = null;
      }

      /// <summary>Field number for the "shortcut_info" field.</summary>
      public const int ShortcutInfoFieldNumber = 4;
      private global::CMsgRemoteClientAppStatus.Types.ShortcutInfo shortcutInfo_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::CMsgRemoteClientAppStatus.Types.ShortcutInfo ShortcutInfo {
        get { return shortcutInfo_; }
        set {
          shortcutInfo_ = value;
        }
      }
      /// <summary>Gets whether the shortcut_info field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasShortcutInfo {
        get { return shortcutInfo_ != null; }
      }
      /// <summary>Clears the value of the shortcut_info field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearShortcutInfo() {
        shortcutInfo_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as AppStatus);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(AppStatus other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (AppId != other.AppId) return false;
        if (AppState != other.AppState) return false;
        if (!object.Equals(UpdateInfo, other.UpdateInfo)) return false;
        if (!object.Equals(ShortcutInfo, other.ShortcutInfo)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasAppId) hash ^= AppId.GetHashCode();
        if (HasAppState) hash ^= AppState.GetHashCode();
        if (HasUpdateInfo) hash ^= UpdateInfo.GetHashCode();
        if (HasShortcutInfo) hash ^= ShortcutInfo.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        pb::ProtoPreconditions.CheckInitialized(this);
        if (HasAppId) {
          output.WriteRawTag(8);
          output.WriteUInt32(AppId);
        }
        if (HasAppState) {
          output.WriteRawTag(16);
          output.WriteUInt32(AppState);
        }
        if (HasUpdateInfo) {
          output.WriteRawTag(26);
          output.WriteMessage(UpdateInfo);
        }
        if (HasShortcutInfo) {
          output.WriteRawTag(34);
          output.WriteMessage(ShortcutInfo);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasAppId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AppId);
        }
        if (HasAppState) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AppState);
        }
        if (HasUpdateInfo) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateInfo);
        }
        if (HasShortcutInfo) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShortcutInfo);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(AppStatus other) {
        if (other == null) {
          return;
        }
        if (other.HasAppId) {
          AppId = other.AppId;
        }
        if (other.HasAppState) {
          AppState = other.AppState;
        }
        if (other.HasUpdateInfo) {
          if (!HasUpdateInfo) {
            updateInfo_ = new global::CMsgRemoteClientAppStatus.Types.AppUpdateInfo();
          }
          UpdateInfo.MergeFrom(other.UpdateInfo);
        }
        if (other.HasShortcutInfo) {
          if (!HasShortcutInfo) {
            shortcutInfo_ = new global::CMsgRemoteClientAppStatus.Types.ShortcutInfo();
          }
          ShortcutInfo.MergeFrom(other.ShortcutInfo);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              AppId = input.ReadUInt32();
              break;
            }
            case 16: {
              AppState = input.ReadUInt32();
              break;
            }
            case 26: {
              if (!HasUpdateInfo) {
                updateInfo_ = new global::CMsgRemoteClientAppStatus.Types.AppUpdateInfo();
              }
              input.ReadMessage(updateInfo_);
              break;
            }
            case 34: {
              if (!HasShortcutInfo) {
                shortcutInfo_ = new global::CMsgRemoteClientAppStatus.Types.ShortcutInfo();
              }
              input.ReadMessage(shortcutInfo_);
              break;
            }
          }
        }
        pb::ProtoPreconditions.CheckMergedRequiredFields(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsInitialized() {
        if (HasUpdateInfo) {
          if (!UpdateInfo.IsInitialized()) return false;
        }
        if (HasShortcutInfo) {
          if (!ShortcutInfo.IsInitialized()) return false;
        }
        return true;
      }
    }

  }
  #endregion

}

public sealed partial class CMsgRemoteClientAuth : pb::IMessage<CMsgRemoteClientAuth> {
  private static readonly pb::MessageParser<CMsgRemoteClientAuth> _parser = new pb::MessageParser<CMsgRemoteClientAuth>(() => new CMsgRemoteClientAuth());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientAuth> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientAuth() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientAuth(CMsgRemoteClientAuth other) : this() {
    clientId_ = other.clientId_;
    Status = other.HasStatus ? other.Status.Clone() : null;
    instanceId_ = other.instanceId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientAuth Clone() {
    return new CMsgRemoteClientAuth(this);
  }

  /// <summary>Field number for the "client_id" field.</summary>
  public const int ClientIdFieldNumber = 1;
  /// <summary>Default value for the "client_id" field</summary>
  public const ulong ClientIdDefaultValue = 0UL;

  private ulong? clientId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong ClientId {
    get { return clientId_ ?? ClientIdDefaultValue; }
    set {
      clientId_ = value;
    }
  }
  /// <summary>Gets whether the "client_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientId {
    get { return clientId_ != null; }
  }
  /// <summary>Clears the value of the "client_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientId() {
    clientId_ = null;
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 2;
  private global::CMsgRemoteClientBroadcastStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CMsgRemoteClientBroadcastStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }
  /// <summary>Gets whether the status field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStatus {
    get { return status_ != null; }
  }
  /// <summary>Clears the value of the status field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStatus() {
    status_ = null;
  }

  /// <summary>Field number for the "instance_id" field.</summary>
  public const int InstanceIdFieldNumber = 3;
  /// <summary>Default value for the "instance_id" field</summary>
  public const ulong InstanceIdDefaultValue = 0UL;

  private ulong? instanceId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong InstanceId {
    get { return instanceId_ ?? InstanceIdDefaultValue; }
    set {
      instanceId_ = value;
    }
  }
  /// <summary>Gets whether the "instance_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInstanceId {
    get { return instanceId_ != null; }
  }
  /// <summary>Clears the value of the "instance_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInstanceId() {
    instanceId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientAuth);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientAuth other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientId != other.ClientId) return false;
    if (!object.Equals(Status, other.Status)) return false;
    if (InstanceId != other.InstanceId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClientId) hash ^= ClientId.GetHashCode();
    if (HasStatus) hash ^= Status.GetHashCode();
    if (HasInstanceId) hash ^= InstanceId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasClientId) {
      output.WriteRawTag(8);
      output.WriteUInt64(ClientId);
    }
    if (HasStatus) {
      output.WriteRawTag(18);
      output.WriteMessage(Status);
    }
    if (HasInstanceId) {
      output.WriteRawTag(24);
      output.WriteUInt64(InstanceId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasClientId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientId);
    }
    if (HasStatus) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (HasInstanceId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InstanceId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientAuth other) {
    if (other == null) {
      return;
    }
    if (other.HasClientId) {
      ClientId = other.ClientId;
    }
    if (other.HasStatus) {
      if (!HasStatus) {
        status_ = new global::CMsgRemoteClientBroadcastStatus();
      }
      Status.MergeFrom(other.Status);
    }
    if (other.HasInstanceId) {
      InstanceId = other.InstanceId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientId = input.ReadUInt64();
          break;
        }
        case 18: {
          if (!HasStatus) {
            status_ = new global::CMsgRemoteClientBroadcastStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 24: {
          InstanceId = input.ReadUInt64();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (HasStatus) {
      if (!Status.IsInitialized()) return false;
    }
    return true;
  }
}

public sealed partial class CMsgRemoteClientAuthResponse : pb::IMessage<CMsgRemoteClientAuthResponse> {
  private static readonly pb::MessageParser<CMsgRemoteClientAuthResponse> _parser = new pb::MessageParser<CMsgRemoteClientAuthResponse>(() => new CMsgRemoteClientAuthResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientAuthResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientAuthResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientAuthResponse(CMsgRemoteClientAuthResponse other) : this() {
    eresult_ = other.eresult_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientAuthResponse Clone() {
    return new CMsgRemoteClientAuthResponse(this);
  }

  /// <summary>Field number for the "eresult" field.</summary>
  public const int EresultFieldNumber = 1;
  /// <summary>Default value for the "eresult" field</summary>
  public const int EresultDefaultValue = 2;

  private int? eresult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Eresult {
    get { return eresult_ ?? EresultDefaultValue; }
    set {
      eresult_ = value;
    }
  }
  /// <summary>Gets whether the "eresult" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEresult {
    get { return eresult_ != null; }
  }
  /// <summary>Clears the value of the "eresult" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEresult() {
    eresult_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientAuthResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientAuthResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Eresult != other.Eresult) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEresult) hash ^= Eresult.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasEresult) {
      output.WriteRawTag(8);
      output.WriteInt32(Eresult);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEresult) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eresult);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientAuthResponse other) {
    if (other == null) {
      return;
    }
    if (other.HasEresult) {
      Eresult = other.Eresult;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Eresult = input.ReadInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgRemoteClientStartStream : pb::IMessage<CMsgRemoteClientStartStream> {
  private static readonly pb::MessageParser<CMsgRemoteClientStartStream> _parser = new pb::MessageParser<CMsgRemoteClientStartStream>(() => new CMsgRemoteClientStartStream());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientStartStream> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientStartStream() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientStartStream(CMsgRemoteClientStartStream other) : this() {
    appId_ = other.appId_;
    environment_ = other.environment_;
    gamepadCount_ = other.gamepadCount_;
    launchOption_ = other.launchOption_;
    lockParentalLock_ = other.lockParentalLock_;
    unlockParentalLock_ = other.unlockParentalLock_;
    maximumResolutionX_ = other.maximumResolutionX_;
    maximumResolutionY_ = other.maximumResolutionY_;
    gamepads_ = other.gamepads_.Clone();
    audioChannelCount_ = other.audioChannelCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientStartStream Clone() {
    return new CMsgRemoteClientStartStream(this);
  }

  /// <summary>Field number for the "app_id" field.</summary>
  public const int AppIdFieldNumber = 1;
  /// <summary>Default value for the "app_id" field</summary>
  public const uint AppIdDefaultValue = 0;

  private uint? appId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AppId {
    get { return appId_ ?? AppIdDefaultValue; }
    set {
      appId_ = value;
    }
  }
  /// <summary>Gets whether the "app_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAppId {
    get { return appId_ != null; }
  }
  /// <summary>Clears the value of the "app_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAppId() {
    appId_ = null;
  }

  /// <summary>Field number for the "environment" field.</summary>
  public const int EnvironmentFieldNumber = 2;
  /// <summary>Default value for the "environment" field</summary>
  public const int EnvironmentDefaultValue = 0;

  private int? environment_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Environment {
    get { return environment_ ?? EnvironmentDefaultValue; }
    set {
      environment_ = value;
    }
  }
  /// <summary>Gets whether the "environment" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnvironment {
    get { return environment_ != null; }
  }
  /// <summary>Clears the value of the "environment" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnvironment() {
    environment_ = null;
  }

  /// <summary>Field number for the "gamepad_count" field.</summary>
  public const int GamepadCountFieldNumber = 3;
  /// <summary>Default value for the "gamepad_count" field</summary>
  public const int GamepadCountDefaultValue = 0;

  private int? gamepadCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GamepadCount {
    get { return gamepadCount_ ?? GamepadCountDefaultValue; }
    set {
      gamepadCount_ = value;
    }
  }
  /// <summary>Gets whether the "gamepad_count" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGamepadCount {
    get { return gamepadCount_ != null; }
  }
  /// <summary>Clears the value of the "gamepad_count" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGamepadCount() {
    gamepadCount_ = null;
  }

  /// <summary>Field number for the "launch_option" field.</summary>
  public const int LaunchOptionFieldNumber = 4;
  /// <summary>Default value for the "launch_option" field</summary>
  public const int LaunchOptionDefaultValue = -1;

  private int? launchOption_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LaunchOption {
    get { return launchOption_ ?? LaunchOptionDefaultValue; }
    set {
      launchOption_ = value;
    }
  }
  /// <summary>Gets whether the "launch_option" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLaunchOption {
    get { return launchOption_ != null; }
  }
  /// <summary>Clears the value of the "launch_option" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLaunchOption() {
    launchOption_ = null;
  }

  /// <summary>Field number for the "lock_parental_lock" field.</summary>
  public const int LockParentalLockFieldNumber = 5;
  /// <summary>Default value for the "lock_parental_lock" field</summary>
  public const bool LockParentalLockDefaultValue = false;

  private bool? lockParentalLock_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool LockParentalLock {
    get { return lockParentalLock_ ?? LockParentalLockDefaultValue; }
    set {
      lockParentalLock_ = value;
    }
  }
  /// <summary>Gets whether the "lock_parental_lock" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLockParentalLock {
    get { return lockParentalLock_ != null; }
  }
  /// <summary>Clears the value of the "lock_parental_lock" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLockParentalLock() {
    lockParentalLock_ = null;
  }

  /// <summary>Field number for the "unlock_parental_lock" field.</summary>
  public const int UnlockParentalLockFieldNumber = 6;
  /// <summary>Default value for the "unlock_parental_lock" field</summary>
  public const string UnlockParentalLockDefaultValue = "";

  private string unlockParentalLock_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UnlockParentalLock {
    get { return unlockParentalLock_ ?? UnlockParentalLockDefaultValue; }
    set {
      unlockParentalLock_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "unlock_parental_lock" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUnlockParentalLock {
    get { return unlockParentalLock_ != null; }
  }
  /// <summary>Clears the value of the "unlock_parental_lock" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUnlockParentalLock() {
    unlockParentalLock_ = null;
  }

  /// <summary>Field number for the "maximum_resolution_x" field.</summary>
  public const int MaximumResolutionXFieldNumber = 7;
  /// <summary>Default value for the "maximum_resolution_x" field</summary>
  public const int MaximumResolutionXDefaultValue = 0;

  private int? maximumResolutionX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaximumResolutionX {
    get { return maximumResolutionX_ ?? MaximumResolutionXDefaultValue; }
    set {
      maximumResolutionX_ = value;
    }
  }
  /// <summary>Gets whether the "maximum_resolution_x" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaximumResolutionX {
    get { return maximumResolutionX_ != null; }
  }
  /// <summary>Clears the value of the "maximum_resolution_x" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaximumResolutionX() {
    maximumResolutionX_ = null;
  }

  /// <summary>Field number for the "maximum_resolution_y" field.</summary>
  public const int MaximumResolutionYFieldNumber = 8;
  /// <summary>Default value for the "maximum_resolution_y" field</summary>
  public const int MaximumResolutionYDefaultValue = 0;

  private int? maximumResolutionY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaximumResolutionY {
    get { return maximumResolutionY_ ?? MaximumResolutionYDefaultValue; }
    set {
      maximumResolutionY_ = value;
    }
  }
  /// <summary>Gets whether the "maximum_resolution_y" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaximumResolutionY {
    get { return maximumResolutionY_ != null; }
  }
  /// <summary>Clears the value of the "maximum_resolution_y" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaximumResolutionY() {
    maximumResolutionY_ = null;
  }

  /// <summary>Field number for the "gamepads" field.</summary>
  public const int GamepadsFieldNumber = 9;
  private static readonly pb::FieldCodec<global::CMsgRemoteClientStartStream.Types.ReservedGamepad> _repeated_gamepads_codec
      = pb::FieldCodec.ForMessage(74, global::CMsgRemoteClientStartStream.Types.ReservedGamepad.Parser);
  private readonly pbc::RepeatedField<global::CMsgRemoteClientStartStream.Types.ReservedGamepad> gamepads_ = new pbc::RepeatedField<global::CMsgRemoteClientStartStream.Types.ReservedGamepad>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CMsgRemoteClientStartStream.Types.ReservedGamepad> Gamepads {
    get { return gamepads_; }
  }

  /// <summary>Field number for the "audio_channel_count" field.</summary>
  public const int AudioChannelCountFieldNumber = 10;
  /// <summary>Default value for the "audio_channel_count" field</summary>
  public const int AudioChannelCountDefaultValue = 2;

  private int? audioChannelCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AudioChannelCount {
    get { return audioChannelCount_ ?? AudioChannelCountDefaultValue; }
    set {
      audioChannelCount_ = value;
    }
  }
  /// <summary>Gets whether the "audio_channel_count" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAudioChannelCount {
    get { return audioChannelCount_ != null; }
  }
  /// <summary>Clears the value of the "audio_channel_count" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAudioChannelCount() {
    audioChannelCount_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientStartStream);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientStartStream other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AppId != other.AppId) return false;
    if (Environment != other.Environment) return false;
    if (GamepadCount != other.GamepadCount) return false;
    if (LaunchOption != other.LaunchOption) return false;
    if (LockParentalLock != other.LockParentalLock) return false;
    if (UnlockParentalLock != other.UnlockParentalLock) return false;
    if (MaximumResolutionX != other.MaximumResolutionX) return false;
    if (MaximumResolutionY != other.MaximumResolutionY) return false;
    if(!gamepads_.Equals(other.gamepads_)) return false;
    if (AudioChannelCount != other.AudioChannelCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAppId) hash ^= AppId.GetHashCode();
    if (HasEnvironment) hash ^= Environment.GetHashCode();
    if (HasGamepadCount) hash ^= GamepadCount.GetHashCode();
    if (HasLaunchOption) hash ^= LaunchOption.GetHashCode();
    if (HasLockParentalLock) hash ^= LockParentalLock.GetHashCode();
    if (HasUnlockParentalLock) hash ^= UnlockParentalLock.GetHashCode();
    if (HasMaximumResolutionX) hash ^= MaximumResolutionX.GetHashCode();
    if (HasMaximumResolutionY) hash ^= MaximumResolutionY.GetHashCode();
    hash ^= gamepads_.GetHashCode();
    if (HasAudioChannelCount) hash ^= AudioChannelCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasAppId) {
      output.WriteRawTag(8);
      output.WriteUInt32(AppId);
    }
    if (HasEnvironment) {
      output.WriteRawTag(16);
      output.WriteInt32(Environment);
    }
    if (HasGamepadCount) {
      output.WriteRawTag(24);
      output.WriteInt32(GamepadCount);
    }
    if (HasLaunchOption) {
      output.WriteRawTag(32);
      output.WriteInt32(LaunchOption);
    }
    if (HasLockParentalLock) {
      output.WriteRawTag(40);
      output.WriteBool(LockParentalLock);
    }
    if (HasUnlockParentalLock) {
      output.WriteRawTag(50);
      output.WriteString(UnlockParentalLock);
    }
    if (HasMaximumResolutionX) {
      output.WriteRawTag(56);
      output.WriteInt32(MaximumResolutionX);
    }
    if (HasMaximumResolutionY) {
      output.WriteRawTag(64);
      output.WriteInt32(MaximumResolutionY);
    }
    gamepads_.WriteTo(output, _repeated_gamepads_codec);
    if (HasAudioChannelCount) {
      output.WriteRawTag(80);
      output.WriteInt32(AudioChannelCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAppId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AppId);
    }
    if (HasEnvironment) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Environment);
    }
    if (HasGamepadCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GamepadCount);
    }
    if (HasLaunchOption) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaunchOption);
    }
    if (HasLockParentalLock) {
      size += 1 + 1;
    }
    if (HasUnlockParentalLock) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UnlockParentalLock);
    }
    if (HasMaximumResolutionX) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumResolutionX);
    }
    if (HasMaximumResolutionY) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumResolutionY);
    }
    size += gamepads_.CalculateSize(_repeated_gamepads_codec);
    if (HasAudioChannelCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudioChannelCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientStartStream other) {
    if (other == null) {
      return;
    }
    if (other.HasAppId) {
      AppId = other.AppId;
    }
    if (other.HasEnvironment) {
      Environment = other.Environment;
    }
    if (other.HasGamepadCount) {
      GamepadCount = other.GamepadCount;
    }
    if (other.HasLaunchOption) {
      LaunchOption = other.LaunchOption;
    }
    if (other.HasLockParentalLock) {
      LockParentalLock = other.LockParentalLock;
    }
    if (other.HasUnlockParentalLock) {
      UnlockParentalLock = other.UnlockParentalLock;
    }
    if (other.HasMaximumResolutionX) {
      MaximumResolutionX = other.MaximumResolutionX;
    }
    if (other.HasMaximumResolutionY) {
      MaximumResolutionY = other.MaximumResolutionY;
    }
    gamepads_.Add(other.gamepads_);
    if (other.HasAudioChannelCount) {
      AudioChannelCount = other.AudioChannelCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AppId = input.ReadUInt32();
          break;
        }
        case 16: {
          Environment = input.ReadInt32();
          break;
        }
        case 24: {
          GamepadCount = input.ReadInt32();
          break;
        }
        case 32: {
          LaunchOption = input.ReadInt32();
          break;
        }
        case 40: {
          LockParentalLock = input.ReadBool();
          break;
        }
        case 50: {
          UnlockParentalLock = input.ReadString();
          break;
        }
        case 56: {
          MaximumResolutionX = input.ReadInt32();
          break;
        }
        case 64: {
          MaximumResolutionY = input.ReadInt32();
          break;
        }
        case 74: {
          gamepads_.AddEntriesFrom(input, _repeated_gamepads_codec);
          break;
        }
        case 80: {
          AudioChannelCount = input.ReadInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!gamepads_.IsInitialized()) return false;
    return true;
  }
  #region Nested types
  /// <summary>Container for nested types declared in the CMsgRemoteClientStartStream message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class ReservedGamepad : pb::IMessage<ReservedGamepad> {
      private static readonly pb::MessageParser<ReservedGamepad> _parser = new pb::MessageParser<ReservedGamepad>(() => new ReservedGamepad());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<ReservedGamepad> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgRemoteClientStartStream.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ReservedGamepad() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ReservedGamepad(ReservedGamepad other) : this() {
        controllerType_ = other.controllerType_;
        controllerSubtype_ = other.controllerSubtype_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ReservedGamepad Clone() {
        return new ReservedGamepad(this);
      }

      /// <summary>Field number for the "controller_type" field.</summary>
      public const int ControllerTypeFieldNumber = 1;
      /// <summary>Default value for the "controller_type" field</summary>
      public const uint ControllerTypeDefaultValue = 0;

      private uint? controllerType_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint ControllerType {
        get { return controllerType_ ?? ControllerTypeDefaultValue; }
        set {
          controllerType_ = value;
        }
      }
      /// <summary>Gets whether the "controller_type" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasControllerType {
        get { return controllerType_ != null; }
      }
      /// <summary>Clears the value of the "controller_type" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearControllerType() {
        controllerType_ = null;
      }

      /// <summary>Field number for the "controller_subtype" field.</summary>
      public const int ControllerSubtypeFieldNumber = 2;
      /// <summary>Default value for the "controller_subtype" field</summary>
      public const uint ControllerSubtypeDefaultValue = 0;

      private uint? controllerSubtype_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint ControllerSubtype {
        get { return controllerSubtype_ ?? ControllerSubtypeDefaultValue; }
        set {
          controllerSubtype_ = value;
        }
      }
      /// <summary>Gets whether the "controller_subtype" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasControllerSubtype {
        get { return controllerSubtype_ != null; }
      }
      /// <summary>Clears the value of the "controller_subtype" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearControllerSubtype() {
        controllerSubtype_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as ReservedGamepad);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(ReservedGamepad other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (ControllerType != other.ControllerType) return false;
        if (ControllerSubtype != other.ControllerSubtype) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasControllerType) hash ^= ControllerType.GetHashCode();
        if (HasControllerSubtype) hash ^= ControllerSubtype.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        pb::ProtoPreconditions.CheckInitialized(this);
        if (HasControllerType) {
          output.WriteRawTag(8);
          output.WriteUInt32(ControllerType);
        }
        if (HasControllerSubtype) {
          output.WriteRawTag(16);
          output.WriteUInt32(ControllerSubtype);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasControllerType) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerType);
        }
        if (HasControllerSubtype) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerSubtype);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(ReservedGamepad other) {
        if (other == null) {
          return;
        }
        if (other.HasControllerType) {
          ControllerType = other.ControllerType;
        }
        if (other.HasControllerSubtype) {
          ControllerSubtype = other.ControllerSubtype;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              ControllerType = input.ReadUInt32();
              break;
            }
            case 16: {
              ControllerSubtype = input.ReadUInt32();
              break;
            }
          }
        }
        pb::ProtoPreconditions.CheckMergedRequiredFields(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsInitialized() {
        return true;
      }
    }

  }
  #endregion

}

public sealed partial class CMsgRemoteClientStartStreamResponse : pb::IMessage<CMsgRemoteClientStartStreamResponse> {
  private static readonly pb::MessageParser<CMsgRemoteClientStartStreamResponse> _parser = new pb::MessageParser<CMsgRemoteClientStartStreamResponse>(() => new CMsgRemoteClientStartStreamResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientStartStreamResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientStartStreamResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientStartStreamResponse(CMsgRemoteClientStartStreamResponse other) : this() {
    eLaunchResult_ = other.eLaunchResult_;
    streamPort_ = other.streamPort_;
    launchOptions_ = other.launchOptions_.Clone();
    authToken_ = other.authToken_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientStartStreamResponse Clone() {
    return new CMsgRemoteClientStartStreamResponse(this);
  }

  /// <summary>Field number for the "e_launch_result" field.</summary>
  public const int ELaunchResultFieldNumber = 1;
  /// <summary>Default value for the "e_launch_result" field</summary>
  public const int ELaunchResultDefaultValue = 2;

  private int? eLaunchResult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ELaunchResult {
    get { return eLaunchResult_ ?? ELaunchResultDefaultValue; }
    set {
      eLaunchResult_ = value;
    }
  }
  /// <summary>Gets whether the "e_launch_result" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasELaunchResult {
    get { return eLaunchResult_ != null; }
  }
  /// <summary>Clears the value of the "e_launch_result" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearELaunchResult() {
    eLaunchResult_ = null;
  }

  /// <summary>Field number for the "stream_port" field.</summary>
  public const int StreamPortFieldNumber = 2;
  /// <summary>Default value for the "stream_port" field</summary>
  public const uint StreamPortDefaultValue = 0;

  private uint? streamPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StreamPort {
    get { return streamPort_ ?? StreamPortDefaultValue; }
    set {
      streamPort_ = value;
    }
  }
  /// <summary>Gets whether the "stream_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStreamPort {
    get { return streamPort_ != null; }
  }
  /// <summary>Clears the value of the "stream_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStreamPort() {
    streamPort_ = null;
  }

  /// <summary>Field number for the "launch_options" field.</summary>
  public const int LaunchOptionsFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_launchOptions_codec
      = pb::FieldCodec.ForInt32(24);
  private readonly pbc::RepeatedField<int> launchOptions_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> LaunchOptions {
    get { return launchOptions_; }
  }

  /// <summary>Field number for the "auth_token" field.</summary>
  public const int AuthTokenFieldNumber = 4;
  /// <summary>Default value for the "auth_token" field</summary>
  public readonly static pb::ByteString AuthTokenDefaultValue = pb::ByteString.Empty;

  private pb::ByteString authToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString AuthToken {
    get { return authToken_ ?? AuthTokenDefaultValue; }
    set {
      authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "auth_token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthToken {
    get { return authToken_ != null; }
  }
  /// <summary>Clears the value of the "auth_token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthToken() {
    authToken_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientStartStreamResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientStartStreamResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ELaunchResult != other.ELaunchResult) return false;
    if (StreamPort != other.StreamPort) return false;
    if(!launchOptions_.Equals(other.launchOptions_)) return false;
    if (AuthToken != other.AuthToken) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasELaunchResult) hash ^= ELaunchResult.GetHashCode();
    if (HasStreamPort) hash ^= StreamPort.GetHashCode();
    hash ^= launchOptions_.GetHashCode();
    if (HasAuthToken) hash ^= AuthToken.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasELaunchResult) {
      output.WriteRawTag(8);
      output.WriteInt32(ELaunchResult);
    }
    if (HasStreamPort) {
      output.WriteRawTag(16);
      output.WriteUInt32(StreamPort);
    }
    launchOptions_.WriteTo(output, _repeated_launchOptions_codec);
    if (HasAuthToken) {
      output.WriteRawTag(34);
      output.WriteBytes(AuthToken);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasELaunchResult) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ELaunchResult);
    }
    if (HasStreamPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StreamPort);
    }
    size += launchOptions_.CalculateSize(_repeated_launchOptions_codec);
    if (HasAuthToken) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(AuthToken);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientStartStreamResponse other) {
    if (other == null) {
      return;
    }
    if (other.HasELaunchResult) {
      ELaunchResult = other.ELaunchResult;
    }
    if (other.HasStreamPort) {
      StreamPort = other.StreamPort;
    }
    launchOptions_.Add(other.launchOptions_);
    if (other.HasAuthToken) {
      AuthToken = other.AuthToken;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ELaunchResult = input.ReadInt32();
          break;
        }
        case 16: {
          StreamPort = input.ReadUInt32();
          break;
        }
        case 26:
        case 24: {
          launchOptions_.AddEntriesFrom(input, _repeated_launchOptions_codec);
          break;
        }
        case 34: {
          AuthToken = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgRemoteClientPing : pb::IMessage<CMsgRemoteClientPing> {
  private static readonly pb::MessageParser<CMsgRemoteClientPing> _parser = new pb::MessageParser<CMsgRemoteClientPing>(() => new CMsgRemoteClientPing());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientPing> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientPing() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientPing(CMsgRemoteClientPing other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientPing Clone() {
    return new CMsgRemoteClientPing(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientPing);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientPing other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientPing other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgRemoteClientPingResponse : pb::IMessage<CMsgRemoteClientPingResponse> {
  private static readonly pb::MessageParser<CMsgRemoteClientPingResponse> _parser = new pb::MessageParser<CMsgRemoteClientPingResponse>(() => new CMsgRemoteClientPingResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientPingResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientPingResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientPingResponse(CMsgRemoteClientPingResponse other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientPingResponse Clone() {
    return new CMsgRemoteClientPingResponse(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientPingResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientPingResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientPingResponse other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgRemoteClientAcceptEULA : pb::IMessage<CMsgRemoteClientAcceptEULA> {
  private static readonly pb::MessageParser<CMsgRemoteClientAcceptEULA> _parser = new pb::MessageParser<CMsgRemoteClientAcceptEULA>(() => new CMsgRemoteClientAcceptEULA());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientAcceptEULA> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientAcceptEULA() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientAcceptEULA(CMsgRemoteClientAcceptEULA other) : this() {
    appId_ = other.appId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientAcceptEULA Clone() {
    return new CMsgRemoteClientAcceptEULA(this);
  }

  /// <summary>Field number for the "app_id" field.</summary>
  public const int AppIdFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_appId_codec
      = pb::FieldCodec.ForUInt32(8);
  private readonly pbc::RepeatedField<uint> appId_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> AppId {
    get { return appId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientAcceptEULA);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientAcceptEULA other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!appId_.Equals(other.appId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= appId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    appId_.WriteTo(output, _repeated_appId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += appId_.CalculateSize(_repeated_appId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientAcceptEULA other) {
    if (other == null) {
      return;
    }
    appId_.Add(other.appId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          appId_.AddEntriesFrom(input, _repeated_appId_codec);
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgRemoteClientGetControllerConfig : pb::IMessage<CMsgRemoteClientGetControllerConfig> {
  private static readonly pb::MessageParser<CMsgRemoteClientGetControllerConfig> _parser = new pb::MessageParser<CMsgRemoteClientGetControllerConfig>(() => new CMsgRemoteClientGetControllerConfig());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientGetControllerConfig> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientGetControllerConfig() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientGetControllerConfig(CMsgRemoteClientGetControllerConfig other) : this() {
    appId_ = other.appId_;
    controllerIndex_ = other.controllerIndex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientGetControllerConfig Clone() {
    return new CMsgRemoteClientGetControllerConfig(this);
  }

  /// <summary>Field number for the "app_id" field.</summary>
  public const int AppIdFieldNumber = 1;
  /// <summary>Default value for the "app_id" field</summary>
  public const uint AppIdDefaultValue = 0;

  private uint? appId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AppId {
    get { return appId_ ?? AppIdDefaultValue; }
    set {
      appId_ = value;
    }
  }
  /// <summary>Gets whether the "app_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAppId {
    get { return appId_ != null; }
  }
  /// <summary>Clears the value of the "app_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAppId() {
    appId_ = null;
  }

  /// <summary>Field number for the "controller_index" field.</summary>
  public const int ControllerIndexFieldNumber = 3;
  /// <summary>Default value for the "controller_index" field</summary>
  public const uint ControllerIndexDefaultValue = 0;

  private uint? controllerIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ControllerIndex {
    get { return controllerIndex_ ?? ControllerIndexDefaultValue; }
    set {
      controllerIndex_ = value;
    }
  }
  /// <summary>Gets whether the "controller_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasControllerIndex {
    get { return controllerIndex_ != null; }
  }
  /// <summary>Clears the value of the "controller_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearControllerIndex() {
    controllerIndex_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientGetControllerConfig);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientGetControllerConfig other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AppId != other.AppId) return false;
    if (ControllerIndex != other.ControllerIndex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAppId) hash ^= AppId.GetHashCode();
    if (HasControllerIndex) hash ^= ControllerIndex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasAppId) {
      output.WriteRawTag(8);
      output.WriteUInt32(AppId);
    }
    if (HasControllerIndex) {
      output.WriteRawTag(24);
      output.WriteUInt32(ControllerIndex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAppId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AppId);
    }
    if (HasControllerIndex) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerIndex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientGetControllerConfig other) {
    if (other == null) {
      return;
    }
    if (other.HasAppId) {
      AppId = other.AppId;
    }
    if (other.HasControllerIndex) {
      ControllerIndex = other.ControllerIndex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AppId = input.ReadUInt32();
          break;
        }
        case 24: {
          ControllerIndex = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgRemoteClientGetControllerConfigResponse : pb::IMessage<CMsgRemoteClientGetControllerConfigResponse> {
  private static readonly pb::MessageParser<CMsgRemoteClientGetControllerConfigResponse> _parser = new pb::MessageParser<CMsgRemoteClientGetControllerConfigResponse>(() => new CMsgRemoteClientGetControllerConfigResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientGetControllerConfigResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientGetControllerConfigResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientGetControllerConfigResponse(CMsgRemoteClientGetControllerConfigResponse other) : this() {
    eresult_ = other.eresult_;
    configVdf_ = other.configVdf_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientGetControllerConfigResponse Clone() {
    return new CMsgRemoteClientGetControllerConfigResponse(this);
  }

  /// <summary>Field number for the "eresult" field.</summary>
  public const int EresultFieldNumber = 1;
  /// <summary>Default value for the "eresult" field</summary>
  public const int EresultDefaultValue = 2;

  private int? eresult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Eresult {
    get { return eresult_ ?? EresultDefaultValue; }
    set {
      eresult_ = value;
    }
  }
  /// <summary>Gets whether the "eresult" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEresult {
    get { return eresult_ != null; }
  }
  /// <summary>Clears the value of the "eresult" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEresult() {
    eresult_ = null;
  }

  /// <summary>Field number for the "config_vdf" field.</summary>
  public const int ConfigVdfFieldNumber = 2;
  /// <summary>Default value for the "config_vdf" field</summary>
  public readonly static pb::ByteString ConfigVdfDefaultValue = pb::ByteString.Empty;

  private pb::ByteString configVdf_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ConfigVdf {
    get { return configVdf_ ?? ConfigVdfDefaultValue; }
    set {
      configVdf_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "config_vdf" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasConfigVdf {
    get { return configVdf_ != null; }
  }
  /// <summary>Clears the value of the "config_vdf" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearConfigVdf() {
    configVdf_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientGetControllerConfigResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientGetControllerConfigResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Eresult != other.Eresult) return false;
    if (ConfigVdf != other.ConfigVdf) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEresult) hash ^= Eresult.GetHashCode();
    if (HasConfigVdf) hash ^= ConfigVdf.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasEresult) {
      output.WriteRawTag(8);
      output.WriteInt32(Eresult);
    }
    if (HasConfigVdf) {
      output.WriteRawTag(18);
      output.WriteBytes(ConfigVdf);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEresult) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eresult);
    }
    if (HasConfigVdf) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConfigVdf);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientGetControllerConfigResponse other) {
    if (other == null) {
      return;
    }
    if (other.HasEresult) {
      Eresult = other.Eresult;
    }
    if (other.HasConfigVdf) {
      ConfigVdf = other.ConfigVdf;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Eresult = input.ReadInt32();
          break;
        }
        case 18: {
          ConfigVdf = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgRemoteClientStreamingEnabled : pb::IMessage<CMsgRemoteClientStreamingEnabled> {
  private static readonly pb::MessageParser<CMsgRemoteClientStreamingEnabled> _parser = new pb::MessageParser<CMsgRemoteClientStreamingEnabled>(() => new CMsgRemoteClientStreamingEnabled());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientStreamingEnabled> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientStreamingEnabled() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientStreamingEnabled(CMsgRemoteClientStreamingEnabled other) : this() {
    enabled_ = other.enabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientStreamingEnabled Clone() {
    return new CMsgRemoteClientStreamingEnabled(this);
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 1;
  /// <summary>Default value for the "enabled" field</summary>
  public const bool EnabledDefaultValue = false;

  private bool? enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { return enabled_ ?? EnabledDefaultValue; }
    set {
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnabled {
    get { return enabled_ != null; }
  }
  /// <summary>Clears the value of the "enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnabled() {
    enabled_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientStreamingEnabled);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientStreamingEnabled other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enabled != other.Enabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasEnabled) {
      output.WriteRawTag(8);
      output.WriteBool(Enabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientStreamingEnabled other) {
    if (other == null) {
      return;
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enabled = input.ReadBool();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasEnabled) {
      return false;
    }
    return true;
  }
}

#endregion


#endregion Designer generated code
