// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: steammessages_base.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from steammessages_base.proto</summary>
public static partial class SteammessagesBaseReflection {

  #region Descriptor
  /// <summary>File descriptor for steammessages_base.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SteammessagesBaseReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChhzdGVhbW1lc3NhZ2VzX2Jhc2UucHJvdG8aIGdvb2dsZS9wcm90b2J1Zi9k",
          "ZXNjcmlwdG9yLnByb3RvIjEKDUNNc2dJUEFkZHJlc3MSDAoCdjQYASABKAdI",
          "ABIMCgJ2NhgCIAEoDEgAQgQKAmlwIvUEChJDTXNnUHJvdG9CdWZIZWFkZXIS",
          "DwoHc3RlYW1pZBgBIAEoBhIYChBjbGllbnRfc2Vzc2lvbmlkGAIgASgFEhUK",
          "DXJvdXRpbmdfYXBwaWQYAyABKA0SKgoMam9iaWRfc291cmNlGAogASgGOhQx",
          "ODQ0Njc0NDA3MzcwOTU1MTYxNRIqCgxqb2JpZF90YXJnZXQYCyABKAY6FDE4",
          "NDQ2NzQ0MDczNzA5NTUxNjE1EhcKD3RhcmdldF9qb2JfbmFtZRgMIAEoCRIP",
          "CgdzZXFfbnVtGBggASgFEhIKB2VyZXN1bHQYDSABKAU6ATISFQoNZXJyb3Jf",
          "bWVzc2FnZRgOIAEoCRIaChJhdXRoX2FjY291bnRfZmxhZ3MYECABKA0SFAoM",
          "dG9rZW5fc291cmNlGBYgASgNEhsKE2FkbWluX3Nwb29maW5nX3VzZXIYFyAB",
          "KAgSGgoPdHJhbnNwb3J0X2Vycm9yGBEgASgFOgExEicKCW1lc3NhZ2VpZBgS",
          "IAEoBDoUMTg0NDY3NDQwNzM3MDk1NTE2MTUSGgoScHVibGlzaGVyX2dyb3Vw",
          "X2lkGBMgASgNEg0KBXN5c2lkGBQgASgNEhEKCXRyYWNlX3RhZxgVIAEoBBIV",
          "Cg13ZWJhcGlfa2V5X2lkGBkgASgNEh8KF2lzX2Zyb21fZXh0ZXJuYWxfc291",
          "cmNlGBogASgIEhgKEGZvcndhcmRfdG9fc3lzaWQYGyADKA0SEAoIY21fc3lz",
          "aWQYHCABKA0SEAoId2dfdG9rZW4YHiABKAkSDAoCaXAYDyABKA1IABIPCgVp",
          "cF92NhgdIAEoDEgAQgkKB2lwX2FkZHIiOAoJQ01zZ011bHRpEhUKDXNpemVf",
          "dW56aXBwZWQYASABKA0SFAoMbWVzc2FnZV9ib2R5GAIgASgMIisKE0NNc2dQ",
          "cm90b2J1ZldyYXBwZWQSFAoMbWVzc2FnZV9ib2R5GAEgASgMIo8BCg5DTXNn",
          "QXV0aFRpY2tldBIOCgZlc3RhdGUYASABKA0SEgoHZXJlc3VsdBgCIAEoDToB",
          "MhIPCgdzdGVhbWlkGAMgASgGEg4KBmdhbWVpZBgEIAEoBhIUCgxoX3N0ZWFt",
          "X3BpcGUYBSABKA0SEgoKdGlja2V0X2NyYxgGIAEoDRIOCgZ0aWNrZXQYByAB",
          "KAwi9gEKFENDRERCQXBwRGV0YWlsQ29tbW9uEg0KBWFwcGlkGAEgASgNEgwK",
          "BG5hbWUYAiABKAkSDAoEaWNvbhgDIAEoCRIMCgRsb2dvGAQgASgJEhIKCmxv",
          "Z29fc21hbGwYBSABKAkSDAoEdG9vbBgGIAEoCBIMCgRkZW1vGAcgASgIEg0K",
          "BW1lZGlhGAggASgIEh8KF2NvbW11bml0eV92aXNpYmxlX3N0YXRzGAkgASgI",
          "EhUKDWZyaWVuZGx5X25hbWUYCiABKAkSEwoLcHJvcGFnYXRpb24YCyABKAkS",
          "GQoRaGFzX2FkdWx0X2NvbnRlbnQYDCABKAgi7wIKDUNNc2dBcHBSaWdodHMS",
          "EQoJZWRpdF9pbmZvGAEgASgIEg8KB3B1Ymxpc2gYAiABKAgSFwoPdmlld19l",
          "cnJvcl9kYXRhGAMgASgIEhAKCGRvd25sb2FkGAQgASgIEhUKDXVwbG9hZF9j",
          "ZGtleXMYBSABKAgSFwoPZ2VuZXJhdGVfY2RrZXlzGAYgASgIEhcKD3ZpZXdf",
          "ZmluYW5jaWFscxgHIAEoCBISCgptYW5hZ2VfY2VnGAggASgIEhYKDm1hbmFn",
          "ZV9zaWduaW5nGAkgASgIEhUKDW1hbmFnZV9jZGtleXMYCiABKAgSFgoOZWRp",
          "dF9tYXJrZXRpbmcYCyABKAgSFwoPZWNvbm9teV9zdXBwb3J0GAwgASgIEiIK",
          "GmVjb25vbXlfc3VwcG9ydF9zdXBlcnZpc29yGA0gASgIEhYKDm1hbmFnZV9w",
          "cmljaW5nGA4gASgIEhYKDmJyb2FkY2FzdF9saXZlGA8gASgIIvECChNDQ3Vy",
          "YXRvclByZWZlcmVuY2VzEhsKE3N1cHBvcnRlZF9sYW5ndWFnZXMYASABKA0S",
          "GAoQcGxhdGZvcm1fd2luZG93cxgCIAEoCBIUCgxwbGF0Zm9ybV9tYWMYAyAB",
          "KAgSFgoOcGxhdGZvcm1fbGludXgYBCABKAgSEgoKdnJfY29udGVudBgFIAEo",
          "CBIeChZhZHVsdF9jb250ZW50X3Zpb2xlbmNlGAYgASgIEhkKEWFkdWx0X2Nv",
          "bnRlbnRfc2V4GAcgASgIEhkKEXRpbWVzdGFtcF91cGRhdGVkGAggASgNEhYK",
          "DnRhZ2lkc19jdXJhdGVkGAkgAygNEhcKD3RhZ2lkc19maWx0ZXJlZBgKIAMo",
          "DRIVCg13ZWJzaXRlX3RpdGxlGAsgASgJEhMKC3dlYnNpdGVfdXJsGAwgASgJ",
          "EhYKDmRpc2N1c3Npb25fdXJsGA0gASgJEhYKDnNob3dfYnJvYWRjYXN0GA4g",
          "ASgIIkAKEkNMb2NhbGl6YXRpb25Ub2tlbhIQCghsYW5ndWFnZRgBIAEoDRIY",
          "ChBsb2NhbGl6ZWRfc3RyaW5nGAIgASgJIs0BChdDQ2xhbkV2ZW50VXNlck5l",
          "d3NUdXBsZRIOCgZjbGFuaWQYASABKA0SEQoJZXZlbnRfZ2lkGAIgASgGEhgK",
          "EGFubm91bmNlbWVudF9naWQYAyABKAYSEwoLcnRpbWVfc3RhcnQYBCABKA0S",
          "EQoJcnRpbWVfZW5kGAUgASgNEhYKDnByaW9yaXR5X3Njb3JlGAYgASgNEgwK",
          "BHR5cGUYByABKA0SGAoQY2xhbXBfcmFuZ2Vfc2xvdBgIIAEoDRINCgVhcHBp",
          "ZBgJIAEoDSKAAQoWQ0NsYW5NYXRjaEV2ZW50QnlSYW5nZRIUCgxydGltZV9i",
          "ZWZvcmUYASABKA0SEwoLcnRpbWVfYWZ0ZXIYAiABKA0SEQoJcXVhbGlmaWVk",
          "GAMgASgNEigKBmV2ZW50cxgEIAMoCzIYLkNDbGFuRXZlbnRVc2VyTmV3c1R1",
          "cGxlOkEKEm1zZ3Bvb2xfc29mdF9saW1pdBIfLmdvb2dsZS5wcm90b2J1Zi5N",
          "ZXNzYWdlT3B0aW9ucxjQhgMgASgFOgIzMjpCChJtc2dwb29sX2hhcmRfbGlt",
          "aXQSHy5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMY0YYDIAEoBToD",
          "Mzg0OkMKFGZvcmNlX3BocF9nZW5lcmF0aW9uEhwuZ29vZ2xlLnByb3RvYnVm",
          "LkZpbGVPcHRpb25zGNCGAyABKAg6BWZhbHNlOkgKGHBocF9vdXRwdXRfYWx3",
          "YXlzX251bWJlchIdLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMY5IYD",
          "IAEoCDoFZmFsc2VCBUgBgAEA"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { pbr::FileDescriptor.DescriptorProtoFileDescriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pb::Extension[] { SteammessagesBaseExtensions.MsgpoolSoftLimit, SteammessagesBaseExtensions.MsgpoolHardLimit, SteammessagesBaseExtensions.ForcePhpGeneration, SteammessagesBaseExtensions.PhpOutputAlwaysNumber }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgIPAddress), global::CMsgIPAddress.Parser, new[]{ "V4", "V6" }, new[]{ "Ip" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgProtoBufHeader), global::CMsgProtoBufHeader.Parser, new[]{ "Steamid", "ClientSessionid", "RoutingAppid", "JobidSource", "JobidTarget", "TargetJobName", "SeqNum", "Eresult", "ErrorMessage", "AuthAccountFlags", "TokenSource", "AdminSpoofingUser", "TransportError", "Messageid", "PublisherGroupId", "Sysid", "TraceTag", "WebapiKeyId", "IsFromExternalSource", "ForwardToSysid", "CmSysid", "WgToken", "Ip", "IpV6" }, new[]{ "IpAddr" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgMulti), global::CMsgMulti.Parser, new[]{ "SizeUnzipped", "MessageBody" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgProtobufWrapped), global::CMsgProtobufWrapped.Parser, new[]{ "MessageBody" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgAuthTicket), global::CMsgAuthTicket.Parser, new[]{ "Estate", "Eresult", "Steamid", "Gameid", "HSteamPipe", "TicketCrc", "Ticket" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CCDDBAppDetailCommon), global::CCDDBAppDetailCommon.Parser, new[]{ "Appid", "Name", "Icon", "Logo", "LogoSmall", "Tool", "Demo", "Media", "CommunityVisibleStats", "FriendlyName", "Propagation", "HasAdultContent" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgAppRights), global::CMsgAppRights.Parser, new[]{ "EditInfo", "Publish", "ViewErrorData", "Download", "UploadCdkeys", "GenerateCdkeys", "ViewFinancials", "ManageCeg", "ManageSigning", "ManageCdkeys", "EditMarketing", "EconomySupport", "EconomySupportSupervisor", "ManagePricing", "BroadcastLive" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CCuratorPreferences), global::CCuratorPreferences.Parser, new[]{ "SupportedLanguages", "PlatformWindows", "PlatformMac", "PlatformLinux", "VrContent", "AdultContentViolence", "AdultContentSex", "TimestampUpdated", "TagidsCurated", "TagidsFiltered", "WebsiteTitle", "WebsiteUrl", "DiscussionUrl", "ShowBroadcast" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CLocalizationToken), global::CLocalizationToken.Parser, new[]{ "Language", "LocalizedString" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CClanEventUserNewsTuple), global::CClanEventUserNewsTuple.Parser, new[]{ "Clanid", "EventGid", "AnnouncementGid", "RtimeStart", "RtimeEnd", "PriorityScore", "Type", "ClampRangeSlot", "Appid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CClanMatchEventByRange), global::CClanMatchEventByRange.Parser, new[]{ "RtimeBefore", "RtimeAfter", "Qualified", "Events" }, null, null, null, null)
        }));
  }
  #endregion

}

/// <summary>Holder for extension identifiers generated from the top level of steammessages_base.proto</summary>
public static partial class SteammessagesBaseExtensions {
  public static readonly pb::Extension<global::Google.Protobuf.Reflection.MessageOptions, int> MsgpoolSoftLimit =
    new pb::Extension<global::Google.Protobuf.Reflection.MessageOptions, int>(pb::FieldCodec.ForInt32(400000, 32));
  public static readonly pb::Extension<global::Google.Protobuf.Reflection.MessageOptions, int> MsgpoolHardLimit =
    new pb::Extension<global::Google.Protobuf.Reflection.MessageOptions, int>(pb::FieldCodec.ForInt32(400008, 384));
  public static readonly pb::Extension<global::Google.Protobuf.Reflection.FileOptions, bool> ForcePhpGeneration =
    new pb::Extension<global::Google.Protobuf.Reflection.FileOptions, bool>(pb::FieldCodec.ForBool(400000, false));
  public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, bool> PhpOutputAlwaysNumber =
    new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, bool>(pb::FieldCodec.ForBool(400160, false));
}

#region Messages
public sealed partial class CMsgIPAddress : pb::IMessage<CMsgIPAddress> {
  private static readonly pb::MessageParser<CMsgIPAddress> _parser = new pb::MessageParser<CMsgIPAddress>(() => new CMsgIPAddress());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgIPAddress> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesBaseReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgIPAddress() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgIPAddress(CMsgIPAddress other) : this() {
    switch (other.IpCase) {
      case IpOneofCase.V4:
        V4 = other.V4;
        break;
      case IpOneofCase.V6:
        V6 = other.V6;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgIPAddress Clone() {
    return new CMsgIPAddress(this);
  }

  /// <summary>Field number for the "v4" field.</summary>
  public const int V4FieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint V4 {
    get { return HasV4 ? (uint) ip_ : 0; }
    set {
      ip_ = value;
      ipCase_ = IpOneofCase.V4;
    }
  }
  /// <summary>Gets whether the "v4" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasV4 {
    get { return ipCase_ == IpOneofCase.V4; }
  }
  /// <summary> Clears the value of the oneof if it's currently set to "v4" </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearV4() {
    if (HasV4) {
      ClearIp();
    }
  }

  /// <summary>Field number for the "v6" field.</summary>
  public const int V6FieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString V6 {
    get { return HasV6 ? (pb::ByteString) ip_ : pb::ByteString.Empty; }
    set {
      ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      ipCase_ = IpOneofCase.V6;
    }
  }
  /// <summary>Gets whether the "v6" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasV6 {
    get { return ipCase_ == IpOneofCase.V6; }
  }
  /// <summary> Clears the value of the oneof if it's currently set to "v6" </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearV6() {
    if (HasV6) {
      ClearIp();
    }
  }

  private object ip_;
  /// <summary>Enum of possible cases for the "ip" oneof.</summary>
  public enum IpOneofCase {
    None = 0,
    V4 = 1,
    V6 = 2,
  }
  private IpOneofCase ipCase_ = IpOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IpOneofCase IpCase {
    get { return ipCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIp() {
    ipCase_ = IpOneofCase.None;
    ip_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgIPAddress);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgIPAddress other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (V4 != other.V4) return false;
    if (V6 != other.V6) return false;
    if (IpCase != other.IpCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasV4) hash ^= V4.GetHashCode();
    if (HasV6) hash ^= V6.GetHashCode();
    hash ^= (int) ipCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasV4) {
      output.WriteRawTag(13);
      output.WriteFixed32(V4);
    }
    if (HasV6) {
      output.WriteRawTag(18);
      output.WriteBytes(V6);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasV4) {
      size += 1 + 4;
    }
    if (HasV6) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(V6);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgIPAddress other) {
    if (other == null) {
      return;
    }
    switch (other.IpCase) {
      case IpOneofCase.V4:
        V4 = other.V4;
        break;
      case IpOneofCase.V6:
        V6 = other.V6;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          V4 = input.ReadFixed32();
          break;
        }
        case 18: {
          V6 = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgProtoBufHeader : pb::IMessage<CMsgProtoBufHeader> {
  private static readonly pb::MessageParser<CMsgProtoBufHeader> _parser = new pb::MessageParser<CMsgProtoBufHeader>(() => new CMsgProtoBufHeader());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgProtoBufHeader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesBaseReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgProtoBufHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgProtoBufHeader(CMsgProtoBufHeader other) : this() {
    steamid_ = other.steamid_;
    clientSessionid_ = other.clientSessionid_;
    routingAppid_ = other.routingAppid_;
    jobidSource_ = other.jobidSource_;
    jobidTarget_ = other.jobidTarget_;
    targetJobName_ = other.targetJobName_;
    seqNum_ = other.seqNum_;
    eresult_ = other.eresult_;
    errorMessage_ = other.errorMessage_;
    authAccountFlags_ = other.authAccountFlags_;
    tokenSource_ = other.tokenSource_;
    adminSpoofingUser_ = other.adminSpoofingUser_;
    transportError_ = other.transportError_;
    messageid_ = other.messageid_;
    publisherGroupId_ = other.publisherGroupId_;
    sysid_ = other.sysid_;
    traceTag_ = other.traceTag_;
    webapiKeyId_ = other.webapiKeyId_;
    isFromExternalSource_ = other.isFromExternalSource_;
    forwardToSysid_ = other.forwardToSysid_.Clone();
    cmSysid_ = other.cmSysid_;
    wgToken_ = other.wgToken_;
    switch (other.IpAddrCase) {
      case IpAddrOneofCase.Ip:
        Ip = other.Ip;
        break;
      case IpAddrOneofCase.IpV6:
        IpV6 = other.IpV6;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgProtoBufHeader Clone() {
    return new CMsgProtoBufHeader(this);
  }

  /// <summary>Field number for the "steamid" field.</summary>
  public const int SteamidFieldNumber = 1;
  /// <summary>Default value for the "steamid" field</summary>
  public const ulong SteamidDefaultValue = 0UL;

  private ulong? steamid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Steamid {
    get { return steamid_ ?? SteamidDefaultValue; }
    set {
      steamid_ = value;
    }
  }
  /// <summary>Gets whether the "steamid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSteamid {
    get { return steamid_ != null; }
  }
  /// <summary>Clears the value of the "steamid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSteamid() {
    steamid_ = null;
  }

  /// <summary>Field number for the "client_sessionid" field.</summary>
  public const int ClientSessionidFieldNumber = 2;
  /// <summary>Default value for the "client_sessionid" field</summary>
  public const int ClientSessionidDefaultValue = 0;

  private int? clientSessionid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientSessionid {
    get { return clientSessionid_ ?? ClientSessionidDefaultValue; }
    set {
      clientSessionid_ = value;
    }
  }
  /// <summary>Gets whether the "client_sessionid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientSessionid {
    get { return clientSessionid_ != null; }
  }
  /// <summary>Clears the value of the "client_sessionid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientSessionid() {
    clientSessionid_ = null;
  }

  /// <summary>Field number for the "routing_appid" field.</summary>
  public const int RoutingAppidFieldNumber = 3;
  /// <summary>Default value for the "routing_appid" field</summary>
  public const uint RoutingAppidDefaultValue = 0;

  private uint? routingAppid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RoutingAppid {
    get { return routingAppid_ ?? RoutingAppidDefaultValue; }
    set {
      routingAppid_ = value;
    }
  }
  /// <summary>Gets whether the "routing_appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRoutingAppid {
    get { return routingAppid_ != null; }
  }
  /// <summary>Clears the value of the "routing_appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRoutingAppid() {
    routingAppid_ = null;
  }

  /// <summary>Field number for the "jobid_source" field.</summary>
  public const int JobidSourceFieldNumber = 10;
  /// <summary>Default value for the "jobid_source" field</summary>
  public const ulong JobidSourceDefaultValue = 18446744073709551615UL;

  private ulong? jobidSource_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong JobidSource {
    get { return jobidSource_ ?? JobidSourceDefaultValue; }
    set {
      jobidSource_ = value;
    }
  }
  /// <summary>Gets whether the "jobid_source" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasJobidSource {
    get { return jobidSource_ != null; }
  }
  /// <summary>Clears the value of the "jobid_source" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearJobidSource() {
    jobidSource_ = null;
  }

  /// <summary>Field number for the "jobid_target" field.</summary>
  public const int JobidTargetFieldNumber = 11;
  /// <summary>Default value for the "jobid_target" field</summary>
  public const ulong JobidTargetDefaultValue = 18446744073709551615UL;

  private ulong? jobidTarget_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong JobidTarget {
    get { return jobidTarget_ ?? JobidTargetDefaultValue; }
    set {
      jobidTarget_ = value;
    }
  }
  /// <summary>Gets whether the "jobid_target" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasJobidTarget {
    get { return jobidTarget_ != null; }
  }
  /// <summary>Clears the value of the "jobid_target" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearJobidTarget() {
    jobidTarget_ = null;
  }

  /// <summary>Field number for the "target_job_name" field.</summary>
  public const int TargetJobNameFieldNumber = 12;
  /// <summary>Default value for the "target_job_name" field</summary>
  public const string TargetJobNameDefaultValue = "";

  private string targetJobName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TargetJobName {
    get { return targetJobName_ ?? TargetJobNameDefaultValue; }
    set {
      targetJobName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "target_job_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTargetJobName {
    get { return targetJobName_ != null; }
  }
  /// <summary>Clears the value of the "target_job_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTargetJobName() {
    targetJobName_ = null;
  }

  /// <summary>Field number for the "seq_num" field.</summary>
  public const int SeqNumFieldNumber = 24;
  /// <summary>Default value for the "seq_num" field</summary>
  public const int SeqNumDefaultValue = 0;

  private int? seqNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeqNum {
    get { return seqNum_ ?? SeqNumDefaultValue; }
    set {
      seqNum_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSeqNum {
    get { return seqNum_ != null; }
  }
  /// <summary>Clears the value of the "seq_num" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSeqNum() {
    seqNum_ = null;
  }

  /// <summary>Field number for the "eresult" field.</summary>
  public const int EresultFieldNumber = 13;
  /// <summary>Default value for the "eresult" field</summary>
  public const int EresultDefaultValue = 2;

  private int? eresult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Eresult {
    get { return eresult_ ?? EresultDefaultValue; }
    set {
      eresult_ = value;
    }
  }
  /// <summary>Gets whether the "eresult" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEresult {
    get { return eresult_ != null; }
  }
  /// <summary>Clears the value of the "eresult" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEresult() {
    eresult_ = null;
  }

  /// <summary>Field number for the "error_message" field.</summary>
  public const int ErrorMessageFieldNumber = 14;
  /// <summary>Default value for the "error_message" field</summary>
  public const string ErrorMessageDefaultValue = "";

  private string errorMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMessage {
    get { return errorMessage_ ?? ErrorMessageDefaultValue; }
    set {
      errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "error_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasErrorMessage {
    get { return errorMessage_ != null; }
  }
  /// <summary>Clears the value of the "error_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearErrorMessage() {
    errorMessage_ = null;
  }

  /// <summary>Field number for the "auth_account_flags" field.</summary>
  public const int AuthAccountFlagsFieldNumber = 16;
  /// <summary>Default value for the "auth_account_flags" field</summary>
  public const uint AuthAccountFlagsDefaultValue = 0;

  private uint? authAccountFlags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AuthAccountFlags {
    get { return authAccountFlags_ ?? AuthAccountFlagsDefaultValue; }
    set {
      authAccountFlags_ = value;
    }
  }
  /// <summary>Gets whether the "auth_account_flags" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthAccountFlags {
    get { return authAccountFlags_ != null; }
  }
  /// <summary>Clears the value of the "auth_account_flags" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthAccountFlags() {
    authAccountFlags_ = null;
  }

  /// <summary>Field number for the "token_source" field.</summary>
  public const int TokenSourceFieldNumber = 22;
  /// <summary>Default value for the "token_source" field</summary>
  public const uint TokenSourceDefaultValue = 0;

  private uint? tokenSource_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TokenSource {
    get { return tokenSource_ ?? TokenSourceDefaultValue; }
    set {
      tokenSource_ = value;
    }
  }
  /// <summary>Gets whether the "token_source" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTokenSource {
    get { return tokenSource_ != null; }
  }
  /// <summary>Clears the value of the "token_source" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTokenSource() {
    tokenSource_ = null;
  }

  /// <summary>Field number for the "admin_spoofing_user" field.</summary>
  public const int AdminSpoofingUserFieldNumber = 23;
  /// <summary>Default value for the "admin_spoofing_user" field</summary>
  public const bool AdminSpoofingUserDefaultValue = false;

  private bool? adminSpoofingUser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool AdminSpoofingUser {
    get { return adminSpoofingUser_ ?? AdminSpoofingUserDefaultValue; }
    set {
      adminSpoofingUser_ = value;
    }
  }
  /// <summary>Gets whether the "admin_spoofing_user" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAdminSpoofingUser {
    get { return adminSpoofingUser_ != null; }
  }
  /// <summary>Clears the value of the "admin_spoofing_user" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAdminSpoofingUser() {
    adminSpoofingUser_ = null;
  }

  /// <summary>Field number for the "transport_error" field.</summary>
  public const int TransportErrorFieldNumber = 17;
  /// <summary>Default value for the "transport_error" field</summary>
  public const int TransportErrorDefaultValue = 1;

  private int? transportError_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TransportError {
    get { return transportError_ ?? TransportErrorDefaultValue; }
    set {
      transportError_ = value;
    }
  }
  /// <summary>Gets whether the "transport_error" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTransportError {
    get { return transportError_ != null; }
  }
  /// <summary>Clears the value of the "transport_error" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTransportError() {
    transportError_ = null;
  }

  /// <summary>Field number for the "messageid" field.</summary>
  public const int MessageidFieldNumber = 18;
  /// <summary>Default value for the "messageid" field</summary>
  public const ulong MessageidDefaultValue = 18446744073709551615UL;

  private ulong? messageid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Messageid {
    get { return messageid_ ?? MessageidDefaultValue; }
    set {
      messageid_ = value;
    }
  }
  /// <summary>Gets whether the "messageid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMessageid {
    get { return messageid_ != null; }
  }
  /// <summary>Clears the value of the "messageid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMessageid() {
    messageid_ = null;
  }

  /// <summary>Field number for the "publisher_group_id" field.</summary>
  public const int PublisherGroupIdFieldNumber = 19;
  /// <summary>Default value for the "publisher_group_id" field</summary>
  public const uint PublisherGroupIdDefaultValue = 0;

  private uint? publisherGroupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PublisherGroupId {
    get { return publisherGroupId_ ?? PublisherGroupIdDefaultValue; }
    set {
      publisherGroupId_ = value;
    }
  }
  /// <summary>Gets whether the "publisher_group_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublisherGroupId {
    get { return publisherGroupId_ != null; }
  }
  /// <summary>Clears the value of the "publisher_group_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublisherGroupId() {
    publisherGroupId_ = null;
  }

  /// <summary>Field number for the "sysid" field.</summary>
  public const int SysidFieldNumber = 20;
  /// <summary>Default value for the "sysid" field</summary>
  public const uint SysidDefaultValue = 0;

  private uint? sysid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Sysid {
    get { return sysid_ ?? SysidDefaultValue; }
    set {
      sysid_ = value;
    }
  }
  /// <summary>Gets whether the "sysid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSysid {
    get { return sysid_ != null; }
  }
  /// <summary>Clears the value of the "sysid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSysid() {
    sysid_ = null;
  }

  /// <summary>Field number for the "trace_tag" field.</summary>
  public const int TraceTagFieldNumber = 21;
  /// <summary>Default value for the "trace_tag" field</summary>
  public const ulong TraceTagDefaultValue = 0UL;

  private ulong? traceTag_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong TraceTag {
    get { return traceTag_ ?? TraceTagDefaultValue; }
    set {
      traceTag_ = value;
    }
  }
  /// <summary>Gets whether the "trace_tag" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTraceTag {
    get { return traceTag_ != null; }
  }
  /// <summary>Clears the value of the "trace_tag" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTraceTag() {
    traceTag_ = null;
  }

  /// <summary>Field number for the "webapi_key_id" field.</summary>
  public const int WebapiKeyIdFieldNumber = 25;
  /// <summary>Default value for the "webapi_key_id" field</summary>
  public const uint WebapiKeyIdDefaultValue = 0;

  private uint? webapiKeyId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WebapiKeyId {
    get { return webapiKeyId_ ?? WebapiKeyIdDefaultValue; }
    set {
      webapiKeyId_ = value;
    }
  }
  /// <summary>Gets whether the "webapi_key_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWebapiKeyId {
    get { return webapiKeyId_ != null; }
  }
  /// <summary>Clears the value of the "webapi_key_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWebapiKeyId() {
    webapiKeyId_ = null;
  }

  /// <summary>Field number for the "is_from_external_source" field.</summary>
  public const int IsFromExternalSourceFieldNumber = 26;
  /// <summary>Default value for the "is_from_external_source" field</summary>
  public const bool IsFromExternalSourceDefaultValue = false;

  private bool? isFromExternalSource_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsFromExternalSource {
    get { return isFromExternalSource_ ?? IsFromExternalSourceDefaultValue; }
    set {
      isFromExternalSource_ = value;
    }
  }
  /// <summary>Gets whether the "is_from_external_source" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsFromExternalSource {
    get { return isFromExternalSource_ != null; }
  }
  /// <summary>Clears the value of the "is_from_external_source" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsFromExternalSource() {
    isFromExternalSource_ = null;
  }

  /// <summary>Field number for the "forward_to_sysid" field.</summary>
  public const int ForwardToSysidFieldNumber = 27;
  private static readonly pb::FieldCodec<uint> _repeated_forwardToSysid_codec
      = pb::FieldCodec.ForUInt32(216);
  private readonly pbc::RepeatedField<uint> forwardToSysid_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> ForwardToSysid {
    get { return forwardToSysid_; }
  }

  /// <summary>Field number for the "cm_sysid" field.</summary>
  public const int CmSysidFieldNumber = 28;
  /// <summary>Default value for the "cm_sysid" field</summary>
  public const uint CmSysidDefaultValue = 0;

  private uint? cmSysid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CmSysid {
    get { return cmSysid_ ?? CmSysidDefaultValue; }
    set {
      cmSysid_ = value;
    }
  }
  /// <summary>Gets whether the "cm_sysid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCmSysid {
    get { return cmSysid_ != null; }
  }
  /// <summary>Clears the value of the "cm_sysid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCmSysid() {
    cmSysid_ = null;
  }

  /// <summary>Field number for the "wg_token" field.</summary>
  public const int WgTokenFieldNumber = 30;
  /// <summary>Default value for the "wg_token" field</summary>
  public const string WgTokenDefaultValue = "";

  private string wgToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WgToken {
    get { return wgToken_ ?? WgTokenDefaultValue; }
    set {
      wgToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "wg_token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWgToken {
    get { return wgToken_ != null; }
  }
  /// <summary>Clears the value of the "wg_token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWgToken() {
    wgToken_ = null;
  }

  /// <summary>Field number for the "ip" field.</summary>
  public const int IpFieldNumber = 15;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Ip {
    get { return HasIp ? (uint) ipAddr_ : 0; }
    set {
      ipAddr_ = value;
      ipAddrCase_ = IpAddrOneofCase.Ip;
    }
  }
  /// <summary>Gets whether the "ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIp {
    get { return ipAddrCase_ == IpAddrOneofCase.Ip; }
  }
  /// <summary> Clears the value of the oneof if it's currently set to "ip" </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIp() {
    if (HasIp) {
      ClearIpAddr();
    }
  }

  /// <summary>Field number for the "ip_v6" field.</summary>
  public const int IpV6FieldNumber = 29;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString IpV6 {
    get { return HasIpV6 ? (pb::ByteString) ipAddr_ : pb::ByteString.Empty; }
    set {
      ipAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      ipAddrCase_ = IpAddrOneofCase.IpV6;
    }
  }
  /// <summary>Gets whether the "ip_v6" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIpV6 {
    get { return ipAddrCase_ == IpAddrOneofCase.IpV6; }
  }
  /// <summary> Clears the value of the oneof if it's currently set to "ip_v6" </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIpV6() {
    if (HasIpV6) {
      ClearIpAddr();
    }
  }

  private object ipAddr_;
  /// <summary>Enum of possible cases for the "ip_addr" oneof.</summary>
  public enum IpAddrOneofCase {
    None = 0,
    Ip = 15,
    IpV6 = 29,
  }
  private IpAddrOneofCase ipAddrCase_ = IpAddrOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IpAddrOneofCase IpAddrCase {
    get { return ipAddrCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIpAddr() {
    ipAddrCase_ = IpAddrOneofCase.None;
    ipAddr_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgProtoBufHeader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgProtoBufHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Steamid != other.Steamid) return false;
    if (ClientSessionid != other.ClientSessionid) return false;
    if (RoutingAppid != other.RoutingAppid) return false;
    if (JobidSource != other.JobidSource) return false;
    if (JobidTarget != other.JobidTarget) return false;
    if (TargetJobName != other.TargetJobName) return false;
    if (SeqNum != other.SeqNum) return false;
    if (Eresult != other.Eresult) return false;
    if (ErrorMessage != other.ErrorMessage) return false;
    if (AuthAccountFlags != other.AuthAccountFlags) return false;
    if (TokenSource != other.TokenSource) return false;
    if (AdminSpoofingUser != other.AdminSpoofingUser) return false;
    if (TransportError != other.TransportError) return false;
    if (Messageid != other.Messageid) return false;
    if (PublisherGroupId != other.PublisherGroupId) return false;
    if (Sysid != other.Sysid) return false;
    if (TraceTag != other.TraceTag) return false;
    if (WebapiKeyId != other.WebapiKeyId) return false;
    if (IsFromExternalSource != other.IsFromExternalSource) return false;
    if(!forwardToSysid_.Equals(other.forwardToSysid_)) return false;
    if (CmSysid != other.CmSysid) return false;
    if (WgToken != other.WgToken) return false;
    if (Ip != other.Ip) return false;
    if (IpV6 != other.IpV6) return false;
    if (IpAddrCase != other.IpAddrCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSteamid) hash ^= Steamid.GetHashCode();
    if (HasClientSessionid) hash ^= ClientSessionid.GetHashCode();
    if (HasRoutingAppid) hash ^= RoutingAppid.GetHashCode();
    if (HasJobidSource) hash ^= JobidSource.GetHashCode();
    if (HasJobidTarget) hash ^= JobidTarget.GetHashCode();
    if (HasTargetJobName) hash ^= TargetJobName.GetHashCode();
    if (HasSeqNum) hash ^= SeqNum.GetHashCode();
    if (HasEresult) hash ^= Eresult.GetHashCode();
    if (HasErrorMessage) hash ^= ErrorMessage.GetHashCode();
    if (HasAuthAccountFlags) hash ^= AuthAccountFlags.GetHashCode();
    if (HasTokenSource) hash ^= TokenSource.GetHashCode();
    if (HasAdminSpoofingUser) hash ^= AdminSpoofingUser.GetHashCode();
    if (HasTransportError) hash ^= TransportError.GetHashCode();
    if (HasMessageid) hash ^= Messageid.GetHashCode();
    if (HasPublisherGroupId) hash ^= PublisherGroupId.GetHashCode();
    if (HasSysid) hash ^= Sysid.GetHashCode();
    if (HasTraceTag) hash ^= TraceTag.GetHashCode();
    if (HasWebapiKeyId) hash ^= WebapiKeyId.GetHashCode();
    if (HasIsFromExternalSource) hash ^= IsFromExternalSource.GetHashCode();
    hash ^= forwardToSysid_.GetHashCode();
    if (HasCmSysid) hash ^= CmSysid.GetHashCode();
    if (HasWgToken) hash ^= WgToken.GetHashCode();
    if (HasIp) hash ^= Ip.GetHashCode();
    if (HasIpV6) hash ^= IpV6.GetHashCode();
    hash ^= (int) ipAddrCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasSteamid) {
      output.WriteRawTag(9);
      output.WriteFixed64(Steamid);
    }
    if (HasClientSessionid) {
      output.WriteRawTag(16);
      output.WriteInt32(ClientSessionid);
    }
    if (HasRoutingAppid) {
      output.WriteRawTag(24);
      output.WriteUInt32(RoutingAppid);
    }
    if (HasJobidSource) {
      output.WriteRawTag(81);
      output.WriteFixed64(JobidSource);
    }
    if (HasJobidTarget) {
      output.WriteRawTag(89);
      output.WriteFixed64(JobidTarget);
    }
    if (HasTargetJobName) {
      output.WriteRawTag(98);
      output.WriteString(TargetJobName);
    }
    if (HasEresult) {
      output.WriteRawTag(104);
      output.WriteInt32(Eresult);
    }
    if (HasErrorMessage) {
      output.WriteRawTag(114);
      output.WriteString(ErrorMessage);
    }
    if (HasIp) {
      output.WriteRawTag(120);
      output.WriteUInt32(Ip);
    }
    if (HasAuthAccountFlags) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(AuthAccountFlags);
    }
    if (HasTransportError) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(TransportError);
    }
    if (HasMessageid) {
      output.WriteRawTag(144, 1);
      output.WriteUInt64(Messageid);
    }
    if (HasPublisherGroupId) {
      output.WriteRawTag(152, 1);
      output.WriteUInt32(PublisherGroupId);
    }
    if (HasSysid) {
      output.WriteRawTag(160, 1);
      output.WriteUInt32(Sysid);
    }
    if (HasTraceTag) {
      output.WriteRawTag(168, 1);
      output.WriteUInt64(TraceTag);
    }
    if (HasTokenSource) {
      output.WriteRawTag(176, 1);
      output.WriteUInt32(TokenSource);
    }
    if (HasAdminSpoofingUser) {
      output.WriteRawTag(184, 1);
      output.WriteBool(AdminSpoofingUser);
    }
    if (HasSeqNum) {
      output.WriteRawTag(192, 1);
      output.WriteInt32(SeqNum);
    }
    if (HasWebapiKeyId) {
      output.WriteRawTag(200, 1);
      output.WriteUInt32(WebapiKeyId);
    }
    if (HasIsFromExternalSource) {
      output.WriteRawTag(208, 1);
      output.WriteBool(IsFromExternalSource);
    }
    forwardToSysid_.WriteTo(output, _repeated_forwardToSysid_codec);
    if (HasCmSysid) {
      output.WriteRawTag(224, 1);
      output.WriteUInt32(CmSysid);
    }
    if (HasIpV6) {
      output.WriteRawTag(234, 1);
      output.WriteBytes(IpV6);
    }
    if (HasWgToken) {
      output.WriteRawTag(242, 1);
      output.WriteString(WgToken);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasSteamid) {
      size += 1 + 8;
    }
    if (HasClientSessionid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientSessionid);
    }
    if (HasRoutingAppid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoutingAppid);
    }
    if (HasJobidSource) {
      size += 1 + 8;
    }
    if (HasJobidTarget) {
      size += 1 + 8;
    }
    if (HasTargetJobName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetJobName);
    }
    if (HasSeqNum) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeqNum);
    }
    if (HasEresult) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eresult);
    }
    if (HasErrorMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
    }
    if (HasAuthAccountFlags) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AuthAccountFlags);
    }
    if (HasTokenSource) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TokenSource);
    }
    if (HasAdminSpoofingUser) {
      size += 2 + 1;
    }
    if (HasTransportError) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(TransportError);
    }
    if (HasMessageid) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Messageid);
    }
    if (HasPublisherGroupId) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PublisherGroupId);
    }
    if (HasSysid) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Sysid);
    }
    if (HasTraceTag) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TraceTag);
    }
    if (HasWebapiKeyId) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WebapiKeyId);
    }
    if (HasIsFromExternalSource) {
      size += 2 + 1;
    }
    size += forwardToSysid_.CalculateSize(_repeated_forwardToSysid_codec);
    if (HasCmSysid) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CmSysid);
    }
    if (HasWgToken) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(WgToken);
    }
    if (HasIp) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ip);
    }
    if (HasIpV6) {
      size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpV6);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgProtoBufHeader other) {
    if (other == null) {
      return;
    }
    if (other.HasSteamid) {
      Steamid = other.Steamid;
    }
    if (other.HasClientSessionid) {
      ClientSessionid = other.ClientSessionid;
    }
    if (other.HasRoutingAppid) {
      RoutingAppid = other.RoutingAppid;
    }
    if (other.HasJobidSource) {
      JobidSource = other.JobidSource;
    }
    if (other.HasJobidTarget) {
      JobidTarget = other.JobidTarget;
    }
    if (other.HasTargetJobName) {
      TargetJobName = other.TargetJobName;
    }
    if (other.HasSeqNum) {
      SeqNum = other.SeqNum;
    }
    if (other.HasEresult) {
      Eresult = other.Eresult;
    }
    if (other.HasErrorMessage) {
      ErrorMessage = other.ErrorMessage;
    }
    if (other.HasAuthAccountFlags) {
      AuthAccountFlags = other.AuthAccountFlags;
    }
    if (other.HasTokenSource) {
      TokenSource = other.TokenSource;
    }
    if (other.HasAdminSpoofingUser) {
      AdminSpoofingUser = other.AdminSpoofingUser;
    }
    if (other.HasTransportError) {
      TransportError = other.TransportError;
    }
    if (other.HasMessageid) {
      Messageid = other.Messageid;
    }
    if (other.HasPublisherGroupId) {
      PublisherGroupId = other.PublisherGroupId;
    }
    if (other.HasSysid) {
      Sysid = other.Sysid;
    }
    if (other.HasTraceTag) {
      TraceTag = other.TraceTag;
    }
    if (other.HasWebapiKeyId) {
      WebapiKeyId = other.WebapiKeyId;
    }
    if (other.HasIsFromExternalSource) {
      IsFromExternalSource = other.IsFromExternalSource;
    }
    forwardToSysid_.Add(other.forwardToSysid_);
    if (other.HasCmSysid) {
      CmSysid = other.CmSysid;
    }
    if (other.HasWgToken) {
      WgToken = other.WgToken;
    }
    switch (other.IpAddrCase) {
      case IpAddrOneofCase.Ip:
        Ip = other.Ip;
        break;
      case IpAddrOneofCase.IpV6:
        IpV6 = other.IpV6;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          Steamid = input.ReadFixed64();
          break;
        }
        case 16: {
          ClientSessionid = input.ReadInt32();
          break;
        }
        case 24: {
          RoutingAppid = input.ReadUInt32();
          break;
        }
        case 81: {
          JobidSource = input.ReadFixed64();
          break;
        }
        case 89: {
          JobidTarget = input.ReadFixed64();
          break;
        }
        case 98: {
          TargetJobName = input.ReadString();
          break;
        }
        case 104: {
          Eresult = input.ReadInt32();
          break;
        }
        case 114: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 120: {
          Ip = input.ReadUInt32();
          break;
        }
        case 128: {
          AuthAccountFlags = input.ReadUInt32();
          break;
        }
        case 136: {
          TransportError = input.ReadInt32();
          break;
        }
        case 144: {
          Messageid = input.ReadUInt64();
          break;
        }
        case 152: {
          PublisherGroupId = input.ReadUInt32();
          break;
        }
        case 160: {
          Sysid = input.ReadUInt32();
          break;
        }
        case 168: {
          TraceTag = input.ReadUInt64();
          break;
        }
        case 176: {
          TokenSource = input.ReadUInt32();
          break;
        }
        case 184: {
          AdminSpoofingUser = input.ReadBool();
          break;
        }
        case 192: {
          SeqNum = input.ReadInt32();
          break;
        }
        case 200: {
          WebapiKeyId = input.ReadUInt32();
          break;
        }
        case 208: {
          IsFromExternalSource = input.ReadBool();
          break;
        }
        case 218:
        case 216: {
          forwardToSysid_.AddEntriesFrom(input, _repeated_forwardToSysid_codec);
          break;
        }
        case 224: {
          CmSysid = input.ReadUInt32();
          break;
        }
        case 234: {
          IpV6 = input.ReadBytes();
          break;
        }
        case 242: {
          WgToken = input.ReadString();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgMulti : pb::IMessage<CMsgMulti> {
  private static readonly pb::MessageParser<CMsgMulti> _parser = new pb::MessageParser<CMsgMulti>(() => new CMsgMulti());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgMulti> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesBaseReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgMulti() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgMulti(CMsgMulti other) : this() {
    sizeUnzipped_ = other.sizeUnzipped_;
    messageBody_ = other.messageBody_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgMulti Clone() {
    return new CMsgMulti(this);
  }

  /// <summary>Field number for the "size_unzipped" field.</summary>
  public const int SizeUnzippedFieldNumber = 1;
  /// <summary>Default value for the "size_unzipped" field</summary>
  public const uint SizeUnzippedDefaultValue = 0;

  private uint? sizeUnzipped_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SizeUnzipped {
    get { return sizeUnzipped_ ?? SizeUnzippedDefaultValue; }
    set {
      sizeUnzipped_ = value;
    }
  }
  /// <summary>Gets whether the "size_unzipped" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSizeUnzipped {
    get { return sizeUnzipped_ != null; }
  }
  /// <summary>Clears the value of the "size_unzipped" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSizeUnzipped() {
    sizeUnzipped_ = null;
  }

  /// <summary>Field number for the "message_body" field.</summary>
  public const int MessageBodyFieldNumber = 2;
  /// <summary>Default value for the "message_body" field</summary>
  public readonly static pb::ByteString MessageBodyDefaultValue = pb::ByteString.Empty;

  private pb::ByteString messageBody_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString MessageBody {
    get { return messageBody_ ?? MessageBodyDefaultValue; }
    set {
      messageBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "message_body" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMessageBody {
    get { return messageBody_ != null; }
  }
  /// <summary>Clears the value of the "message_body" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMessageBody() {
    messageBody_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgMulti);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgMulti other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SizeUnzipped != other.SizeUnzipped) return false;
    if (MessageBody != other.MessageBody) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSizeUnzipped) hash ^= SizeUnzipped.GetHashCode();
    if (HasMessageBody) hash ^= MessageBody.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasSizeUnzipped) {
      output.WriteRawTag(8);
      output.WriteUInt32(SizeUnzipped);
    }
    if (HasMessageBody) {
      output.WriteRawTag(18);
      output.WriteBytes(MessageBody);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasSizeUnzipped) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SizeUnzipped);
    }
    if (HasMessageBody) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageBody);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgMulti other) {
    if (other == null) {
      return;
    }
    if (other.HasSizeUnzipped) {
      SizeUnzipped = other.SizeUnzipped;
    }
    if (other.HasMessageBody) {
      MessageBody = other.MessageBody;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SizeUnzipped = input.ReadUInt32();
          break;
        }
        case 18: {
          MessageBody = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgProtobufWrapped : pb::IMessage<CMsgProtobufWrapped> {
  private static readonly pb::MessageParser<CMsgProtobufWrapped> _parser = new pb::MessageParser<CMsgProtobufWrapped>(() => new CMsgProtobufWrapped());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgProtobufWrapped> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesBaseReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgProtobufWrapped() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgProtobufWrapped(CMsgProtobufWrapped other) : this() {
    messageBody_ = other.messageBody_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgProtobufWrapped Clone() {
    return new CMsgProtobufWrapped(this);
  }

  /// <summary>Field number for the "message_body" field.</summary>
  public const int MessageBodyFieldNumber = 1;
  /// <summary>Default value for the "message_body" field</summary>
  public readonly static pb::ByteString MessageBodyDefaultValue = pb::ByteString.Empty;

  private pb::ByteString messageBody_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString MessageBody {
    get { return messageBody_ ?? MessageBodyDefaultValue; }
    set {
      messageBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "message_body" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMessageBody {
    get { return messageBody_ != null; }
  }
  /// <summary>Clears the value of the "message_body" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMessageBody() {
    messageBody_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgProtobufWrapped);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgProtobufWrapped other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MessageBody != other.MessageBody) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMessageBody) hash ^= MessageBody.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasMessageBody) {
      output.WriteRawTag(10);
      output.WriteBytes(MessageBody);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasMessageBody) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageBody);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgProtobufWrapped other) {
    if (other == null) {
      return;
    }
    if (other.HasMessageBody) {
      MessageBody = other.MessageBody;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          MessageBody = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgAuthTicket : pb::IMessage<CMsgAuthTicket> {
  private static readonly pb::MessageParser<CMsgAuthTicket> _parser = new pb::MessageParser<CMsgAuthTicket>(() => new CMsgAuthTicket());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgAuthTicket> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesBaseReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgAuthTicket() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgAuthTicket(CMsgAuthTicket other) : this() {
    estate_ = other.estate_;
    eresult_ = other.eresult_;
    steamid_ = other.steamid_;
    gameid_ = other.gameid_;
    hSteamPipe_ = other.hSteamPipe_;
    ticketCrc_ = other.ticketCrc_;
    ticket_ = other.ticket_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgAuthTicket Clone() {
    return new CMsgAuthTicket(this);
  }

  /// <summary>Field number for the "estate" field.</summary>
  public const int EstateFieldNumber = 1;
  /// <summary>Default value for the "estate" field</summary>
  public const uint EstateDefaultValue = 0;

  private uint? estate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Estate {
    get { return estate_ ?? EstateDefaultValue; }
    set {
      estate_ = value;
    }
  }
  /// <summary>Gets whether the "estate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEstate {
    get { return estate_ != null; }
  }
  /// <summary>Clears the value of the "estate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEstate() {
    estate_ = null;
  }

  /// <summary>Field number for the "eresult" field.</summary>
  public const int EresultFieldNumber = 2;
  /// <summary>Default value for the "eresult" field</summary>
  public const uint EresultDefaultValue = 2;

  private uint? eresult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Eresult {
    get { return eresult_ ?? EresultDefaultValue; }
    set {
      eresult_ = value;
    }
  }
  /// <summary>Gets whether the "eresult" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEresult {
    get { return eresult_ != null; }
  }
  /// <summary>Clears the value of the "eresult" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEresult() {
    eresult_ = null;
  }

  /// <summary>Field number for the "steamid" field.</summary>
  public const int SteamidFieldNumber = 3;
  /// <summary>Default value for the "steamid" field</summary>
  public const ulong SteamidDefaultValue = 0UL;

  private ulong? steamid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Steamid {
    get { return steamid_ ?? SteamidDefaultValue; }
    set {
      steamid_ = value;
    }
  }
  /// <summary>Gets whether the "steamid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSteamid {
    get { return steamid_ != null; }
  }
  /// <summary>Clears the value of the "steamid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSteamid() {
    steamid_ = null;
  }

  /// <summary>Field number for the "gameid" field.</summary>
  public const int GameidFieldNumber = 4;
  /// <summary>Default value for the "gameid" field</summary>
  public const ulong GameidDefaultValue = 0UL;

  private ulong? gameid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Gameid {
    get { return gameid_ ?? GameidDefaultValue; }
    set {
      gameid_ = value;
    }
  }
  /// <summary>Gets whether the "gameid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGameid {
    get { return gameid_ != null; }
  }
  /// <summary>Clears the value of the "gameid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGameid() {
    gameid_ = null;
  }

  /// <summary>Field number for the "h_steam_pipe" field.</summary>
  public const int HSteamPipeFieldNumber = 5;
  /// <summary>Default value for the "h_steam_pipe" field</summary>
  public const uint HSteamPipeDefaultValue = 0;

  private uint? hSteamPipe_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint HSteamPipe {
    get { return hSteamPipe_ ?? HSteamPipeDefaultValue; }
    set {
      hSteamPipe_ = value;
    }
  }
  /// <summary>Gets whether the "h_steam_pipe" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHSteamPipe {
    get { return hSteamPipe_ != null; }
  }
  /// <summary>Clears the value of the "h_steam_pipe" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHSteamPipe() {
    hSteamPipe_ = null;
  }

  /// <summary>Field number for the "ticket_crc" field.</summary>
  public const int TicketCrcFieldNumber = 6;
  /// <summary>Default value for the "ticket_crc" field</summary>
  public const uint TicketCrcDefaultValue = 0;

  private uint? ticketCrc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TicketCrc {
    get { return ticketCrc_ ?? TicketCrcDefaultValue; }
    set {
      ticketCrc_ = value;
    }
  }
  /// <summary>Gets whether the "ticket_crc" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTicketCrc {
    get { return ticketCrc_ != null; }
  }
  /// <summary>Clears the value of the "ticket_crc" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTicketCrc() {
    ticketCrc_ = null;
  }

  /// <summary>Field number for the "ticket" field.</summary>
  public const int TicketFieldNumber = 7;
  /// <summary>Default value for the "ticket" field</summary>
  public readonly static pb::ByteString TicketDefaultValue = pb::ByteString.Empty;

  private pb::ByteString ticket_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Ticket {
    get { return ticket_ ?? TicketDefaultValue; }
    set {
      ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ticket" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTicket {
    get { return ticket_ != null; }
  }
  /// <summary>Clears the value of the "ticket" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTicket() {
    ticket_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgAuthTicket);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgAuthTicket other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Estate != other.Estate) return false;
    if (Eresult != other.Eresult) return false;
    if (Steamid != other.Steamid) return false;
    if (Gameid != other.Gameid) return false;
    if (HSteamPipe != other.HSteamPipe) return false;
    if (TicketCrc != other.TicketCrc) return false;
    if (Ticket != other.Ticket) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEstate) hash ^= Estate.GetHashCode();
    if (HasEresult) hash ^= Eresult.GetHashCode();
    if (HasSteamid) hash ^= Steamid.GetHashCode();
    if (HasGameid) hash ^= Gameid.GetHashCode();
    if (HasHSteamPipe) hash ^= HSteamPipe.GetHashCode();
    if (HasTicketCrc) hash ^= TicketCrc.GetHashCode();
    if (HasTicket) hash ^= Ticket.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasEstate) {
      output.WriteRawTag(8);
      output.WriteUInt32(Estate);
    }
    if (HasEresult) {
      output.WriteRawTag(16);
      output.WriteUInt32(Eresult);
    }
    if (HasSteamid) {
      output.WriteRawTag(25);
      output.WriteFixed64(Steamid);
    }
    if (HasGameid) {
      output.WriteRawTag(33);
      output.WriteFixed64(Gameid);
    }
    if (HasHSteamPipe) {
      output.WriteRawTag(40);
      output.WriteUInt32(HSteamPipe);
    }
    if (HasTicketCrc) {
      output.WriteRawTag(48);
      output.WriteUInt32(TicketCrc);
    }
    if (HasTicket) {
      output.WriteRawTag(58);
      output.WriteBytes(Ticket);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEstate) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Estate);
    }
    if (HasEresult) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eresult);
    }
    if (HasSteamid) {
      size += 1 + 8;
    }
    if (HasGameid) {
      size += 1 + 8;
    }
    if (HasHSteamPipe) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HSteamPipe);
    }
    if (HasTicketCrc) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TicketCrc);
    }
    if (HasTicket) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ticket);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgAuthTicket other) {
    if (other == null) {
      return;
    }
    if (other.HasEstate) {
      Estate = other.Estate;
    }
    if (other.HasEresult) {
      Eresult = other.Eresult;
    }
    if (other.HasSteamid) {
      Steamid = other.Steamid;
    }
    if (other.HasGameid) {
      Gameid = other.Gameid;
    }
    if (other.HasHSteamPipe) {
      HSteamPipe = other.HSteamPipe;
    }
    if (other.HasTicketCrc) {
      TicketCrc = other.TicketCrc;
    }
    if (other.HasTicket) {
      Ticket = other.Ticket;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Estate = input.ReadUInt32();
          break;
        }
        case 16: {
          Eresult = input.ReadUInt32();
          break;
        }
        case 25: {
          Steamid = input.ReadFixed64();
          break;
        }
        case 33: {
          Gameid = input.ReadFixed64();
          break;
        }
        case 40: {
          HSteamPipe = input.ReadUInt32();
          break;
        }
        case 48: {
          TicketCrc = input.ReadUInt32();
          break;
        }
        case 58: {
          Ticket = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CCDDBAppDetailCommon : pb::IMessage<CCDDBAppDetailCommon> {
  private static readonly pb::MessageParser<CCDDBAppDetailCommon> _parser = new pb::MessageParser<CCDDBAppDetailCommon>(() => new CCDDBAppDetailCommon());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CCDDBAppDetailCommon> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesBaseReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CCDDBAppDetailCommon() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CCDDBAppDetailCommon(CCDDBAppDetailCommon other) : this() {
    appid_ = other.appid_;
    name_ = other.name_;
    icon_ = other.icon_;
    logo_ = other.logo_;
    logoSmall_ = other.logoSmall_;
    tool_ = other.tool_;
    demo_ = other.demo_;
    media_ = other.media_;
    communityVisibleStats_ = other.communityVisibleStats_;
    friendlyName_ = other.friendlyName_;
    propagation_ = other.propagation_;
    hasAdultContent_ = other.hasAdultContent_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CCDDBAppDetailCommon Clone() {
    return new CCDDBAppDetailCommon(this);
  }

  /// <summary>Field number for the "appid" field.</summary>
  public const int AppidFieldNumber = 1;
  /// <summary>Default value for the "appid" field</summary>
  public const uint AppidDefaultValue = 0;

  private uint? appid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Appid {
    get { return appid_ ?? AppidDefaultValue; }
    set {
      appid_ = value;
    }
  }
  /// <summary>Gets whether the "appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAppid {
    get { return appid_ != null; }
  }
  /// <summary>Clears the value of the "appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAppid() {
    appid_ = null;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  /// <summary>Default value for the "name" field</summary>
  public const string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 3;
  /// <summary>Default value for the "icon" field</summary>
  public const string IconDefaultValue = "";

  private string icon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_ ?? IconDefaultValue; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "icon" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIcon {
    get { return icon_ != null; }
  }
  /// <summary>Clears the value of the "icon" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIcon() {
    icon_ = null;
  }

  /// <summary>Field number for the "logo" field.</summary>
  public const int LogoFieldNumber = 4;
  /// <summary>Default value for the "logo" field</summary>
  public const string LogoDefaultValue = "";

  private string logo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Logo {
    get { return logo_ ?? LogoDefaultValue; }
    set {
      logo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "logo" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLogo {
    get { return logo_ != null; }
  }
  /// <summary>Clears the value of the "logo" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLogo() {
    logo_ = null;
  }

  /// <summary>Field number for the "logo_small" field.</summary>
  public const int LogoSmallFieldNumber = 5;
  /// <summary>Default value for the "logo_small" field</summary>
  public const string LogoSmallDefaultValue = "";

  private string logoSmall_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LogoSmall {
    get { return logoSmall_ ?? LogoSmallDefaultValue; }
    set {
      logoSmall_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "logo_small" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLogoSmall {
    get { return logoSmall_ != null; }
  }
  /// <summary>Clears the value of the "logo_small" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLogoSmall() {
    logoSmall_ = null;
  }

  /// <summary>Field number for the "tool" field.</summary>
  public const int ToolFieldNumber = 6;
  /// <summary>Default value for the "tool" field</summary>
  public const bool ToolDefaultValue = false;

  private bool? tool_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Tool {
    get { return tool_ ?? ToolDefaultValue; }
    set {
      tool_ = value;
    }
  }
  /// <summary>Gets whether the "tool" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTool {
    get { return tool_ != null; }
  }
  /// <summary>Clears the value of the "tool" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTool() {
    tool_ = null;
  }

  /// <summary>Field number for the "demo" field.</summary>
  public const int DemoFieldNumber = 7;
  /// <summary>Default value for the "demo" field</summary>
  public const bool DemoDefaultValue = false;

  private bool? demo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Demo {
    get { return demo_ ?? DemoDefaultValue; }
    set {
      demo_ = value;
    }
  }
  /// <summary>Gets whether the "demo" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDemo {
    get { return demo_ != null; }
  }
  /// <summary>Clears the value of the "demo" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDemo() {
    demo_ = null;
  }

  /// <summary>Field number for the "media" field.</summary>
  public const int MediaFieldNumber = 8;
  /// <summary>Default value for the "media" field</summary>
  public const bool MediaDefaultValue = false;

  private bool? media_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Media {
    get { return media_ ?? MediaDefaultValue; }
    set {
      media_ = value;
    }
  }
  /// <summary>Gets whether the "media" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMedia {
    get { return media_ != null; }
  }
  /// <summary>Clears the value of the "media" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMedia() {
    media_ = null;
  }

  /// <summary>Field number for the "community_visible_stats" field.</summary>
  public const int CommunityVisibleStatsFieldNumber = 9;
  /// <summary>Default value for the "community_visible_stats" field</summary>
  public const bool CommunityVisibleStatsDefaultValue = false;

  private bool? communityVisibleStats_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool CommunityVisibleStats {
    get { return communityVisibleStats_ ?? CommunityVisibleStatsDefaultValue; }
    set {
      communityVisibleStats_ = value;
    }
  }
  /// <summary>Gets whether the "community_visible_stats" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCommunityVisibleStats {
    get { return communityVisibleStats_ != null; }
  }
  /// <summary>Clears the value of the "community_visible_stats" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCommunityVisibleStats() {
    communityVisibleStats_ = null;
  }

  /// <summary>Field number for the "friendly_name" field.</summary>
  public const int FriendlyNameFieldNumber = 10;
  /// <summary>Default value for the "friendly_name" field</summary>
  public const string FriendlyNameDefaultValue = "";

  private string friendlyName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FriendlyName {
    get { return friendlyName_ ?? FriendlyNameDefaultValue; }
    set {
      friendlyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "friendly_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFriendlyName {
    get { return friendlyName_ != null; }
  }
  /// <summary>Clears the value of the "friendly_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFriendlyName() {
    friendlyName_ = null;
  }

  /// <summary>Field number for the "propagation" field.</summary>
  public const int PropagationFieldNumber = 11;
  /// <summary>Default value for the "propagation" field</summary>
  public const string PropagationDefaultValue = "";

  private string propagation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Propagation {
    get { return propagation_ ?? PropagationDefaultValue; }
    set {
      propagation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "propagation" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPropagation {
    get { return propagation_ != null; }
  }
  /// <summary>Clears the value of the "propagation" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPropagation() {
    propagation_ = null;
  }

  /// <summary>Field number for the "has_adult_content" field.</summary>
  public const int HasAdultContentFieldNumber = 12;
  /// <summary>Default value for the "has_adult_content" field</summary>
  public const bool HasAdultContentDefaultValue = false;

  private bool? hasAdultContent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAdultContent {
    get { return hasAdultContent_ ?? HasAdultContentDefaultValue; }
    set {
      hasAdultContent_ = value;
    }
  }
  /// <summary>Gets whether the "has_adult_content" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHasAdultContent {
    get { return hasAdultContent_ != null; }
  }
  /// <summary>Clears the value of the "has_adult_content" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHasAdultContent() {
    hasAdultContent_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CCDDBAppDetailCommon);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CCDDBAppDetailCommon other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Appid != other.Appid) return false;
    if (Name != other.Name) return false;
    if (Icon != other.Icon) return false;
    if (Logo != other.Logo) return false;
    if (LogoSmall != other.LogoSmall) return false;
    if (Tool != other.Tool) return false;
    if (Demo != other.Demo) return false;
    if (Media != other.Media) return false;
    if (CommunityVisibleStats != other.CommunityVisibleStats) return false;
    if (FriendlyName != other.FriendlyName) return false;
    if (Propagation != other.Propagation) return false;
    if (HasAdultContent != other.HasAdultContent) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAppid) hash ^= Appid.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasIcon) hash ^= Icon.GetHashCode();
    if (HasLogo) hash ^= Logo.GetHashCode();
    if (HasLogoSmall) hash ^= LogoSmall.GetHashCode();
    if (HasTool) hash ^= Tool.GetHashCode();
    if (HasDemo) hash ^= Demo.GetHashCode();
    if (HasMedia) hash ^= Media.GetHashCode();
    if (HasCommunityVisibleStats) hash ^= CommunityVisibleStats.GetHashCode();
    if (HasFriendlyName) hash ^= FriendlyName.GetHashCode();
    if (HasPropagation) hash ^= Propagation.GetHashCode();
    if (HasHasAdultContent) hash ^= HasAdultContent.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasAppid) {
      output.WriteRawTag(8);
      output.WriteUInt32(Appid);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasIcon) {
      output.WriteRawTag(26);
      output.WriteString(Icon);
    }
    if (HasLogo) {
      output.WriteRawTag(34);
      output.WriteString(Logo);
    }
    if (HasLogoSmall) {
      output.WriteRawTag(42);
      output.WriteString(LogoSmall);
    }
    if (HasTool) {
      output.WriteRawTag(48);
      output.WriteBool(Tool);
    }
    if (HasDemo) {
      output.WriteRawTag(56);
      output.WriteBool(Demo);
    }
    if (HasMedia) {
      output.WriteRawTag(64);
      output.WriteBool(Media);
    }
    if (HasCommunityVisibleStats) {
      output.WriteRawTag(72);
      output.WriteBool(CommunityVisibleStats);
    }
    if (HasFriendlyName) {
      output.WriteRawTag(82);
      output.WriteString(FriendlyName);
    }
    if (HasPropagation) {
      output.WriteRawTag(90);
      output.WriteString(Propagation);
    }
    if (HasHasAdultContent) {
      output.WriteRawTag(96);
      output.WriteBool(HasAdultContent);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAppid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasIcon) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (HasLogo) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Logo);
    }
    if (HasLogoSmall) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LogoSmall);
    }
    if (HasTool) {
      size += 1 + 1;
    }
    if (HasDemo) {
      size += 1 + 1;
    }
    if (HasMedia) {
      size += 1 + 1;
    }
    if (HasCommunityVisibleStats) {
      size += 1 + 1;
    }
    if (HasFriendlyName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendlyName);
    }
    if (HasPropagation) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Propagation);
    }
    if (HasHasAdultContent) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CCDDBAppDetailCommon other) {
    if (other == null) {
      return;
    }
    if (other.HasAppid) {
      Appid = other.Appid;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasIcon) {
      Icon = other.Icon;
    }
    if (other.HasLogo) {
      Logo = other.Logo;
    }
    if (other.HasLogoSmall) {
      LogoSmall = other.LogoSmall;
    }
    if (other.HasTool) {
      Tool = other.Tool;
    }
    if (other.HasDemo) {
      Demo = other.Demo;
    }
    if (other.HasMedia) {
      Media = other.Media;
    }
    if (other.HasCommunityVisibleStats) {
      CommunityVisibleStats = other.CommunityVisibleStats;
    }
    if (other.HasFriendlyName) {
      FriendlyName = other.FriendlyName;
    }
    if (other.HasPropagation) {
      Propagation = other.Propagation;
    }
    if (other.HasHasAdultContent) {
      HasAdultContent = other.HasAdultContent;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Appid = input.ReadUInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Icon = input.ReadString();
          break;
        }
        case 34: {
          Logo = input.ReadString();
          break;
        }
        case 42: {
          LogoSmall = input.ReadString();
          break;
        }
        case 48: {
          Tool = input.ReadBool();
          break;
        }
        case 56: {
          Demo = input.ReadBool();
          break;
        }
        case 64: {
          Media = input.ReadBool();
          break;
        }
        case 72: {
          CommunityVisibleStats = input.ReadBool();
          break;
        }
        case 82: {
          FriendlyName = input.ReadString();
          break;
        }
        case 90: {
          Propagation = input.ReadString();
          break;
        }
        case 96: {
          HasAdultContent = input.ReadBool();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgAppRights : pb::IMessage<CMsgAppRights> {
  private static readonly pb::MessageParser<CMsgAppRights> _parser = new pb::MessageParser<CMsgAppRights>(() => new CMsgAppRights());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgAppRights> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesBaseReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgAppRights() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgAppRights(CMsgAppRights other) : this() {
    editInfo_ = other.editInfo_;
    publish_ = other.publish_;
    viewErrorData_ = other.viewErrorData_;
    download_ = other.download_;
    uploadCdkeys_ = other.uploadCdkeys_;
    generateCdkeys_ = other.generateCdkeys_;
    viewFinancials_ = other.viewFinancials_;
    manageCeg_ = other.manageCeg_;
    manageSigning_ = other.manageSigning_;
    manageCdkeys_ = other.manageCdkeys_;
    editMarketing_ = other.editMarketing_;
    economySupport_ = other.economySupport_;
    economySupportSupervisor_ = other.economySupportSupervisor_;
    managePricing_ = other.managePricing_;
    broadcastLive_ = other.broadcastLive_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgAppRights Clone() {
    return new CMsgAppRights(this);
  }

  /// <summary>Field number for the "edit_info" field.</summary>
  public const int EditInfoFieldNumber = 1;
  /// <summary>Default value for the "edit_info" field</summary>
  public const bool EditInfoDefaultValue = false;

  private bool? editInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EditInfo {
    get { return editInfo_ ?? EditInfoDefaultValue; }
    set {
      editInfo_ = value;
    }
  }
  /// <summary>Gets whether the "edit_info" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEditInfo {
    get { return editInfo_ != null; }
  }
  /// <summary>Clears the value of the "edit_info" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEditInfo() {
    editInfo_ = null;
  }

  /// <summary>Field number for the "publish" field.</summary>
  public const int PublishFieldNumber = 2;
  /// <summary>Default value for the "publish" field</summary>
  public const bool PublishDefaultValue = false;

  private bool? publish_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Publish {
    get { return publish_ ?? PublishDefaultValue; }
    set {
      publish_ = value;
    }
  }
  /// <summary>Gets whether the "publish" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublish {
    get { return publish_ != null; }
  }
  /// <summary>Clears the value of the "publish" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublish() {
    publish_ = null;
  }

  /// <summary>Field number for the "view_error_data" field.</summary>
  public const int ViewErrorDataFieldNumber = 3;
  /// <summary>Default value for the "view_error_data" field</summary>
  public const bool ViewErrorDataDefaultValue = false;

  private bool? viewErrorData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ViewErrorData {
    get { return viewErrorData_ ?? ViewErrorDataDefaultValue; }
    set {
      viewErrorData_ = value;
    }
  }
  /// <summary>Gets whether the "view_error_data" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasViewErrorData {
    get { return viewErrorData_ != null; }
  }
  /// <summary>Clears the value of the "view_error_data" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearViewErrorData() {
    viewErrorData_ = null;
  }

  /// <summary>Field number for the "download" field.</summary>
  public const int DownloadFieldNumber = 4;
  /// <summary>Default value for the "download" field</summary>
  public const bool DownloadDefaultValue = false;

  private bool? download_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Download {
    get { return download_ ?? DownloadDefaultValue; }
    set {
      download_ = value;
    }
  }
  /// <summary>Gets whether the "download" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDownload {
    get { return download_ != null; }
  }
  /// <summary>Clears the value of the "download" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDownload() {
    download_ = null;
  }

  /// <summary>Field number for the "upload_cdkeys" field.</summary>
  public const int UploadCdkeysFieldNumber = 5;
  /// <summary>Default value for the "upload_cdkeys" field</summary>
  public const bool UploadCdkeysDefaultValue = false;

  private bool? uploadCdkeys_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UploadCdkeys {
    get { return uploadCdkeys_ ?? UploadCdkeysDefaultValue; }
    set {
      uploadCdkeys_ = value;
    }
  }
  /// <summary>Gets whether the "upload_cdkeys" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUploadCdkeys {
    get { return uploadCdkeys_ != null; }
  }
  /// <summary>Clears the value of the "upload_cdkeys" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUploadCdkeys() {
    uploadCdkeys_ = null;
  }

  /// <summary>Field number for the "generate_cdkeys" field.</summary>
  public const int GenerateCdkeysFieldNumber = 6;
  /// <summary>Default value for the "generate_cdkeys" field</summary>
  public const bool GenerateCdkeysDefaultValue = false;

  private bool? generateCdkeys_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool GenerateCdkeys {
    get { return generateCdkeys_ ?? GenerateCdkeysDefaultValue; }
    set {
      generateCdkeys_ = value;
    }
  }
  /// <summary>Gets whether the "generate_cdkeys" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGenerateCdkeys {
    get { return generateCdkeys_ != null; }
  }
  /// <summary>Clears the value of the "generate_cdkeys" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGenerateCdkeys() {
    generateCdkeys_ = null;
  }

  /// <summary>Field number for the "view_financials" field.</summary>
  public const int ViewFinancialsFieldNumber = 7;
  /// <summary>Default value for the "view_financials" field</summary>
  public const bool ViewFinancialsDefaultValue = false;

  private bool? viewFinancials_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ViewFinancials {
    get { return viewFinancials_ ?? ViewFinancialsDefaultValue; }
    set {
      viewFinancials_ = value;
    }
  }
  /// <summary>Gets whether the "view_financials" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasViewFinancials {
    get { return viewFinancials_ != null; }
  }
  /// <summary>Clears the value of the "view_financials" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearViewFinancials() {
    viewFinancials_ = null;
  }

  /// <summary>Field number for the "manage_ceg" field.</summary>
  public const int ManageCegFieldNumber = 8;
  /// <summary>Default value for the "manage_ceg" field</summary>
  public const bool ManageCegDefaultValue = false;

  private bool? manageCeg_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ManageCeg {
    get { return manageCeg_ ?? ManageCegDefaultValue; }
    set {
      manageCeg_ = value;
    }
  }
  /// <summary>Gets whether the "manage_ceg" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasManageCeg {
    get { return manageCeg_ != null; }
  }
  /// <summary>Clears the value of the "manage_ceg" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearManageCeg() {
    manageCeg_ = null;
  }

  /// <summary>Field number for the "manage_signing" field.</summary>
  public const int ManageSigningFieldNumber = 9;
  /// <summary>Default value for the "manage_signing" field</summary>
  public const bool ManageSigningDefaultValue = false;

  private bool? manageSigning_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ManageSigning {
    get { return manageSigning_ ?? ManageSigningDefaultValue; }
    set {
      manageSigning_ = value;
    }
  }
  /// <summary>Gets whether the "manage_signing" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasManageSigning {
    get { return manageSigning_ != null; }
  }
  /// <summary>Clears the value of the "manage_signing" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearManageSigning() {
    manageSigning_ = null;
  }

  /// <summary>Field number for the "manage_cdkeys" field.</summary>
  public const int ManageCdkeysFieldNumber = 10;
  /// <summary>Default value for the "manage_cdkeys" field</summary>
  public const bool ManageCdkeysDefaultValue = false;

  private bool? manageCdkeys_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ManageCdkeys {
    get { return manageCdkeys_ ?? ManageCdkeysDefaultValue; }
    set {
      manageCdkeys_ = value;
    }
  }
  /// <summary>Gets whether the "manage_cdkeys" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasManageCdkeys {
    get { return manageCdkeys_ != null; }
  }
  /// <summary>Clears the value of the "manage_cdkeys" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearManageCdkeys() {
    manageCdkeys_ = null;
  }

  /// <summary>Field number for the "edit_marketing" field.</summary>
  public const int EditMarketingFieldNumber = 11;
  /// <summary>Default value for the "edit_marketing" field</summary>
  public const bool EditMarketingDefaultValue = false;

  private bool? editMarketing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EditMarketing {
    get { return editMarketing_ ?? EditMarketingDefaultValue; }
    set {
      editMarketing_ = value;
    }
  }
  /// <summary>Gets whether the "edit_marketing" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEditMarketing {
    get { return editMarketing_ != null; }
  }
  /// <summary>Clears the value of the "edit_marketing" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEditMarketing() {
    editMarketing_ = null;
  }

  /// <summary>Field number for the "economy_support" field.</summary>
  public const int EconomySupportFieldNumber = 12;
  /// <summary>Default value for the "economy_support" field</summary>
  public const bool EconomySupportDefaultValue = false;

  private bool? economySupport_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EconomySupport {
    get { return economySupport_ ?? EconomySupportDefaultValue; }
    set {
      economySupport_ = value;
    }
  }
  /// <summary>Gets whether the "economy_support" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEconomySupport {
    get { return economySupport_ != null; }
  }
  /// <summary>Clears the value of the "economy_support" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEconomySupport() {
    economySupport_ = null;
  }

  /// <summary>Field number for the "economy_support_supervisor" field.</summary>
  public const int EconomySupportSupervisorFieldNumber = 13;
  /// <summary>Default value for the "economy_support_supervisor" field</summary>
  public const bool EconomySupportSupervisorDefaultValue = false;

  private bool? economySupportSupervisor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EconomySupportSupervisor {
    get { return economySupportSupervisor_ ?? EconomySupportSupervisorDefaultValue; }
    set {
      economySupportSupervisor_ = value;
    }
  }
  /// <summary>Gets whether the "economy_support_supervisor" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEconomySupportSupervisor {
    get { return economySupportSupervisor_ != null; }
  }
  /// <summary>Clears the value of the "economy_support_supervisor" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEconomySupportSupervisor() {
    economySupportSupervisor_ = null;
  }

  /// <summary>Field number for the "manage_pricing" field.</summary>
  public const int ManagePricingFieldNumber = 14;
  /// <summary>Default value for the "manage_pricing" field</summary>
  public const bool ManagePricingDefaultValue = false;

  private bool? managePricing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ManagePricing {
    get { return managePricing_ ?? ManagePricingDefaultValue; }
    set {
      managePricing_ = value;
    }
  }
  /// <summary>Gets whether the "manage_pricing" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasManagePricing {
    get { return managePricing_ != null; }
  }
  /// <summary>Clears the value of the "manage_pricing" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearManagePricing() {
    managePricing_ = null;
  }

  /// <summary>Field number for the "broadcast_live" field.</summary>
  public const int BroadcastLiveFieldNumber = 15;
  /// <summary>Default value for the "broadcast_live" field</summary>
  public const bool BroadcastLiveDefaultValue = false;

  private bool? broadcastLive_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool BroadcastLive {
    get { return broadcastLive_ ?? BroadcastLiveDefaultValue; }
    set {
      broadcastLive_ = value;
    }
  }
  /// <summary>Gets whether the "broadcast_live" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBroadcastLive {
    get { return broadcastLive_ != null; }
  }
  /// <summary>Clears the value of the "broadcast_live" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBroadcastLive() {
    broadcastLive_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgAppRights);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgAppRights other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EditInfo != other.EditInfo) return false;
    if (Publish != other.Publish) return false;
    if (ViewErrorData != other.ViewErrorData) return false;
    if (Download != other.Download) return false;
    if (UploadCdkeys != other.UploadCdkeys) return false;
    if (GenerateCdkeys != other.GenerateCdkeys) return false;
    if (ViewFinancials != other.ViewFinancials) return false;
    if (ManageCeg != other.ManageCeg) return false;
    if (ManageSigning != other.ManageSigning) return false;
    if (ManageCdkeys != other.ManageCdkeys) return false;
    if (EditMarketing != other.EditMarketing) return false;
    if (EconomySupport != other.EconomySupport) return false;
    if (EconomySupportSupervisor != other.EconomySupportSupervisor) return false;
    if (ManagePricing != other.ManagePricing) return false;
    if (BroadcastLive != other.BroadcastLive) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEditInfo) hash ^= EditInfo.GetHashCode();
    if (HasPublish) hash ^= Publish.GetHashCode();
    if (HasViewErrorData) hash ^= ViewErrorData.GetHashCode();
    if (HasDownload) hash ^= Download.GetHashCode();
    if (HasUploadCdkeys) hash ^= UploadCdkeys.GetHashCode();
    if (HasGenerateCdkeys) hash ^= GenerateCdkeys.GetHashCode();
    if (HasViewFinancials) hash ^= ViewFinancials.GetHashCode();
    if (HasManageCeg) hash ^= ManageCeg.GetHashCode();
    if (HasManageSigning) hash ^= ManageSigning.GetHashCode();
    if (HasManageCdkeys) hash ^= ManageCdkeys.GetHashCode();
    if (HasEditMarketing) hash ^= EditMarketing.GetHashCode();
    if (HasEconomySupport) hash ^= EconomySupport.GetHashCode();
    if (HasEconomySupportSupervisor) hash ^= EconomySupportSupervisor.GetHashCode();
    if (HasManagePricing) hash ^= ManagePricing.GetHashCode();
    if (HasBroadcastLive) hash ^= BroadcastLive.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasEditInfo) {
      output.WriteRawTag(8);
      output.WriteBool(EditInfo);
    }
    if (HasPublish) {
      output.WriteRawTag(16);
      output.WriteBool(Publish);
    }
    if (HasViewErrorData) {
      output.WriteRawTag(24);
      output.WriteBool(ViewErrorData);
    }
    if (HasDownload) {
      output.WriteRawTag(32);
      output.WriteBool(Download);
    }
    if (HasUploadCdkeys) {
      output.WriteRawTag(40);
      output.WriteBool(UploadCdkeys);
    }
    if (HasGenerateCdkeys) {
      output.WriteRawTag(48);
      output.WriteBool(GenerateCdkeys);
    }
    if (HasViewFinancials) {
      output.WriteRawTag(56);
      output.WriteBool(ViewFinancials);
    }
    if (HasManageCeg) {
      output.WriteRawTag(64);
      output.WriteBool(ManageCeg);
    }
    if (HasManageSigning) {
      output.WriteRawTag(72);
      output.WriteBool(ManageSigning);
    }
    if (HasManageCdkeys) {
      output.WriteRawTag(80);
      output.WriteBool(ManageCdkeys);
    }
    if (HasEditMarketing) {
      output.WriteRawTag(88);
      output.WriteBool(EditMarketing);
    }
    if (HasEconomySupport) {
      output.WriteRawTag(96);
      output.WriteBool(EconomySupport);
    }
    if (HasEconomySupportSupervisor) {
      output.WriteRawTag(104);
      output.WriteBool(EconomySupportSupervisor);
    }
    if (HasManagePricing) {
      output.WriteRawTag(112);
      output.WriteBool(ManagePricing);
    }
    if (HasBroadcastLive) {
      output.WriteRawTag(120);
      output.WriteBool(BroadcastLive);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEditInfo) {
      size += 1 + 1;
    }
    if (HasPublish) {
      size += 1 + 1;
    }
    if (HasViewErrorData) {
      size += 1 + 1;
    }
    if (HasDownload) {
      size += 1 + 1;
    }
    if (HasUploadCdkeys) {
      size += 1 + 1;
    }
    if (HasGenerateCdkeys) {
      size += 1 + 1;
    }
    if (HasViewFinancials) {
      size += 1 + 1;
    }
    if (HasManageCeg) {
      size += 1 + 1;
    }
    if (HasManageSigning) {
      size += 1 + 1;
    }
    if (HasManageCdkeys) {
      size += 1 + 1;
    }
    if (HasEditMarketing) {
      size += 1 + 1;
    }
    if (HasEconomySupport) {
      size += 1 + 1;
    }
    if (HasEconomySupportSupervisor) {
      size += 1 + 1;
    }
    if (HasManagePricing) {
      size += 1 + 1;
    }
    if (HasBroadcastLive) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgAppRights other) {
    if (other == null) {
      return;
    }
    if (other.HasEditInfo) {
      EditInfo = other.EditInfo;
    }
    if (other.HasPublish) {
      Publish = other.Publish;
    }
    if (other.HasViewErrorData) {
      ViewErrorData = other.ViewErrorData;
    }
    if (other.HasDownload) {
      Download = other.Download;
    }
    if (other.HasUploadCdkeys) {
      UploadCdkeys = other.UploadCdkeys;
    }
    if (other.HasGenerateCdkeys) {
      GenerateCdkeys = other.GenerateCdkeys;
    }
    if (other.HasViewFinancials) {
      ViewFinancials = other.ViewFinancials;
    }
    if (other.HasManageCeg) {
      ManageCeg = other.ManageCeg;
    }
    if (other.HasManageSigning) {
      ManageSigning = other.ManageSigning;
    }
    if (other.HasManageCdkeys) {
      ManageCdkeys = other.ManageCdkeys;
    }
    if (other.HasEditMarketing) {
      EditMarketing = other.EditMarketing;
    }
    if (other.HasEconomySupport) {
      EconomySupport = other.EconomySupport;
    }
    if (other.HasEconomySupportSupervisor) {
      EconomySupportSupervisor = other.EconomySupportSupervisor;
    }
    if (other.HasManagePricing) {
      ManagePricing = other.ManagePricing;
    }
    if (other.HasBroadcastLive) {
      BroadcastLive = other.BroadcastLive;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          EditInfo = input.ReadBool();
          break;
        }
        case 16: {
          Publish = input.ReadBool();
          break;
        }
        case 24: {
          ViewErrorData = input.ReadBool();
          break;
        }
        case 32: {
          Download = input.ReadBool();
          break;
        }
        case 40: {
          UploadCdkeys = input.ReadBool();
          break;
        }
        case 48: {
          GenerateCdkeys = input.ReadBool();
          break;
        }
        case 56: {
          ViewFinancials = input.ReadBool();
          break;
        }
        case 64: {
          ManageCeg = input.ReadBool();
          break;
        }
        case 72: {
          ManageSigning = input.ReadBool();
          break;
        }
        case 80: {
          ManageCdkeys = input.ReadBool();
          break;
        }
        case 88: {
          EditMarketing = input.ReadBool();
          break;
        }
        case 96: {
          EconomySupport = input.ReadBool();
          break;
        }
        case 104: {
          EconomySupportSupervisor = input.ReadBool();
          break;
        }
        case 112: {
          ManagePricing = input.ReadBool();
          break;
        }
        case 120: {
          BroadcastLive = input.ReadBool();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CCuratorPreferences : pb::IMessage<CCuratorPreferences> {
  private static readonly pb::MessageParser<CCuratorPreferences> _parser = new pb::MessageParser<CCuratorPreferences>(() => new CCuratorPreferences());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CCuratorPreferences> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesBaseReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CCuratorPreferences() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CCuratorPreferences(CCuratorPreferences other) : this() {
    supportedLanguages_ = other.supportedLanguages_;
    platformWindows_ = other.platformWindows_;
    platformMac_ = other.platformMac_;
    platformLinux_ = other.platformLinux_;
    vrContent_ = other.vrContent_;
    adultContentViolence_ = other.adultContentViolence_;
    adultContentSex_ = other.adultContentSex_;
    timestampUpdated_ = other.timestampUpdated_;
    tagidsCurated_ = other.tagidsCurated_.Clone();
    tagidsFiltered_ = other.tagidsFiltered_.Clone();
    websiteTitle_ = other.websiteTitle_;
    websiteUrl_ = other.websiteUrl_;
    discussionUrl_ = other.discussionUrl_;
    showBroadcast_ = other.showBroadcast_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CCuratorPreferences Clone() {
    return new CCuratorPreferences(this);
  }

  /// <summary>Field number for the "supported_languages" field.</summary>
  public const int SupportedLanguagesFieldNumber = 1;
  /// <summary>Default value for the "supported_languages" field</summary>
  public const uint SupportedLanguagesDefaultValue = 0;

  private uint? supportedLanguages_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SupportedLanguages {
    get { return supportedLanguages_ ?? SupportedLanguagesDefaultValue; }
    set {
      supportedLanguages_ = value;
    }
  }
  /// <summary>Gets whether the "supported_languages" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSupportedLanguages {
    get { return supportedLanguages_ != null; }
  }
  /// <summary>Clears the value of the "supported_languages" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSupportedLanguages() {
    supportedLanguages_ = null;
  }

  /// <summary>Field number for the "platform_windows" field.</summary>
  public const int PlatformWindowsFieldNumber = 2;
  /// <summary>Default value for the "platform_windows" field</summary>
  public const bool PlatformWindowsDefaultValue = false;

  private bool? platformWindows_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool PlatformWindows {
    get { return platformWindows_ ?? PlatformWindowsDefaultValue; }
    set {
      platformWindows_ = value;
    }
  }
  /// <summary>Gets whether the "platform_windows" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPlatformWindows {
    get { return platformWindows_ != null; }
  }
  /// <summary>Clears the value of the "platform_windows" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlatformWindows() {
    platformWindows_ = null;
  }

  /// <summary>Field number for the "platform_mac" field.</summary>
  public const int PlatformMacFieldNumber = 3;
  /// <summary>Default value for the "platform_mac" field</summary>
  public const bool PlatformMacDefaultValue = false;

  private bool? platformMac_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool PlatformMac {
    get { return platformMac_ ?? PlatformMacDefaultValue; }
    set {
      platformMac_ = value;
    }
  }
  /// <summary>Gets whether the "platform_mac" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPlatformMac {
    get { return platformMac_ != null; }
  }
  /// <summary>Clears the value of the "platform_mac" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlatformMac() {
    platformMac_ = null;
  }

  /// <summary>Field number for the "platform_linux" field.</summary>
  public const int PlatformLinuxFieldNumber = 4;
  /// <summary>Default value for the "platform_linux" field</summary>
  public const bool PlatformLinuxDefaultValue = false;

  private bool? platformLinux_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool PlatformLinux {
    get { return platformLinux_ ?? PlatformLinuxDefaultValue; }
    set {
      platformLinux_ = value;
    }
  }
  /// <summary>Gets whether the "platform_linux" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPlatformLinux {
    get { return platformLinux_ != null; }
  }
  /// <summary>Clears the value of the "platform_linux" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlatformLinux() {
    platformLinux_ = null;
  }

  /// <summary>Field number for the "vr_content" field.</summary>
  public const int VrContentFieldNumber = 5;
  /// <summary>Default value for the "vr_content" field</summary>
  public const bool VrContentDefaultValue = false;

  private bool? vrContent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool VrContent {
    get { return vrContent_ ?? VrContentDefaultValue; }
    set {
      vrContent_ = value;
    }
  }
  /// <summary>Gets whether the "vr_content" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVrContent {
    get { return vrContent_ != null; }
  }
  /// <summary>Clears the value of the "vr_content" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVrContent() {
    vrContent_ = null;
  }

  /// <summary>Field number for the "adult_content_violence" field.</summary>
  public const int AdultContentViolenceFieldNumber = 6;
  /// <summary>Default value for the "adult_content_violence" field</summary>
  public const bool AdultContentViolenceDefaultValue = false;

  private bool? adultContentViolence_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool AdultContentViolence {
    get { return adultContentViolence_ ?? AdultContentViolenceDefaultValue; }
    set {
      adultContentViolence_ = value;
    }
  }
  /// <summary>Gets whether the "adult_content_violence" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAdultContentViolence {
    get { return adultContentViolence_ != null; }
  }
  /// <summary>Clears the value of the "adult_content_violence" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAdultContentViolence() {
    adultContentViolence_ = null;
  }

  /// <summary>Field number for the "adult_content_sex" field.</summary>
  public const int AdultContentSexFieldNumber = 7;
  /// <summary>Default value for the "adult_content_sex" field</summary>
  public const bool AdultContentSexDefaultValue = false;

  private bool? adultContentSex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool AdultContentSex {
    get { return adultContentSex_ ?? AdultContentSexDefaultValue; }
    set {
      adultContentSex_ = value;
    }
  }
  /// <summary>Gets whether the "adult_content_sex" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAdultContentSex {
    get { return adultContentSex_ != null; }
  }
  /// <summary>Clears the value of the "adult_content_sex" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAdultContentSex() {
    adultContentSex_ = null;
  }

  /// <summary>Field number for the "timestamp_updated" field.</summary>
  public const int TimestampUpdatedFieldNumber = 8;
  /// <summary>Default value for the "timestamp_updated" field</summary>
  public const uint TimestampUpdatedDefaultValue = 0;

  private uint? timestampUpdated_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TimestampUpdated {
    get { return timestampUpdated_ ?? TimestampUpdatedDefaultValue; }
    set {
      timestampUpdated_ = value;
    }
  }
  /// <summary>Gets whether the "timestamp_updated" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTimestampUpdated {
    get { return timestampUpdated_ != null; }
  }
  /// <summary>Clears the value of the "timestamp_updated" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTimestampUpdated() {
    timestampUpdated_ = null;
  }

  /// <summary>Field number for the "tagids_curated" field.</summary>
  public const int TagidsCuratedFieldNumber = 9;
  private static readonly pb::FieldCodec<uint> _repeated_tagidsCurated_codec
      = pb::FieldCodec.ForUInt32(72);
  private readonly pbc::RepeatedField<uint> tagidsCurated_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> TagidsCurated {
    get { return tagidsCurated_; }
  }

  /// <summary>Field number for the "tagids_filtered" field.</summary>
  public const int TagidsFilteredFieldNumber = 10;
  private static readonly pb::FieldCodec<uint> _repeated_tagidsFiltered_codec
      = pb::FieldCodec.ForUInt32(80);
  private readonly pbc::RepeatedField<uint> tagidsFiltered_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> TagidsFiltered {
    get { return tagidsFiltered_; }
  }

  /// <summary>Field number for the "website_title" field.</summary>
  public const int WebsiteTitleFieldNumber = 11;
  /// <summary>Default value for the "website_title" field</summary>
  public const string WebsiteTitleDefaultValue = "";

  private string websiteTitle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WebsiteTitle {
    get { return websiteTitle_ ?? WebsiteTitleDefaultValue; }
    set {
      websiteTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "website_title" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWebsiteTitle {
    get { return websiteTitle_ != null; }
  }
  /// <summary>Clears the value of the "website_title" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWebsiteTitle() {
    websiteTitle_ = null;
  }

  /// <summary>Field number for the "website_url" field.</summary>
  public const int WebsiteUrlFieldNumber = 12;
  /// <summary>Default value for the "website_url" field</summary>
  public const string WebsiteUrlDefaultValue = "";

  private string websiteUrl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WebsiteUrl {
    get { return websiteUrl_ ?? WebsiteUrlDefaultValue; }
    set {
      websiteUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "website_url" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWebsiteUrl {
    get { return websiteUrl_ != null; }
  }
  /// <summary>Clears the value of the "website_url" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWebsiteUrl() {
    websiteUrl_ = null;
  }

  /// <summary>Field number for the "discussion_url" field.</summary>
  public const int DiscussionUrlFieldNumber = 13;
  /// <summary>Default value for the "discussion_url" field</summary>
  public const string DiscussionUrlDefaultValue = "";

  private string discussionUrl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DiscussionUrl {
    get { return discussionUrl_ ?? DiscussionUrlDefaultValue; }
    set {
      discussionUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "discussion_url" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDiscussionUrl {
    get { return discussionUrl_ != null; }
  }
  /// <summary>Clears the value of the "discussion_url" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDiscussionUrl() {
    discussionUrl_ = null;
  }

  /// <summary>Field number for the "show_broadcast" field.</summary>
  public const int ShowBroadcastFieldNumber = 14;
  /// <summary>Default value for the "show_broadcast" field</summary>
  public const bool ShowBroadcastDefaultValue = false;

  private bool? showBroadcast_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ShowBroadcast {
    get { return showBroadcast_ ?? ShowBroadcastDefaultValue; }
    set {
      showBroadcast_ = value;
    }
  }
  /// <summary>Gets whether the "show_broadcast" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasShowBroadcast {
    get { return showBroadcast_ != null; }
  }
  /// <summary>Clears the value of the "show_broadcast" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearShowBroadcast() {
    showBroadcast_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CCuratorPreferences);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CCuratorPreferences other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SupportedLanguages != other.SupportedLanguages) return false;
    if (PlatformWindows != other.PlatformWindows) return false;
    if (PlatformMac != other.PlatformMac) return false;
    if (PlatformLinux != other.PlatformLinux) return false;
    if (VrContent != other.VrContent) return false;
    if (AdultContentViolence != other.AdultContentViolence) return false;
    if (AdultContentSex != other.AdultContentSex) return false;
    if (TimestampUpdated != other.TimestampUpdated) return false;
    if(!tagidsCurated_.Equals(other.tagidsCurated_)) return false;
    if(!tagidsFiltered_.Equals(other.tagidsFiltered_)) return false;
    if (WebsiteTitle != other.WebsiteTitle) return false;
    if (WebsiteUrl != other.WebsiteUrl) return false;
    if (DiscussionUrl != other.DiscussionUrl) return false;
    if (ShowBroadcast != other.ShowBroadcast) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSupportedLanguages) hash ^= SupportedLanguages.GetHashCode();
    if (HasPlatformWindows) hash ^= PlatformWindows.GetHashCode();
    if (HasPlatformMac) hash ^= PlatformMac.GetHashCode();
    if (HasPlatformLinux) hash ^= PlatformLinux.GetHashCode();
    if (HasVrContent) hash ^= VrContent.GetHashCode();
    if (HasAdultContentViolence) hash ^= AdultContentViolence.GetHashCode();
    if (HasAdultContentSex) hash ^= AdultContentSex.GetHashCode();
    if (HasTimestampUpdated) hash ^= TimestampUpdated.GetHashCode();
    hash ^= tagidsCurated_.GetHashCode();
    hash ^= tagidsFiltered_.GetHashCode();
    if (HasWebsiteTitle) hash ^= WebsiteTitle.GetHashCode();
    if (HasWebsiteUrl) hash ^= WebsiteUrl.GetHashCode();
    if (HasDiscussionUrl) hash ^= DiscussionUrl.GetHashCode();
    if (HasShowBroadcast) hash ^= ShowBroadcast.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasSupportedLanguages) {
      output.WriteRawTag(8);
      output.WriteUInt32(SupportedLanguages);
    }
    if (HasPlatformWindows) {
      output.WriteRawTag(16);
      output.WriteBool(PlatformWindows);
    }
    if (HasPlatformMac) {
      output.WriteRawTag(24);
      output.WriteBool(PlatformMac);
    }
    if (HasPlatformLinux) {
      output.WriteRawTag(32);
      output.WriteBool(PlatformLinux);
    }
    if (HasVrContent) {
      output.WriteRawTag(40);
      output.WriteBool(VrContent);
    }
    if (HasAdultContentViolence) {
      output.WriteRawTag(48);
      output.WriteBool(AdultContentViolence);
    }
    if (HasAdultContentSex) {
      output.WriteRawTag(56);
      output.WriteBool(AdultContentSex);
    }
    if (HasTimestampUpdated) {
      output.WriteRawTag(64);
      output.WriteUInt32(TimestampUpdated);
    }
    tagidsCurated_.WriteTo(output, _repeated_tagidsCurated_codec);
    tagidsFiltered_.WriteTo(output, _repeated_tagidsFiltered_codec);
    if (HasWebsiteTitle) {
      output.WriteRawTag(90);
      output.WriteString(WebsiteTitle);
    }
    if (HasWebsiteUrl) {
      output.WriteRawTag(98);
      output.WriteString(WebsiteUrl);
    }
    if (HasDiscussionUrl) {
      output.WriteRawTag(106);
      output.WriteString(DiscussionUrl);
    }
    if (HasShowBroadcast) {
      output.WriteRawTag(112);
      output.WriteBool(ShowBroadcast);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasSupportedLanguages) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SupportedLanguages);
    }
    if (HasPlatformWindows) {
      size += 1 + 1;
    }
    if (HasPlatformMac) {
      size += 1 + 1;
    }
    if (HasPlatformLinux) {
      size += 1 + 1;
    }
    if (HasVrContent) {
      size += 1 + 1;
    }
    if (HasAdultContentViolence) {
      size += 1 + 1;
    }
    if (HasAdultContentSex) {
      size += 1 + 1;
    }
    if (HasTimestampUpdated) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimestampUpdated);
    }
    size += tagidsCurated_.CalculateSize(_repeated_tagidsCurated_codec);
    size += tagidsFiltered_.CalculateSize(_repeated_tagidsFiltered_codec);
    if (HasWebsiteTitle) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(WebsiteTitle);
    }
    if (HasWebsiteUrl) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(WebsiteUrl);
    }
    if (HasDiscussionUrl) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscussionUrl);
    }
    if (HasShowBroadcast) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CCuratorPreferences other) {
    if (other == null) {
      return;
    }
    if (other.HasSupportedLanguages) {
      SupportedLanguages = other.SupportedLanguages;
    }
    if (other.HasPlatformWindows) {
      PlatformWindows = other.PlatformWindows;
    }
    if (other.HasPlatformMac) {
      PlatformMac = other.PlatformMac;
    }
    if (other.HasPlatformLinux) {
      PlatformLinux = other.PlatformLinux;
    }
    if (other.HasVrContent) {
      VrContent = other.VrContent;
    }
    if (other.HasAdultContentViolence) {
      AdultContentViolence = other.AdultContentViolence;
    }
    if (other.HasAdultContentSex) {
      AdultContentSex = other.AdultContentSex;
    }
    if (other.HasTimestampUpdated) {
      TimestampUpdated = other.TimestampUpdated;
    }
    tagidsCurated_.Add(other.tagidsCurated_);
    tagidsFiltered_.Add(other.tagidsFiltered_);
    if (other.HasWebsiteTitle) {
      WebsiteTitle = other.WebsiteTitle;
    }
    if (other.HasWebsiteUrl) {
      WebsiteUrl = other.WebsiteUrl;
    }
    if (other.HasDiscussionUrl) {
      DiscussionUrl = other.DiscussionUrl;
    }
    if (other.HasShowBroadcast) {
      ShowBroadcast = other.ShowBroadcast;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SupportedLanguages = input.ReadUInt32();
          break;
        }
        case 16: {
          PlatformWindows = input.ReadBool();
          break;
        }
        case 24: {
          PlatformMac = input.ReadBool();
          break;
        }
        case 32: {
          PlatformLinux = input.ReadBool();
          break;
        }
        case 40: {
          VrContent = input.ReadBool();
          break;
        }
        case 48: {
          AdultContentViolence = input.ReadBool();
          break;
        }
        case 56: {
          AdultContentSex = input.ReadBool();
          break;
        }
        case 64: {
          TimestampUpdated = input.ReadUInt32();
          break;
        }
        case 74:
        case 72: {
          tagidsCurated_.AddEntriesFrom(input, _repeated_tagidsCurated_codec);
          break;
        }
        case 82:
        case 80: {
          tagidsFiltered_.AddEntriesFrom(input, _repeated_tagidsFiltered_codec);
          break;
        }
        case 90: {
          WebsiteTitle = input.ReadString();
          break;
        }
        case 98: {
          WebsiteUrl = input.ReadString();
          break;
        }
        case 106: {
          DiscussionUrl = input.ReadString();
          break;
        }
        case 112: {
          ShowBroadcast = input.ReadBool();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CLocalizationToken : pb::IMessage<CLocalizationToken> {
  private static readonly pb::MessageParser<CLocalizationToken> _parser = new pb::MessageParser<CLocalizationToken>(() => new CLocalizationToken());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CLocalizationToken> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesBaseReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLocalizationToken() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLocalizationToken(CLocalizationToken other) : this() {
    language_ = other.language_;
    localizedString_ = other.localizedString_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLocalizationToken Clone() {
    return new CLocalizationToken(this);
  }

  /// <summary>Field number for the "language" field.</summary>
  public const int LanguageFieldNumber = 1;
  /// <summary>Default value for the "language" field</summary>
  public const uint LanguageDefaultValue = 0;

  private uint? language_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Language {
    get { return language_ ?? LanguageDefaultValue; }
    set {
      language_ = value;
    }
  }
  /// <summary>Gets whether the "language" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLanguage {
    get { return language_ != null; }
  }
  /// <summary>Clears the value of the "language" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLanguage() {
    language_ = null;
  }

  /// <summary>Field number for the "localized_string" field.</summary>
  public const int LocalizedStringFieldNumber = 2;
  /// <summary>Default value for the "localized_string" field</summary>
  public const string LocalizedStringDefaultValue = "";

  private string localizedString_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LocalizedString {
    get { return localizedString_ ?? LocalizedStringDefaultValue; }
    set {
      localizedString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "localized_string" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLocalizedString {
    get { return localizedString_ != null; }
  }
  /// <summary>Clears the value of the "localized_string" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLocalizedString() {
    localizedString_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CLocalizationToken);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CLocalizationToken other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Language != other.Language) return false;
    if (LocalizedString != other.LocalizedString) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLanguage) hash ^= Language.GetHashCode();
    if (HasLocalizedString) hash ^= LocalizedString.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasLanguage) {
      output.WriteRawTag(8);
      output.WriteUInt32(Language);
    }
    if (HasLocalizedString) {
      output.WriteRawTag(18);
      output.WriteString(LocalizedString);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasLanguage) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Language);
    }
    if (HasLocalizedString) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalizedString);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CLocalizationToken other) {
    if (other == null) {
      return;
    }
    if (other.HasLanguage) {
      Language = other.Language;
    }
    if (other.HasLocalizedString) {
      LocalizedString = other.LocalizedString;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Language = input.ReadUInt32();
          break;
        }
        case 18: {
          LocalizedString = input.ReadString();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CClanEventUserNewsTuple : pb::IMessage<CClanEventUserNewsTuple> {
  private static readonly pb::MessageParser<CClanEventUserNewsTuple> _parser = new pb::MessageParser<CClanEventUserNewsTuple>(() => new CClanEventUserNewsTuple());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CClanEventUserNewsTuple> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesBaseReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CClanEventUserNewsTuple() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CClanEventUserNewsTuple(CClanEventUserNewsTuple other) : this() {
    clanid_ = other.clanid_;
    eventGid_ = other.eventGid_;
    announcementGid_ = other.announcementGid_;
    rtimeStart_ = other.rtimeStart_;
    rtimeEnd_ = other.rtimeEnd_;
    priorityScore_ = other.priorityScore_;
    type_ = other.type_;
    clampRangeSlot_ = other.clampRangeSlot_;
    appid_ = other.appid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CClanEventUserNewsTuple Clone() {
    return new CClanEventUserNewsTuple(this);
  }

  /// <summary>Field number for the "clanid" field.</summary>
  public const int ClanidFieldNumber = 1;
  /// <summary>Default value for the "clanid" field</summary>
  public const uint ClanidDefaultValue = 0;

  private uint? clanid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Clanid {
    get { return clanid_ ?? ClanidDefaultValue; }
    set {
      clanid_ = value;
    }
  }
  /// <summary>Gets whether the "clanid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClanid {
    get { return clanid_ != null; }
  }
  /// <summary>Clears the value of the "clanid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClanid() {
    clanid_ = null;
  }

  /// <summary>Field number for the "event_gid" field.</summary>
  public const int EventGidFieldNumber = 2;
  /// <summary>Default value for the "event_gid" field</summary>
  public const ulong EventGidDefaultValue = 0UL;

  private ulong? eventGid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong EventGid {
    get { return eventGid_ ?? EventGidDefaultValue; }
    set {
      eventGid_ = value;
    }
  }
  /// <summary>Gets whether the "event_gid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEventGid {
    get { return eventGid_ != null; }
  }
  /// <summary>Clears the value of the "event_gid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEventGid() {
    eventGid_ = null;
  }

  /// <summary>Field number for the "announcement_gid" field.</summary>
  public const int AnnouncementGidFieldNumber = 3;
  /// <summary>Default value for the "announcement_gid" field</summary>
  public const ulong AnnouncementGidDefaultValue = 0UL;

  private ulong? announcementGid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong AnnouncementGid {
    get { return announcementGid_ ?? AnnouncementGidDefaultValue; }
    set {
      announcementGid_ = value;
    }
  }
  /// <summary>Gets whether the "announcement_gid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAnnouncementGid {
    get { return announcementGid_ != null; }
  }
  /// <summary>Clears the value of the "announcement_gid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAnnouncementGid() {
    announcementGid_ = null;
  }

  /// <summary>Field number for the "rtime_start" field.</summary>
  public const int RtimeStartFieldNumber = 4;
  /// <summary>Default value for the "rtime_start" field</summary>
  public const uint RtimeStartDefaultValue = 0;

  private uint? rtimeStart_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RtimeStart {
    get { return rtimeStart_ ?? RtimeStartDefaultValue; }
    set {
      rtimeStart_ = value;
    }
  }
  /// <summary>Gets whether the "rtime_start" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRtimeStart {
    get { return rtimeStart_ != null; }
  }
  /// <summary>Clears the value of the "rtime_start" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRtimeStart() {
    rtimeStart_ = null;
  }

  /// <summary>Field number for the "rtime_end" field.</summary>
  public const int RtimeEndFieldNumber = 5;
  /// <summary>Default value for the "rtime_end" field</summary>
  public const uint RtimeEndDefaultValue = 0;

  private uint? rtimeEnd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RtimeEnd {
    get { return rtimeEnd_ ?? RtimeEndDefaultValue; }
    set {
      rtimeEnd_ = value;
    }
  }
  /// <summary>Gets whether the "rtime_end" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRtimeEnd {
    get { return rtimeEnd_ != null; }
  }
  /// <summary>Clears the value of the "rtime_end" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRtimeEnd() {
    rtimeEnd_ = null;
  }

  /// <summary>Field number for the "priority_score" field.</summary>
  public const int PriorityScoreFieldNumber = 6;
  /// <summary>Default value for the "priority_score" field</summary>
  public const uint PriorityScoreDefaultValue = 0;

  private uint? priorityScore_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PriorityScore {
    get { return priorityScore_ ?? PriorityScoreDefaultValue; }
    set {
      priorityScore_ = value;
    }
  }
  /// <summary>Gets whether the "priority_score" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPriorityScore {
    get { return priorityScore_ != null; }
  }
  /// <summary>Clears the value of the "priority_score" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPriorityScore() {
    priorityScore_ = null;
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 7;
  /// <summary>Default value for the "type" field</summary>
  public const uint TypeDefaultValue = 0;

  private uint? type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Type {
    get { return type_ ?? TypeDefaultValue; }
    set {
      type_ = value;
    }
  }
  /// <summary>Gets whether the "type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasType {
    get { return type_ != null; }
  }
  /// <summary>Clears the value of the "type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearType() {
    type_ = null;
  }

  /// <summary>Field number for the "clamp_range_slot" field.</summary>
  public const int ClampRangeSlotFieldNumber = 8;
  /// <summary>Default value for the "clamp_range_slot" field</summary>
  public const uint ClampRangeSlotDefaultValue = 0;

  private uint? clampRangeSlot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ClampRangeSlot {
    get { return clampRangeSlot_ ?? ClampRangeSlotDefaultValue; }
    set {
      clampRangeSlot_ = value;
    }
  }
  /// <summary>Gets whether the "clamp_range_slot" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClampRangeSlot {
    get { return clampRangeSlot_ != null; }
  }
  /// <summary>Clears the value of the "clamp_range_slot" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClampRangeSlot() {
    clampRangeSlot_ = null;
  }

  /// <summary>Field number for the "appid" field.</summary>
  public const int AppidFieldNumber = 9;
  /// <summary>Default value for the "appid" field</summary>
  public const uint AppidDefaultValue = 0;

  private uint? appid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Appid {
    get { return appid_ ?? AppidDefaultValue; }
    set {
      appid_ = value;
    }
  }
  /// <summary>Gets whether the "appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAppid {
    get { return appid_ != null; }
  }
  /// <summary>Clears the value of the "appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAppid() {
    appid_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CClanEventUserNewsTuple);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CClanEventUserNewsTuple other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Clanid != other.Clanid) return false;
    if (EventGid != other.EventGid) return false;
    if (AnnouncementGid != other.AnnouncementGid) return false;
    if (RtimeStart != other.RtimeStart) return false;
    if (RtimeEnd != other.RtimeEnd) return false;
    if (PriorityScore != other.PriorityScore) return false;
    if (Type != other.Type) return false;
    if (ClampRangeSlot != other.ClampRangeSlot) return false;
    if (Appid != other.Appid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClanid) hash ^= Clanid.GetHashCode();
    if (HasEventGid) hash ^= EventGid.GetHashCode();
    if (HasAnnouncementGid) hash ^= AnnouncementGid.GetHashCode();
    if (HasRtimeStart) hash ^= RtimeStart.GetHashCode();
    if (HasRtimeEnd) hash ^= RtimeEnd.GetHashCode();
    if (HasPriorityScore) hash ^= PriorityScore.GetHashCode();
    if (HasType) hash ^= Type.GetHashCode();
    if (HasClampRangeSlot) hash ^= ClampRangeSlot.GetHashCode();
    if (HasAppid) hash ^= Appid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasClanid) {
      output.WriteRawTag(8);
      output.WriteUInt32(Clanid);
    }
    if (HasEventGid) {
      output.WriteRawTag(17);
      output.WriteFixed64(EventGid);
    }
    if (HasAnnouncementGid) {
      output.WriteRawTag(25);
      output.WriteFixed64(AnnouncementGid);
    }
    if (HasRtimeStart) {
      output.WriteRawTag(32);
      output.WriteUInt32(RtimeStart);
    }
    if (HasRtimeEnd) {
      output.WriteRawTag(40);
      output.WriteUInt32(RtimeEnd);
    }
    if (HasPriorityScore) {
      output.WriteRawTag(48);
      output.WriteUInt32(PriorityScore);
    }
    if (HasType) {
      output.WriteRawTag(56);
      output.WriteUInt32(Type);
    }
    if (HasClampRangeSlot) {
      output.WriteRawTag(64);
      output.WriteUInt32(ClampRangeSlot);
    }
    if (HasAppid) {
      output.WriteRawTag(72);
      output.WriteUInt32(Appid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasClanid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Clanid);
    }
    if (HasEventGid) {
      size += 1 + 8;
    }
    if (HasAnnouncementGid) {
      size += 1 + 8;
    }
    if (HasRtimeStart) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RtimeStart);
    }
    if (HasRtimeEnd) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RtimeEnd);
    }
    if (HasPriorityScore) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PriorityScore);
    }
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
    }
    if (HasClampRangeSlot) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClampRangeSlot);
    }
    if (HasAppid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CClanEventUserNewsTuple other) {
    if (other == null) {
      return;
    }
    if (other.HasClanid) {
      Clanid = other.Clanid;
    }
    if (other.HasEventGid) {
      EventGid = other.EventGid;
    }
    if (other.HasAnnouncementGid) {
      AnnouncementGid = other.AnnouncementGid;
    }
    if (other.HasRtimeStart) {
      RtimeStart = other.RtimeStart;
    }
    if (other.HasRtimeEnd) {
      RtimeEnd = other.RtimeEnd;
    }
    if (other.HasPriorityScore) {
      PriorityScore = other.PriorityScore;
    }
    if (other.HasType) {
      Type = other.Type;
    }
    if (other.HasClampRangeSlot) {
      ClampRangeSlot = other.ClampRangeSlot;
    }
    if (other.HasAppid) {
      Appid = other.Appid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Clanid = input.ReadUInt32();
          break;
        }
        case 17: {
          EventGid = input.ReadFixed64();
          break;
        }
        case 25: {
          AnnouncementGid = input.ReadFixed64();
          break;
        }
        case 32: {
          RtimeStart = input.ReadUInt32();
          break;
        }
        case 40: {
          RtimeEnd = input.ReadUInt32();
          break;
        }
        case 48: {
          PriorityScore = input.ReadUInt32();
          break;
        }
        case 56: {
          Type = input.ReadUInt32();
          break;
        }
        case 64: {
          ClampRangeSlot = input.ReadUInt32();
          break;
        }
        case 72: {
          Appid = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CClanMatchEventByRange : pb::IMessage<CClanMatchEventByRange> {
  private static readonly pb::MessageParser<CClanMatchEventByRange> _parser = new pb::MessageParser<CClanMatchEventByRange>(() => new CClanMatchEventByRange());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CClanMatchEventByRange> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesBaseReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CClanMatchEventByRange() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CClanMatchEventByRange(CClanMatchEventByRange other) : this() {
    rtimeBefore_ = other.rtimeBefore_;
    rtimeAfter_ = other.rtimeAfter_;
    qualified_ = other.qualified_;
    events_ = other.events_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CClanMatchEventByRange Clone() {
    return new CClanMatchEventByRange(this);
  }

  /// <summary>Field number for the "rtime_before" field.</summary>
  public const int RtimeBeforeFieldNumber = 1;
  /// <summary>Default value for the "rtime_before" field</summary>
  public const uint RtimeBeforeDefaultValue = 0;

  private uint? rtimeBefore_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RtimeBefore {
    get { return rtimeBefore_ ?? RtimeBeforeDefaultValue; }
    set {
      rtimeBefore_ = value;
    }
  }
  /// <summary>Gets whether the "rtime_before" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRtimeBefore {
    get { return rtimeBefore_ != null; }
  }
  /// <summary>Clears the value of the "rtime_before" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRtimeBefore() {
    rtimeBefore_ = null;
  }

  /// <summary>Field number for the "rtime_after" field.</summary>
  public const int RtimeAfterFieldNumber = 2;
  /// <summary>Default value for the "rtime_after" field</summary>
  public const uint RtimeAfterDefaultValue = 0;

  private uint? rtimeAfter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RtimeAfter {
    get { return rtimeAfter_ ?? RtimeAfterDefaultValue; }
    set {
      rtimeAfter_ = value;
    }
  }
  /// <summary>Gets whether the "rtime_after" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRtimeAfter {
    get { return rtimeAfter_ != null; }
  }
  /// <summary>Clears the value of the "rtime_after" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRtimeAfter() {
    rtimeAfter_ = null;
  }

  /// <summary>Field number for the "qualified" field.</summary>
  public const int QualifiedFieldNumber = 3;
  /// <summary>Default value for the "qualified" field</summary>
  public const uint QualifiedDefaultValue = 0;

  private uint? qualified_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Qualified {
    get { return qualified_ ?? QualifiedDefaultValue; }
    set {
      qualified_ = value;
    }
  }
  /// <summary>Gets whether the "qualified" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasQualified {
    get { return qualified_ != null; }
  }
  /// <summary>Clears the value of the "qualified" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearQualified() {
    qualified_ = null;
  }

  /// <summary>Field number for the "events" field.</summary>
  public const int EventsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::CClanEventUserNewsTuple> _repeated_events_codec
      = pb::FieldCodec.ForMessage(34, global::CClanEventUserNewsTuple.Parser);
  private readonly pbc::RepeatedField<global::CClanEventUserNewsTuple> events_ = new pbc::RepeatedField<global::CClanEventUserNewsTuple>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CClanEventUserNewsTuple> Events {
    get { return events_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CClanMatchEventByRange);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CClanMatchEventByRange other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RtimeBefore != other.RtimeBefore) return false;
    if (RtimeAfter != other.RtimeAfter) return false;
    if (Qualified != other.Qualified) return false;
    if(!events_.Equals(other.events_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRtimeBefore) hash ^= RtimeBefore.GetHashCode();
    if (HasRtimeAfter) hash ^= RtimeAfter.GetHashCode();
    if (HasQualified) hash ^= Qualified.GetHashCode();
    hash ^= events_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasRtimeBefore) {
      output.WriteRawTag(8);
      output.WriteUInt32(RtimeBefore);
    }
    if (HasRtimeAfter) {
      output.WriteRawTag(16);
      output.WriteUInt32(RtimeAfter);
    }
    if (HasQualified) {
      output.WriteRawTag(24);
      output.WriteUInt32(Qualified);
    }
    events_.WriteTo(output, _repeated_events_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasRtimeBefore) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RtimeBefore);
    }
    if (HasRtimeAfter) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RtimeAfter);
    }
    if (HasQualified) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Qualified);
    }
    size += events_.CalculateSize(_repeated_events_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CClanMatchEventByRange other) {
    if (other == null) {
      return;
    }
    if (other.HasRtimeBefore) {
      RtimeBefore = other.RtimeBefore;
    }
    if (other.HasRtimeAfter) {
      RtimeAfter = other.RtimeAfter;
    }
    if (other.HasQualified) {
      Qualified = other.Qualified;
    }
    events_.Add(other.events_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RtimeBefore = input.ReadUInt32();
          break;
        }
        case 16: {
          RtimeAfter = input.ReadUInt32();
          break;
        }
        case 24: {
          Qualified = input.ReadUInt32();
          break;
        }
        case 34: {
          events_.AddEntriesFrom(input, _repeated_events_codec);
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!events_.IsInitialized()) return false;
    return true;
  }
}

#endregion


#endregion Designer generated code
