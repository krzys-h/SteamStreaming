// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: steammessages_remoteclient_discovery.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from steammessages_remoteclient_discovery.proto</summary>
public static partial class SteammessagesRemoteclientDiscoveryReflection {

  #region Descriptor
  /// <summary>File descriptor for steammessages_remoteclient_discovery.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SteammessagesRemoteclientDiscoveryReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CipzdGVhbW1lc3NhZ2VzX3JlbW90ZWNsaWVudF9kaXNjb3ZlcnkucHJvdG8i",
          "xgEKH0NNc2dSZW1vdGVDbGllbnRCcm9hZGNhc3RIZWFkZXISEQoJY2xpZW50",
          "X2lkGAEgASgEElIKCG1zZ190eXBlGAIgASgOMhouRVJlbW90ZUNsaWVudEJy",
          "b2FkY2FzdE1zZzoka19FUmVtb3RlQ2xpZW50QnJvYWRjYXN0TXNnRGlzY292",
          "ZXJ5EhMKC2luc3RhbmNlX2lkGAMgASgEEhEKCWRldmljZV9pZBgEIAEoBBIU",
          "CgxkZXZpY2VfdG9rZW4YBSABKAwimgQKH0NNc2dSZW1vdGVDbGllbnRCcm9h",
          "ZGNhc3RTdGF0dXMSDwoHdmVyc2lvbhgBIAEoBRITCgttaW5fdmVyc2lvbhgC",
          "IAEoBRIUCgxjb25uZWN0X3BvcnQYAyABKA0SEAoIaG9zdG5hbWUYBCABKAkS",
          "GAoQZW5hYmxlZF9zZXJ2aWNlcxgGIAEoDRIRCgZvc3R5cGUYByABKAU6ATAS",
          "DwoHaXM2NGJpdBgIIAEoCBI0CgV1c2VycxgJIAMoCzIlLkNNc2dSZW1vdGVD",
          "bGllbnRCcm9hZGNhc3RTdGF0dXMuVXNlchIRCglldW5pdmVyc2UYCyABKAUS",
          "EQoJdGltZXN0YW1wGAwgASgNEhUKDXNjcmVlbl9sb2NrZWQYDSABKAgSFQoN",
          "Z2FtZXNfcnVubmluZxgOIAEoCBIVCg1tYWNfYWRkcmVzc2VzGA8gAygJEh8K",
          "F2Rvd25sb2FkX2xhbl9wZWVyX2dyb3VwGBAgASgNEhsKE2Jyb2FkY2FzdGlu",
          "Z19hY3RpdmUYESABKAgSEQoJdnJfYWN0aXZlGBIgASgIEhoKEmNvbnRlbnRf",
          "Y2FjaGVfcG9ydBgTIAEoDRIUCgxpcF9hZGRyZXNzZXMYFCADKAkSGQoRcHVi",
          "bGljX2lwX2FkZHJlc3MYFSABKAkaLAoEVXNlchIPCgdzdGVhbWlkGAEgASgG",
          "EhMKC2F1dGhfa2V5X2lkGAIgASgNIkkKIkNNc2dSZW1vdGVDbGllbnRCcm9h",
          "ZGNhc3REaXNjb3ZlcnkSDwoHc2VxX251bRgBIAEoDRISCgpjbGllbnRfaWRz",
          "GAIgAygEIkEKK0NNc2dSZW1vdGVDbGllbnRCcm9hZGNhc3RDbGllbnRJRERl",
          "Y29uZmxpY3QSEgoKY2xpZW50X2lkcxgCIAMoBCLPAwokQ01zZ1JlbW90ZURl",
          "dmljZUF1dGhvcml6YXRpb25SZXF1ZXN0EhQKDGRldmljZV90b2tlbhgBIAIo",
          "DBITCgtkZXZpY2VfbmFtZRgCIAEoCRIZChFlbmNyeXB0ZWRfcmVxdWVzdBgD",
          "IAIoDBqnAgoRQ0tleUVzY3Jvd19UaWNrZXQSEAoIcGFzc3dvcmQYASABKAwS",
          "EgoKaWRlbnRpZmllchgCIAEoBBIPCgdwYXlsb2FkGAMgASgMEhEKCXRpbWVz",
          "dGFtcBgEIAEoDRJmCgV1c2FnZRgFIAEoDjI1LkNNc2dSZW1vdGVEZXZpY2VB",
          "dXRob3JpemF0aW9uUmVxdWVzdC5FS2V5RXNjcm93VXNhZ2U6IGtfRUtleUVz",
          "Y3Jvd1VzYWdlU3RyZWFtaW5nRGV2aWNlEhMKC2RldmljZV9uYW1lGAYgASgJ",
          "EhQKDGRldmljZV9tb2RlbBgHIAEoCRIVCg1kZXZpY2Vfc2VyaWFsGAggASgJ",
          "Eh4KFmRldmljZV9wcm92aXNpb25pbmdfaWQYCSABKA0iNwoPRUtleUVzY3Jv",
          "d1VzYWdlEiQKIGtfRUtleUVzY3Jvd1VzYWdlU3RyZWFtaW5nRGV2aWNlEAAi",
          "LAoqQ01zZ1JlbW90ZURldmljZUF1dGhvcml6YXRpb25DYW5jZWxSZXF1ZXN0",
          "IpABCiVDTXNnUmVtb3RlRGV2aWNlQXV0aG9yaXphdGlvblJlc3BvbnNlElYK",
          "BnJlc3VsdBgBIAIoDjIhLkVSZW1vdGVEZXZpY2VBdXRob3JpemF0aW9uUmVz",
          "dWx0OiNrX0VSZW1vdGVEZXZpY2VBdXRob3JpemF0aW9uU3VjY2VzcxIPCgdz",
          "dGVhbWlkGAIgASgGIrADCiBDTXNnUmVtb3RlRGV2aWNlU3RyZWFtaW5nUmVx",
          "dWVzdBISCgpyZXF1ZXN0X2lkGAEgAigNEhwKFG1heGltdW1fcmVzb2x1dGlv",
          "bl94GAIgASgFEhwKFG1heGltdW1fcmVzb2x1dGlvbl95GAMgASgFEh4KE2F1",
          "ZGlvX2NoYW5uZWxfY291bnQYBCABKAU6ATISFgoOZGV2aWNlX3ZlcnNpb24Y",
          "BSABKAkSFgoOc3RyZWFtX2Rlc2t0b3AYBiABKAgSFAoMZGV2aWNlX3Rva2Vu",
          "GAcgASgMEgsKA3BpbhgIIAEoDBIkChZlbmFibGVfdmlkZW9fc3RyZWFtaW5n",
          "GAkgASgIOgR0cnVlEiQKFmVuYWJsZV9hdWRpb19zdHJlYW1pbmcYCiABKAg6",
          "BHRydWUSJAoWZW5hYmxlX2lucHV0X3N0cmVhbWluZxgLIAEoCDoEdHJ1ZRIU",
          "CgxuZXR3b3JrX3Rlc3QYDCABKAgSEQoJY2xpZW50X2lkGA0gASgEEi4KE3N1",
          "cHBvcnRlZF90cmFuc3BvcnQYDiADKA4yES5FU3RyZWFtVHJhbnNwb3J0IjwK",
          "JkNNc2dSZW1vdGVEZXZpY2VTdHJlYW1pbmdDYW5jZWxSZXF1ZXN0EhIKCnJl",
          "cXVlc3RfaWQYASACKA0ihwIKIUNNc2dSZW1vdGVEZXZpY2VTdHJlYW1pbmdS",
          "ZXNwb25zZRISCgpyZXF1ZXN0X2lkGAEgAigNEk4KBnJlc3VsdBgCIAIoDjId",
          "LkVSZW1vdGVEZXZpY2VTdHJlYW1pbmdSZXN1bHQ6H2tfRVJlbW90ZURldmlj",
          "ZVN0cmVhbWluZ1N1Y2Nlc3MSDAoEcG9ydBgDIAEoDRIdChVlbmNyeXB0ZWRf",
          "c2Vzc2lvbl9rZXkYBCABKAwSOwoJdHJhbnNwb3J0GAYgASgOMhEuRVN0cmVh",
          "bVRyYW5zcG9ydDoVa19FU3RyZWFtVHJhbnNwb3J0VURQEhQKDHJlbGF5X3Nl",
          "cnZlchgHIAEoCSIxChxDTXNnUmVtb3RlRGV2aWNlUHJvb2ZSZXF1ZXN0EhEK",
          "CWNoYWxsZW5nZRgBIAIoDCIxCh1DTXNnUmVtb3RlRGV2aWNlUHJvb2ZSZXNw",
          "b25zZRIQCghyZXNwb25zZRgBIAIoDCJHCiVDTXNnUmVtb3RlRGV2aWNlU3Ry",
          "ZWFtVHJhbnNwb3J0U2lnbmFsEg0KBXRva2VuGAEgASgMEg8KB3BheWxvYWQY",
          "AiABKAwqrAQKGUVSZW1vdGVDbGllbnRCcm9hZGNhc3RNc2cSKAoka19FUmVt",
          "b3RlQ2xpZW50QnJvYWRjYXN0TXNnRGlzY292ZXJ5EAASJQoha19FUmVtb3Rl",
          "Q2xpZW50QnJvYWRjYXN0TXNnU3RhdHVzEAESJgoia19FUmVtb3RlQ2xpZW50",
          "QnJvYWRjYXN0TXNnT2ZmbGluZRACEicKI2tfRVJlbW90ZURldmljZUF1dGhv",
          "cml6YXRpb25SZXF1ZXN0EAMSKAoka19FUmVtb3RlRGV2aWNlQXV0aG9yaXph",
          "dGlvblJlc3BvbnNlEAQSIwofa19FUmVtb3RlRGV2aWNlU3RyZWFtaW5nUmVx",
          "dWVzdBAFEiQKIGtfRVJlbW90ZURldmljZVN0cmVhbWluZ1Jlc3BvbnNlEAYS",
          "Hwoba19FUmVtb3RlRGV2aWNlUHJvb2ZSZXF1ZXN0EAcSIAoca19FUmVtb3Rl",
          "RGV2aWNlUHJvb2ZSZXNwb25zZRAIEi0KKWtfRVJlbW90ZURldmljZUF1dGhv",
          "cml6YXRpb25DYW5jZWxSZXF1ZXN0EAkSKQola19FUmVtb3RlRGV2aWNlU3Ry",
          "ZWFtaW5nQ2FuY2VsUmVxdWVzdBAKEjEKLWtfRVJlbW90ZUNsaWVudEJyb2Fk",
          "Y2FzdE1zZ0NsaWVudElERGVjb25mbGljdBALEigKJGtfRVJlbW90ZURldmlj",
          "ZVN0cmVhbVRyYW5zcG9ydFNpZ25hbBAMKtcBChRFUmVtb3RlQ2xpZW50U2Vy",
          "dmljZRIeChprX0VSZW1vdGVDbGllbnRTZXJ2aWNlTm9uZRAAEicKI2tfRVJl",
          "bW90ZUNsaWVudFNlcnZpY2VSZW1vdGVDb250cm9sEAESJwoja19FUmVtb3Rl",
          "Q2xpZW50U2VydmljZUdhbWVTdHJlYW1pbmcQAhIlCiFrX0VSZW1vdGVDbGll",
          "bnRTZXJ2aWNlU2l0ZUxpY2Vuc2UQBBImCiJrX0VSZW1vdGVDbGllbnRTZXJ2",
          "aWNlQ29udGVudENhY2hlEAgqlwMKIEVSZW1vdGVEZXZpY2VBdXRob3JpemF0",
          "aW9uUmVzdWx0EicKI2tfRVJlbW90ZURldmljZUF1dGhvcml6YXRpb25TdWNj",
          "ZXNzEAASJgoia19FUmVtb3RlRGV2aWNlQXV0aG9yaXphdGlvbkRlbmllZBAB",
          "EisKJ2tfRVJlbW90ZURldmljZUF1dGhvcml6YXRpb25Ob3RMb2dnZWRJbhAC",
          "EicKI2tfRVJlbW90ZURldmljZUF1dGhvcml6YXRpb25PZmZsaW5lEAMSJAog",
          "a19FUmVtb3RlRGV2aWNlQXV0aG9yaXphdGlvbkJ1c3kQBBIqCiZrX0VSZW1v",
          "dGVEZXZpY2VBdXRob3JpemF0aW9uSW5Qcm9ncmVzcxAFEigKJGtfRVJlbW90",
          "ZURldmljZUF1dGhvcml6YXRpb25UaW1lZE91dBAGEiYKImtfRVJlbW90ZURl",
          "dmljZUF1dGhvcml6YXRpb25GYWlsZWQQBxIoCiRrX0VSZW1vdGVEZXZpY2VB",
          "dXRob3JpemF0aW9uQ2FuY2VsZWQQCCqHAQoQRVN0cmVhbVRyYW5zcG9ydBIa",
          "ChZrX0VTdHJlYW1UcmFuc3BvcnROb25lEAASGQoVa19FU3RyZWFtVHJhbnNw",
          "b3J0VURQEAESHgoaa19FU3RyZWFtVHJhbnNwb3J0VURQUmVsYXkQAhIcChhr",
          "X0VTdHJlYW1UcmFuc3BvcnRXZWJSVEMQAyqzBAocRVJlbW90ZURldmljZVN0",
          "cmVhbWluZ1Jlc3VsdBIjCh9rX0VSZW1vdGVEZXZpY2VTdHJlYW1pbmdTdWNj",
          "ZXNzEAASKAoka19FUmVtb3RlRGV2aWNlU3RyZWFtaW5nVW5hdXRob3JpemVk",
          "EAESKAoka19FUmVtb3RlRGV2aWNlU3RyZWFtaW5nU2NyZWVuTG9ja2VkEAIS",
          "Igoea19FUmVtb3RlRGV2aWNlU3RyZWFtaW5nRmFpbGVkEAMSIAoca19FUmVt",
          "b3RlRGV2aWNlU3RyZWFtaW5nQnVzeRAEEiYKImtfRVJlbW90ZURldmljZVN0",
          "cmVhbWluZ0luUHJvZ3Jlc3MQBRIkCiBrX0VSZW1vdGVEZXZpY2VTdHJlYW1p",
          "bmdDYW5jZWxlZBAGEi8KK2tfRVJlbW90ZURldmljZVN0cmVhbWluZ0RyaXZl",
          "cnNOb3RJbnN0YWxsZWQQBxIkCiBrX0VSZW1vdGVEZXZpY2VTdHJlYW1pbmdE",
          "aXNhYmxlZBAIEi4KKmtfRVJlbW90ZURldmljZVN0cmVhbWluZ0Jyb2FkY2Fz",
          "dGluZ0FjdGl2ZRAJEiQKIGtfRVJlbW90ZURldmljZVN0cmVhbWluZ1ZSQWN0",
          "aXZlEAoSJwoja19FUmVtb3RlRGV2aWNlU3RyZWFtaW5nUElOUmVxdWlyZWQQ",
          "CxIwCixrX0VSZW1vdGVEZXZpY2VTdHJlYW1pbmdUcmFuc3BvcnRVbmF2YWls",
          "YWJsZRAMQgJIAQ=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ERemoteClientBroadcastMsg), typeof(global::ERemoteClientService), typeof(global::ERemoteDeviceAuthorizationResult), typeof(global::EStreamTransport), typeof(global::ERemoteDeviceStreamingResult), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientBroadcastHeader), global::CMsgRemoteClientBroadcastHeader.Parser, new[]{ "ClientId", "MsgType", "InstanceId", "DeviceId", "DeviceToken" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientBroadcastStatus), global::CMsgRemoteClientBroadcastStatus.Parser, new[]{ "Version", "MinVersion", "ConnectPort", "Hostname", "EnabledServices", "Ostype", "Is64Bit", "Users", "Euniverse", "Timestamp", "ScreenLocked", "GamesRunning", "MacAddresses", "DownloadLanPeerGroup", "BroadcastingActive", "VrActive", "ContentCachePort", "IpAddresses", "PublicIpAddress" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientBroadcastStatus.Types.User), global::CMsgRemoteClientBroadcastStatus.Types.User.Parser, new[]{ "Steamid", "AuthKeyId" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientBroadcastDiscovery), global::CMsgRemoteClientBroadcastDiscovery.Parser, new[]{ "SeqNum", "ClientIds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteClientBroadcastClientIDDeconflict), global::CMsgRemoteClientBroadcastClientIDDeconflict.Parser, new[]{ "ClientIds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteDeviceAuthorizationRequest), global::CMsgRemoteDeviceAuthorizationRequest.Parser, new[]{ "DeviceToken", "DeviceName", "EncryptedRequest" }, null, new[]{ typeof(global::CMsgRemoteDeviceAuthorizationRequest.Types.EKeyEscrowUsage) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteDeviceAuthorizationRequest.Types.CKeyEscrow_Ticket), global::CMsgRemoteDeviceAuthorizationRequest.Types.CKeyEscrow_Ticket.Parser, new[]{ "Password", "Identifier", "Payload", "Timestamp", "Usage", "DeviceName", "DeviceModel", "DeviceSerial", "DeviceProvisioningId" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteDeviceAuthorizationCancelRequest), global::CMsgRemoteDeviceAuthorizationCancelRequest.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteDeviceAuthorizationResponse), global::CMsgRemoteDeviceAuthorizationResponse.Parser, new[]{ "Result", "Steamid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteDeviceStreamingRequest), global::CMsgRemoteDeviceStreamingRequest.Parser, new[]{ "RequestId", "MaximumResolutionX", "MaximumResolutionY", "AudioChannelCount", "DeviceVersion", "StreamDesktop", "DeviceToken", "Pin", "EnableVideoStreaming", "EnableAudioStreaming", "EnableInputStreaming", "NetworkTest", "ClientId", "SupportedTransport" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteDeviceStreamingCancelRequest), global::CMsgRemoteDeviceStreamingCancelRequest.Parser, new[]{ "RequestId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteDeviceStreamingResponse), global::CMsgRemoteDeviceStreamingResponse.Parser, new[]{ "RequestId", "Result", "Port", "EncryptedSessionKey", "Transport", "RelayServer" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteDeviceProofRequest), global::CMsgRemoteDeviceProofRequest.Parser, new[]{ "Challenge" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteDeviceProofResponse), global::CMsgRemoteDeviceProofResponse.Parser, new[]{ "Response" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRemoteDeviceStreamTransportSignal), global::CMsgRemoteDeviceStreamTransportSignal.Parser, new[]{ "Token", "Payload" }, null, null, null, null)
        }));
  }
  #endregion

}

#region Enums
public enum ERemoteClientBroadcastMsg {
  [pbr::OriginalName("k_ERemoteClientBroadcastMsgDiscovery")] KEremoteClientBroadcastMsgDiscovery = 0,
  [pbr::OriginalName("k_ERemoteClientBroadcastMsgStatus")] KEremoteClientBroadcastMsgStatus = 1,
  [pbr::OriginalName("k_ERemoteClientBroadcastMsgOffline")] KEremoteClientBroadcastMsgOffline = 2,
  [pbr::OriginalName("k_ERemoteDeviceAuthorizationRequest")] KEremoteDeviceAuthorizationRequest = 3,
  [pbr::OriginalName("k_ERemoteDeviceAuthorizationResponse")] KEremoteDeviceAuthorizationResponse = 4,
  [pbr::OriginalName("k_ERemoteDeviceStreamingRequest")] KEremoteDeviceStreamingRequest = 5,
  [pbr::OriginalName("k_ERemoteDeviceStreamingResponse")] KEremoteDeviceStreamingResponse = 6,
  [pbr::OriginalName("k_ERemoteDeviceProofRequest")] KEremoteDeviceProofRequest = 7,
  [pbr::OriginalName("k_ERemoteDeviceProofResponse")] KEremoteDeviceProofResponse = 8,
  [pbr::OriginalName("k_ERemoteDeviceAuthorizationCancelRequest")] KEremoteDeviceAuthorizationCancelRequest = 9,
  [pbr::OriginalName("k_ERemoteDeviceStreamingCancelRequest")] KEremoteDeviceStreamingCancelRequest = 10,
  [pbr::OriginalName("k_ERemoteClientBroadcastMsgClientIDDeconflict")] KEremoteClientBroadcastMsgClientIddeconflict = 11,
  [pbr::OriginalName("k_ERemoteDeviceStreamTransportSignal")] KEremoteDeviceStreamTransportSignal = 12,
}

public enum ERemoteClientService {
  [pbr::OriginalName("k_ERemoteClientServiceNone")] KEremoteClientServiceNone = 0,
  [pbr::OriginalName("k_ERemoteClientServiceRemoteControl")] KEremoteClientServiceRemoteControl = 1,
  [pbr::OriginalName("k_ERemoteClientServiceGameStreaming")] KEremoteClientServiceGameStreaming = 2,
  [pbr::OriginalName("k_ERemoteClientServiceSiteLicense")] KEremoteClientServiceSiteLicense = 4,
  [pbr::OriginalName("k_ERemoteClientServiceContentCache")] KEremoteClientServiceContentCache = 8,
}

public enum ERemoteDeviceAuthorizationResult {
  [pbr::OriginalName("k_ERemoteDeviceAuthorizationSuccess")] KEremoteDeviceAuthorizationSuccess = 0,
  [pbr::OriginalName("k_ERemoteDeviceAuthorizationDenied")] KEremoteDeviceAuthorizationDenied = 1,
  [pbr::OriginalName("k_ERemoteDeviceAuthorizationNotLoggedIn")] KEremoteDeviceAuthorizationNotLoggedIn = 2,
  [pbr::OriginalName("k_ERemoteDeviceAuthorizationOffline")] KEremoteDeviceAuthorizationOffline = 3,
  [pbr::OriginalName("k_ERemoteDeviceAuthorizationBusy")] KEremoteDeviceAuthorizationBusy = 4,
  [pbr::OriginalName("k_ERemoteDeviceAuthorizationInProgress")] KEremoteDeviceAuthorizationInProgress = 5,
  [pbr::OriginalName("k_ERemoteDeviceAuthorizationTimedOut")] KEremoteDeviceAuthorizationTimedOut = 6,
  [pbr::OriginalName("k_ERemoteDeviceAuthorizationFailed")] KEremoteDeviceAuthorizationFailed = 7,
  [pbr::OriginalName("k_ERemoteDeviceAuthorizationCanceled")] KEremoteDeviceAuthorizationCanceled = 8,
}

public enum EStreamTransport {
  [pbr::OriginalName("k_EStreamTransportNone")] KEstreamTransportNone = 0,
  [pbr::OriginalName("k_EStreamTransportUDP")] KEstreamTransportUdp = 1,
  [pbr::OriginalName("k_EStreamTransportUDPRelay")] KEstreamTransportUdprelay = 2,
  [pbr::OriginalName("k_EStreamTransportWebRTC")] KEstreamTransportWebRtc = 3,
}

public enum ERemoteDeviceStreamingResult {
  [pbr::OriginalName("k_ERemoteDeviceStreamingSuccess")] KEremoteDeviceStreamingSuccess = 0,
  [pbr::OriginalName("k_ERemoteDeviceStreamingUnauthorized")] KEremoteDeviceStreamingUnauthorized = 1,
  [pbr::OriginalName("k_ERemoteDeviceStreamingScreenLocked")] KEremoteDeviceStreamingScreenLocked = 2,
  [pbr::OriginalName("k_ERemoteDeviceStreamingFailed")] KEremoteDeviceStreamingFailed = 3,
  [pbr::OriginalName("k_ERemoteDeviceStreamingBusy")] KEremoteDeviceStreamingBusy = 4,
  [pbr::OriginalName("k_ERemoteDeviceStreamingInProgress")] KEremoteDeviceStreamingInProgress = 5,
  [pbr::OriginalName("k_ERemoteDeviceStreamingCanceled")] KEremoteDeviceStreamingCanceled = 6,
  [pbr::OriginalName("k_ERemoteDeviceStreamingDriversNotInstalled")] KEremoteDeviceStreamingDriversNotInstalled = 7,
  [pbr::OriginalName("k_ERemoteDeviceStreamingDisabled")] KEremoteDeviceStreamingDisabled = 8,
  [pbr::OriginalName("k_ERemoteDeviceStreamingBroadcastingActive")] KEremoteDeviceStreamingBroadcastingActive = 9,
  [pbr::OriginalName("k_ERemoteDeviceStreamingVRActive")] KEremoteDeviceStreamingVractive = 10,
  [pbr::OriginalName("k_ERemoteDeviceStreamingPINRequired")] KEremoteDeviceStreamingPinrequired = 11,
  [pbr::OriginalName("k_ERemoteDeviceStreamingTransportUnavailable")] KEremoteDeviceStreamingTransportUnavailable = 12,
}

#endregion

#region Messages
public sealed partial class CMsgRemoteClientBroadcastHeader : pb::IMessage<CMsgRemoteClientBroadcastHeader> {
  private static readonly pb::MessageParser<CMsgRemoteClientBroadcastHeader> _parser = new pb::MessageParser<CMsgRemoteClientBroadcastHeader>(() => new CMsgRemoteClientBroadcastHeader());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientBroadcastHeader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientDiscoveryReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientBroadcastHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientBroadcastHeader(CMsgRemoteClientBroadcastHeader other) : this() {
    clientId_ = other.clientId_;
    msgType_ = other.msgType_;
    instanceId_ = other.instanceId_;
    deviceId_ = other.deviceId_;
    deviceToken_ = other.deviceToken_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientBroadcastHeader Clone() {
    return new CMsgRemoteClientBroadcastHeader(this);
  }

  /// <summary>Field number for the "client_id" field.</summary>
  public const int ClientIdFieldNumber = 1;
  /// <summary>Default value for the "client_id" field</summary>
  public const ulong ClientIdDefaultValue = 0UL;

  private ulong? clientId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong ClientId {
    get { return clientId_ ?? ClientIdDefaultValue; }
    set {
      clientId_ = value;
    }
  }
  /// <summary>Gets whether the "client_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientId {
    get { return clientId_ != null; }
  }
  /// <summary>Clears the value of the "client_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientId() {
    clientId_ = null;
  }

  /// <summary>Field number for the "msg_type" field.</summary>
  public const int MsgTypeFieldNumber = 2;
  /// <summary>Default value for the "msg_type" field</summary>
  public const global::ERemoteClientBroadcastMsg MsgTypeDefaultValue = global::ERemoteClientBroadcastMsg.KEremoteClientBroadcastMsgDiscovery;

  private global::ERemoteClientBroadcastMsg? msgType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ERemoteClientBroadcastMsg MsgType {
    get { return msgType_ ?? MsgTypeDefaultValue; }
    set {
      msgType_ = value;
    }
  }
  /// <summary>Gets whether the "msg_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMsgType {
    get { return msgType_ != null; }
  }
  /// <summary>Clears the value of the "msg_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMsgType() {
    msgType_ = null;
  }

  /// <summary>Field number for the "instance_id" field.</summary>
  public const int InstanceIdFieldNumber = 3;
  /// <summary>Default value for the "instance_id" field</summary>
  public const ulong InstanceIdDefaultValue = 0UL;

  private ulong? instanceId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong InstanceId {
    get { return instanceId_ ?? InstanceIdDefaultValue; }
    set {
      instanceId_ = value;
    }
  }
  /// <summary>Gets whether the "instance_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInstanceId {
    get { return instanceId_ != null; }
  }
  /// <summary>Clears the value of the "instance_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInstanceId() {
    instanceId_ = null;
  }

  /// <summary>Field number for the "device_id" field.</summary>
  public const int DeviceIdFieldNumber = 4;
  /// <summary>Default value for the "device_id" field</summary>
  public const ulong DeviceIdDefaultValue = 0UL;

  private ulong? deviceId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong DeviceId {
    get { return deviceId_ ?? DeviceIdDefaultValue; }
    set {
      deviceId_ = value;
    }
  }
  /// <summary>Gets whether the "device_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeviceId {
    get { return deviceId_ != null; }
  }
  /// <summary>Clears the value of the "device_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeviceId() {
    deviceId_ = null;
  }

  /// <summary>Field number for the "device_token" field.</summary>
  public const int DeviceTokenFieldNumber = 5;
  /// <summary>Default value for the "device_token" field</summary>
  public readonly static pb::ByteString DeviceTokenDefaultValue = pb::ByteString.Empty;

  private pb::ByteString deviceToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString DeviceToken {
    get { return deviceToken_ ?? DeviceTokenDefaultValue; }
    set {
      deviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "device_token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeviceToken {
    get { return deviceToken_ != null; }
  }
  /// <summary>Clears the value of the "device_token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeviceToken() {
    deviceToken_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientBroadcastHeader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientBroadcastHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientId != other.ClientId) return false;
    if (MsgType != other.MsgType) return false;
    if (InstanceId != other.InstanceId) return false;
    if (DeviceId != other.DeviceId) return false;
    if (DeviceToken != other.DeviceToken) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClientId) hash ^= ClientId.GetHashCode();
    if (HasMsgType) hash ^= MsgType.GetHashCode();
    if (HasInstanceId) hash ^= InstanceId.GetHashCode();
    if (HasDeviceId) hash ^= DeviceId.GetHashCode();
    if (HasDeviceToken) hash ^= DeviceToken.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasClientId) {
      output.WriteRawTag(8);
      output.WriteUInt64(ClientId);
    }
    if (HasMsgType) {
      output.WriteRawTag(16);
      output.WriteEnum((int) MsgType);
    }
    if (HasInstanceId) {
      output.WriteRawTag(24);
      output.WriteUInt64(InstanceId);
    }
    if (HasDeviceId) {
      output.WriteRawTag(32);
      output.WriteUInt64(DeviceId);
    }
    if (HasDeviceToken) {
      output.WriteRawTag(42);
      output.WriteBytes(DeviceToken);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasClientId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientId);
    }
    if (HasMsgType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
    }
    if (HasInstanceId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InstanceId);
    }
    if (HasDeviceId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeviceId);
    }
    if (HasDeviceToken) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeviceToken);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientBroadcastHeader other) {
    if (other == null) {
      return;
    }
    if (other.HasClientId) {
      ClientId = other.ClientId;
    }
    if (other.HasMsgType) {
      MsgType = other.MsgType;
    }
    if (other.HasInstanceId) {
      InstanceId = other.InstanceId;
    }
    if (other.HasDeviceId) {
      DeviceId = other.DeviceId;
    }
    if (other.HasDeviceToken) {
      DeviceToken = other.DeviceToken;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientId = input.ReadUInt64();
          break;
        }
        case 16: {
          msgType_ = (global::ERemoteClientBroadcastMsg) input.ReadEnum();
          break;
        }
        case 24: {
          InstanceId = input.ReadUInt64();
          break;
        }
        case 32: {
          DeviceId = input.ReadUInt64();
          break;
        }
        case 42: {
          DeviceToken = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgRemoteClientBroadcastStatus : pb::IMessage<CMsgRemoteClientBroadcastStatus> {
  private static readonly pb::MessageParser<CMsgRemoteClientBroadcastStatus> _parser = new pb::MessageParser<CMsgRemoteClientBroadcastStatus>(() => new CMsgRemoteClientBroadcastStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientBroadcastStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientDiscoveryReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientBroadcastStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientBroadcastStatus(CMsgRemoteClientBroadcastStatus other) : this() {
    version_ = other.version_;
    minVersion_ = other.minVersion_;
    connectPort_ = other.connectPort_;
    hostname_ = other.hostname_;
    enabledServices_ = other.enabledServices_;
    ostype_ = other.ostype_;
    is64Bit_ = other.is64Bit_;
    users_ = other.users_.Clone();
    euniverse_ = other.euniverse_;
    timestamp_ = other.timestamp_;
    screenLocked_ = other.screenLocked_;
    gamesRunning_ = other.gamesRunning_;
    macAddresses_ = other.macAddresses_.Clone();
    downloadLanPeerGroup_ = other.downloadLanPeerGroup_;
    broadcastingActive_ = other.broadcastingActive_;
    vrActive_ = other.vrActive_;
    contentCachePort_ = other.contentCachePort_;
    ipAddresses_ = other.ipAddresses_.Clone();
    publicIpAddress_ = other.publicIpAddress_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientBroadcastStatus Clone() {
    return new CMsgRemoteClientBroadcastStatus(this);
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 1;
  /// <summary>Default value for the "version" field</summary>
  public const int VersionDefaultValue = 0;

  private int? version_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Version {
    get { return version_ ?? VersionDefaultValue; }
    set {
      version_ = value;
    }
  }
  /// <summary>Gets whether the "version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVersion {
    get { return version_ != null; }
  }
  /// <summary>Clears the value of the "version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVersion() {
    version_ = null;
  }

  /// <summary>Field number for the "min_version" field.</summary>
  public const int MinVersionFieldNumber = 2;
  /// <summary>Default value for the "min_version" field</summary>
  public const int MinVersionDefaultValue = 0;

  private int? minVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MinVersion {
    get { return minVersion_ ?? MinVersionDefaultValue; }
    set {
      minVersion_ = value;
    }
  }
  /// <summary>Gets whether the "min_version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMinVersion {
    get { return minVersion_ != null; }
  }
  /// <summary>Clears the value of the "min_version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMinVersion() {
    minVersion_ = null;
  }

  /// <summary>Field number for the "connect_port" field.</summary>
  public const int ConnectPortFieldNumber = 3;
  /// <summary>Default value for the "connect_port" field</summary>
  public const uint ConnectPortDefaultValue = 0;

  private uint? connectPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ConnectPort {
    get { return connectPort_ ?? ConnectPortDefaultValue; }
    set {
      connectPort_ = value;
    }
  }
  /// <summary>Gets whether the "connect_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasConnectPort {
    get { return connectPort_ != null; }
  }
  /// <summary>Clears the value of the "connect_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearConnectPort() {
    connectPort_ = null;
  }

  /// <summary>Field number for the "hostname" field.</summary>
  public const int HostnameFieldNumber = 4;
  /// <summary>Default value for the "hostname" field</summary>
  public const string HostnameDefaultValue = "";

  private string hostname_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Hostname {
    get { return hostname_ ?? HostnameDefaultValue; }
    set {
      hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "hostname" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHostname {
    get { return hostname_ != null; }
  }
  /// <summary>Clears the value of the "hostname" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHostname() {
    hostname_ = null;
  }

  /// <summary>Field number for the "enabled_services" field.</summary>
  public const int EnabledServicesFieldNumber = 6;
  /// <summary>Default value for the "enabled_services" field</summary>
  public const uint EnabledServicesDefaultValue = 0;

  private uint? enabledServices_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EnabledServices {
    get { return enabledServices_ ?? EnabledServicesDefaultValue; }
    set {
      enabledServices_ = value;
    }
  }
  /// <summary>Gets whether the "enabled_services" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnabledServices {
    get { return enabledServices_ != null; }
  }
  /// <summary>Clears the value of the "enabled_services" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnabledServices() {
    enabledServices_ = null;
  }

  /// <summary>Field number for the "ostype" field.</summary>
  public const int OstypeFieldNumber = 7;
  /// <summary>Default value for the "ostype" field</summary>
  public const int OstypeDefaultValue = 0;

  private int? ostype_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Ostype {
    get { return ostype_ ?? OstypeDefaultValue; }
    set {
      ostype_ = value;
    }
  }
  /// <summary>Gets whether the "ostype" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasOstype {
    get { return ostype_ != null; }
  }
  /// <summary>Clears the value of the "ostype" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOstype() {
    ostype_ = null;
  }

  /// <summary>Field number for the "is64bit" field.</summary>
  public const int Is64BitFieldNumber = 8;
  /// <summary>Default value for the "is64bit" field</summary>
  public const bool Is64BitDefaultValue = false;

  private bool? is64Bit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Is64Bit {
    get { return is64Bit_ ?? Is64BitDefaultValue; }
    set {
      is64Bit_ = value;
    }
  }
  /// <summary>Gets whether the "is64bit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIs64Bit {
    get { return is64Bit_ != null; }
  }
  /// <summary>Clears the value of the "is64bit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIs64Bit() {
    is64Bit_ = null;
  }

  /// <summary>Field number for the "users" field.</summary>
  public const int UsersFieldNumber = 9;
  private static readonly pb::FieldCodec<global::CMsgRemoteClientBroadcastStatus.Types.User> _repeated_users_codec
      = pb::FieldCodec.ForMessage(74, global::CMsgRemoteClientBroadcastStatus.Types.User.Parser);
  private readonly pbc::RepeatedField<global::CMsgRemoteClientBroadcastStatus.Types.User> users_ = new pbc::RepeatedField<global::CMsgRemoteClientBroadcastStatus.Types.User>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CMsgRemoteClientBroadcastStatus.Types.User> Users {
    get { return users_; }
  }

  /// <summary>Field number for the "euniverse" field.</summary>
  public const int EuniverseFieldNumber = 11;
  /// <summary>Default value for the "euniverse" field</summary>
  public const int EuniverseDefaultValue = 0;

  private int? euniverse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Euniverse {
    get { return euniverse_ ?? EuniverseDefaultValue; }
    set {
      euniverse_ = value;
    }
  }
  /// <summary>Gets whether the "euniverse" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEuniverse {
    get { return euniverse_ != null; }
  }
  /// <summary>Clears the value of the "euniverse" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEuniverse() {
    euniverse_ = null;
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 12;
  /// <summary>Default value for the "timestamp" field</summary>
  public const uint TimestampDefaultValue = 0;

  private uint? timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Timestamp {
    get { return timestamp_ ?? TimestampDefaultValue; }
    set {
      timestamp_ = value;
    }
  }
  /// <summary>Gets whether the "timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTimestamp {
    get { return timestamp_ != null; }
  }
  /// <summary>Clears the value of the "timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTimestamp() {
    timestamp_ = null;
  }

  /// <summary>Field number for the "screen_locked" field.</summary>
  public const int ScreenLockedFieldNumber = 13;
  /// <summary>Default value for the "screen_locked" field</summary>
  public const bool ScreenLockedDefaultValue = false;

  private bool? screenLocked_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ScreenLocked {
    get { return screenLocked_ ?? ScreenLockedDefaultValue; }
    set {
      screenLocked_ = value;
    }
  }
  /// <summary>Gets whether the "screen_locked" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasScreenLocked {
    get { return screenLocked_ != null; }
  }
  /// <summary>Clears the value of the "screen_locked" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearScreenLocked() {
    screenLocked_ = null;
  }

  /// <summary>Field number for the "games_running" field.</summary>
  public const int GamesRunningFieldNumber = 14;
  /// <summary>Default value for the "games_running" field</summary>
  public const bool GamesRunningDefaultValue = false;

  private bool? gamesRunning_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool GamesRunning {
    get { return gamesRunning_ ?? GamesRunningDefaultValue; }
    set {
      gamesRunning_ = value;
    }
  }
  /// <summary>Gets whether the "games_running" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGamesRunning {
    get { return gamesRunning_ != null; }
  }
  /// <summary>Clears the value of the "games_running" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGamesRunning() {
    gamesRunning_ = null;
  }

  /// <summary>Field number for the "mac_addresses" field.</summary>
  public const int MacAddressesFieldNumber = 15;
  private static readonly pb::FieldCodec<string> _repeated_macAddresses_codec
      = pb::FieldCodec.ForString(122);
  private readonly pbc::RepeatedField<string> macAddresses_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> MacAddresses {
    get { return macAddresses_; }
  }

  /// <summary>Field number for the "download_lan_peer_group" field.</summary>
  public const int DownloadLanPeerGroupFieldNumber = 16;
  /// <summary>Default value for the "download_lan_peer_group" field</summary>
  public const uint DownloadLanPeerGroupDefaultValue = 0;

  private uint? downloadLanPeerGroup_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DownloadLanPeerGroup {
    get { return downloadLanPeerGroup_ ?? DownloadLanPeerGroupDefaultValue; }
    set {
      downloadLanPeerGroup_ = value;
    }
  }
  /// <summary>Gets whether the "download_lan_peer_group" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDownloadLanPeerGroup {
    get { return downloadLanPeerGroup_ != null; }
  }
  /// <summary>Clears the value of the "download_lan_peer_group" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDownloadLanPeerGroup() {
    downloadLanPeerGroup_ = null;
  }

  /// <summary>Field number for the "broadcasting_active" field.</summary>
  public const int BroadcastingActiveFieldNumber = 17;
  /// <summary>Default value for the "broadcasting_active" field</summary>
  public const bool BroadcastingActiveDefaultValue = false;

  private bool? broadcastingActive_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool BroadcastingActive {
    get { return broadcastingActive_ ?? BroadcastingActiveDefaultValue; }
    set {
      broadcastingActive_ = value;
    }
  }
  /// <summary>Gets whether the "broadcasting_active" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBroadcastingActive {
    get { return broadcastingActive_ != null; }
  }
  /// <summary>Clears the value of the "broadcasting_active" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBroadcastingActive() {
    broadcastingActive_ = null;
  }

  /// <summary>Field number for the "vr_active" field.</summary>
  public const int VrActiveFieldNumber = 18;
  /// <summary>Default value for the "vr_active" field</summary>
  public const bool VrActiveDefaultValue = false;

  private bool? vrActive_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool VrActive {
    get { return vrActive_ ?? VrActiveDefaultValue; }
    set {
      vrActive_ = value;
    }
  }
  /// <summary>Gets whether the "vr_active" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVrActive {
    get { return vrActive_ != null; }
  }
  /// <summary>Clears the value of the "vr_active" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVrActive() {
    vrActive_ = null;
  }

  /// <summary>Field number for the "content_cache_port" field.</summary>
  public const int ContentCachePortFieldNumber = 19;
  /// <summary>Default value for the "content_cache_port" field</summary>
  public const uint ContentCachePortDefaultValue = 0;

  private uint? contentCachePort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ContentCachePort {
    get { return contentCachePort_ ?? ContentCachePortDefaultValue; }
    set {
      contentCachePort_ = value;
    }
  }
  /// <summary>Gets whether the "content_cache_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContentCachePort {
    get { return contentCachePort_ != null; }
  }
  /// <summary>Clears the value of the "content_cache_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContentCachePort() {
    contentCachePort_ = null;
  }

  /// <summary>Field number for the "ip_addresses" field.</summary>
  public const int IpAddressesFieldNumber = 20;
  private static readonly pb::FieldCodec<string> _repeated_ipAddresses_codec
      = pb::FieldCodec.ForString(162);
  private readonly pbc::RepeatedField<string> ipAddresses_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> IpAddresses {
    get { return ipAddresses_; }
  }

  /// <summary>Field number for the "public_ip_address" field.</summary>
  public const int PublicIpAddressFieldNumber = 21;
  /// <summary>Default value for the "public_ip_address" field</summary>
  public const string PublicIpAddressDefaultValue = "";

  private string publicIpAddress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PublicIpAddress {
    get { return publicIpAddress_ ?? PublicIpAddressDefaultValue; }
    set {
      publicIpAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "public_ip_address" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublicIpAddress {
    get { return publicIpAddress_ != null; }
  }
  /// <summary>Clears the value of the "public_ip_address" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublicIpAddress() {
    publicIpAddress_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientBroadcastStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientBroadcastStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Version != other.Version) return false;
    if (MinVersion != other.MinVersion) return false;
    if (ConnectPort != other.ConnectPort) return false;
    if (Hostname != other.Hostname) return false;
    if (EnabledServices != other.EnabledServices) return false;
    if (Ostype != other.Ostype) return false;
    if (Is64Bit != other.Is64Bit) return false;
    if(!users_.Equals(other.users_)) return false;
    if (Euniverse != other.Euniverse) return false;
    if (Timestamp != other.Timestamp) return false;
    if (ScreenLocked != other.ScreenLocked) return false;
    if (GamesRunning != other.GamesRunning) return false;
    if(!macAddresses_.Equals(other.macAddresses_)) return false;
    if (DownloadLanPeerGroup != other.DownloadLanPeerGroup) return false;
    if (BroadcastingActive != other.BroadcastingActive) return false;
    if (VrActive != other.VrActive) return false;
    if (ContentCachePort != other.ContentCachePort) return false;
    if(!ipAddresses_.Equals(other.ipAddresses_)) return false;
    if (PublicIpAddress != other.PublicIpAddress) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasVersion) hash ^= Version.GetHashCode();
    if (HasMinVersion) hash ^= MinVersion.GetHashCode();
    if (HasConnectPort) hash ^= ConnectPort.GetHashCode();
    if (HasHostname) hash ^= Hostname.GetHashCode();
    if (HasEnabledServices) hash ^= EnabledServices.GetHashCode();
    if (HasOstype) hash ^= Ostype.GetHashCode();
    if (HasIs64Bit) hash ^= Is64Bit.GetHashCode();
    hash ^= users_.GetHashCode();
    if (HasEuniverse) hash ^= Euniverse.GetHashCode();
    if (HasTimestamp) hash ^= Timestamp.GetHashCode();
    if (HasScreenLocked) hash ^= ScreenLocked.GetHashCode();
    if (HasGamesRunning) hash ^= GamesRunning.GetHashCode();
    hash ^= macAddresses_.GetHashCode();
    if (HasDownloadLanPeerGroup) hash ^= DownloadLanPeerGroup.GetHashCode();
    if (HasBroadcastingActive) hash ^= BroadcastingActive.GetHashCode();
    if (HasVrActive) hash ^= VrActive.GetHashCode();
    if (HasContentCachePort) hash ^= ContentCachePort.GetHashCode();
    hash ^= ipAddresses_.GetHashCode();
    if (HasPublicIpAddress) hash ^= PublicIpAddress.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasVersion) {
      output.WriteRawTag(8);
      output.WriteInt32(Version);
    }
    if (HasMinVersion) {
      output.WriteRawTag(16);
      output.WriteInt32(MinVersion);
    }
    if (HasConnectPort) {
      output.WriteRawTag(24);
      output.WriteUInt32(ConnectPort);
    }
    if (HasHostname) {
      output.WriteRawTag(34);
      output.WriteString(Hostname);
    }
    if (HasEnabledServices) {
      output.WriteRawTag(48);
      output.WriteUInt32(EnabledServices);
    }
    if (HasOstype) {
      output.WriteRawTag(56);
      output.WriteInt32(Ostype);
    }
    if (HasIs64Bit) {
      output.WriteRawTag(64);
      output.WriteBool(Is64Bit);
    }
    users_.WriteTo(output, _repeated_users_codec);
    if (HasEuniverse) {
      output.WriteRawTag(88);
      output.WriteInt32(Euniverse);
    }
    if (HasTimestamp) {
      output.WriteRawTag(96);
      output.WriteUInt32(Timestamp);
    }
    if (HasScreenLocked) {
      output.WriteRawTag(104);
      output.WriteBool(ScreenLocked);
    }
    if (HasGamesRunning) {
      output.WriteRawTag(112);
      output.WriteBool(GamesRunning);
    }
    macAddresses_.WriteTo(output, _repeated_macAddresses_codec);
    if (HasDownloadLanPeerGroup) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(DownloadLanPeerGroup);
    }
    if (HasBroadcastingActive) {
      output.WriteRawTag(136, 1);
      output.WriteBool(BroadcastingActive);
    }
    if (HasVrActive) {
      output.WriteRawTag(144, 1);
      output.WriteBool(VrActive);
    }
    if (HasContentCachePort) {
      output.WriteRawTag(152, 1);
      output.WriteUInt32(ContentCachePort);
    }
    ipAddresses_.WriteTo(output, _repeated_ipAddresses_codec);
    if (HasPublicIpAddress) {
      output.WriteRawTag(170, 1);
      output.WriteString(PublicIpAddress);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasVersion) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
    }
    if (HasMinVersion) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinVersion);
    }
    if (HasConnectPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConnectPort);
    }
    if (HasHostname) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostname);
    }
    if (HasEnabledServices) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnabledServices);
    }
    if (HasOstype) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ostype);
    }
    if (HasIs64Bit) {
      size += 1 + 1;
    }
    size += users_.CalculateSize(_repeated_users_codec);
    if (HasEuniverse) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Euniverse);
    }
    if (HasTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
    }
    if (HasScreenLocked) {
      size += 1 + 1;
    }
    if (HasGamesRunning) {
      size += 1 + 1;
    }
    size += macAddresses_.CalculateSize(_repeated_macAddresses_codec);
    if (HasDownloadLanPeerGroup) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DownloadLanPeerGroup);
    }
    if (HasBroadcastingActive) {
      size += 2 + 1;
    }
    if (HasVrActive) {
      size += 2 + 1;
    }
    if (HasContentCachePort) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ContentCachePort);
    }
    size += ipAddresses_.CalculateSize(_repeated_ipAddresses_codec);
    if (HasPublicIpAddress) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(PublicIpAddress);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientBroadcastStatus other) {
    if (other == null) {
      return;
    }
    if (other.HasVersion) {
      Version = other.Version;
    }
    if (other.HasMinVersion) {
      MinVersion = other.MinVersion;
    }
    if (other.HasConnectPort) {
      ConnectPort = other.ConnectPort;
    }
    if (other.HasHostname) {
      Hostname = other.Hostname;
    }
    if (other.HasEnabledServices) {
      EnabledServices = other.EnabledServices;
    }
    if (other.HasOstype) {
      Ostype = other.Ostype;
    }
    if (other.HasIs64Bit) {
      Is64Bit = other.Is64Bit;
    }
    users_.Add(other.users_);
    if (other.HasEuniverse) {
      Euniverse = other.Euniverse;
    }
    if (other.HasTimestamp) {
      Timestamp = other.Timestamp;
    }
    if (other.HasScreenLocked) {
      ScreenLocked = other.ScreenLocked;
    }
    if (other.HasGamesRunning) {
      GamesRunning = other.GamesRunning;
    }
    macAddresses_.Add(other.macAddresses_);
    if (other.HasDownloadLanPeerGroup) {
      DownloadLanPeerGroup = other.DownloadLanPeerGroup;
    }
    if (other.HasBroadcastingActive) {
      BroadcastingActive = other.BroadcastingActive;
    }
    if (other.HasVrActive) {
      VrActive = other.VrActive;
    }
    if (other.HasContentCachePort) {
      ContentCachePort = other.ContentCachePort;
    }
    ipAddresses_.Add(other.ipAddresses_);
    if (other.HasPublicIpAddress) {
      PublicIpAddress = other.PublicIpAddress;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Version = input.ReadInt32();
          break;
        }
        case 16: {
          MinVersion = input.ReadInt32();
          break;
        }
        case 24: {
          ConnectPort = input.ReadUInt32();
          break;
        }
        case 34: {
          Hostname = input.ReadString();
          break;
        }
        case 48: {
          EnabledServices = input.ReadUInt32();
          break;
        }
        case 56: {
          Ostype = input.ReadInt32();
          break;
        }
        case 64: {
          Is64Bit = input.ReadBool();
          break;
        }
        case 74: {
          users_.AddEntriesFrom(input, _repeated_users_codec);
          break;
        }
        case 88: {
          Euniverse = input.ReadInt32();
          break;
        }
        case 96: {
          Timestamp = input.ReadUInt32();
          break;
        }
        case 104: {
          ScreenLocked = input.ReadBool();
          break;
        }
        case 112: {
          GamesRunning = input.ReadBool();
          break;
        }
        case 122: {
          macAddresses_.AddEntriesFrom(input, _repeated_macAddresses_codec);
          break;
        }
        case 128: {
          DownloadLanPeerGroup = input.ReadUInt32();
          break;
        }
        case 136: {
          BroadcastingActive = input.ReadBool();
          break;
        }
        case 144: {
          VrActive = input.ReadBool();
          break;
        }
        case 152: {
          ContentCachePort = input.ReadUInt32();
          break;
        }
        case 162: {
          ipAddresses_.AddEntriesFrom(input, _repeated_ipAddresses_codec);
          break;
        }
        case 170: {
          PublicIpAddress = input.ReadString();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!users_.IsInitialized()) return false;
    return true;
  }
  #region Nested types
  /// <summary>Container for nested types declared in the CMsgRemoteClientBroadcastStatus message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class User : pb::IMessage<User> {
      private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<User> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgRemoteClientBroadcastStatus.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public User() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public User(User other) : this() {
        steamid_ = other.steamid_;
        authKeyId_ = other.authKeyId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public User Clone() {
        return new User(this);
      }

      /// <summary>Field number for the "steamid" field.</summary>
      public const int SteamidFieldNumber = 1;
      /// <summary>Default value for the "steamid" field</summary>
      public const ulong SteamidDefaultValue = 0UL;

      private ulong? steamid_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ulong Steamid {
        get { return steamid_ ?? SteamidDefaultValue; }
        set {
          steamid_ = value;
        }
      }
      /// <summary>Gets whether the "steamid" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasSteamid {
        get { return steamid_ != null; }
      }
      /// <summary>Clears the value of the "steamid" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearSteamid() {
        steamid_ = null;
      }

      /// <summary>Field number for the "auth_key_id" field.</summary>
      public const int AuthKeyIdFieldNumber = 2;
      /// <summary>Default value for the "auth_key_id" field</summary>
      public const uint AuthKeyIdDefaultValue = 0;

      private uint? authKeyId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint AuthKeyId {
        get { return authKeyId_ ?? AuthKeyIdDefaultValue; }
        set {
          authKeyId_ = value;
        }
      }
      /// <summary>Gets whether the "auth_key_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAuthKeyId {
        get { return authKeyId_ != null; }
      }
      /// <summary>Clears the value of the "auth_key_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAuthKeyId() {
        authKeyId_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as User);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(User other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Steamid != other.Steamid) return false;
        if (AuthKeyId != other.AuthKeyId) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasSteamid) hash ^= Steamid.GetHashCode();
        if (HasAuthKeyId) hash ^= AuthKeyId.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        pb::ProtoPreconditions.CheckInitialized(this);
        if (HasSteamid) {
          output.WriteRawTag(9);
          output.WriteFixed64(Steamid);
        }
        if (HasAuthKeyId) {
          output.WriteRawTag(16);
          output.WriteUInt32(AuthKeyId);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasSteamid) {
          size += 1 + 8;
        }
        if (HasAuthKeyId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AuthKeyId);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(User other) {
        if (other == null) {
          return;
        }
        if (other.HasSteamid) {
          Steamid = other.Steamid;
        }
        if (other.HasAuthKeyId) {
          AuthKeyId = other.AuthKeyId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 9: {
              Steamid = input.ReadFixed64();
              break;
            }
            case 16: {
              AuthKeyId = input.ReadUInt32();
              break;
            }
          }
        }
        pb::ProtoPreconditions.CheckMergedRequiredFields(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsInitialized() {
        return true;
      }
    }

  }
  #endregion

}

public sealed partial class CMsgRemoteClientBroadcastDiscovery : pb::IMessage<CMsgRemoteClientBroadcastDiscovery> {
  private static readonly pb::MessageParser<CMsgRemoteClientBroadcastDiscovery> _parser = new pb::MessageParser<CMsgRemoteClientBroadcastDiscovery>(() => new CMsgRemoteClientBroadcastDiscovery());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientBroadcastDiscovery> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientDiscoveryReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientBroadcastDiscovery() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientBroadcastDiscovery(CMsgRemoteClientBroadcastDiscovery other) : this() {
    seqNum_ = other.seqNum_;
    clientIds_ = other.clientIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientBroadcastDiscovery Clone() {
    return new CMsgRemoteClientBroadcastDiscovery(this);
  }

  /// <summary>Field number for the "seq_num" field.</summary>
  public const int SeqNumFieldNumber = 1;
  /// <summary>Default value for the "seq_num" field</summary>
  public const uint SeqNumDefaultValue = 0;

  private uint? seqNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SeqNum {
    get { return seqNum_ ?? SeqNumDefaultValue; }
    set {
      seqNum_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSeqNum {
    get { return seqNum_ != null; }
  }
  /// <summary>Clears the value of the "seq_num" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSeqNum() {
    seqNum_ = null;
  }

  /// <summary>Field number for the "client_ids" field.</summary>
  public const int ClientIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<ulong> _repeated_clientIds_codec
      = pb::FieldCodec.ForUInt64(16);
  private readonly pbc::RepeatedField<ulong> clientIds_ = new pbc::RepeatedField<ulong>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<ulong> ClientIds {
    get { return clientIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientBroadcastDiscovery);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientBroadcastDiscovery other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeqNum != other.SeqNum) return false;
    if(!clientIds_.Equals(other.clientIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSeqNum) hash ^= SeqNum.GetHashCode();
    hash ^= clientIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasSeqNum) {
      output.WriteRawTag(8);
      output.WriteUInt32(SeqNum);
    }
    clientIds_.WriteTo(output, _repeated_clientIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasSeqNum) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNum);
    }
    size += clientIds_.CalculateSize(_repeated_clientIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientBroadcastDiscovery other) {
    if (other == null) {
      return;
    }
    if (other.HasSeqNum) {
      SeqNum = other.SeqNum;
    }
    clientIds_.Add(other.clientIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SeqNum = input.ReadUInt32();
          break;
        }
        case 18:
        case 16: {
          clientIds_.AddEntriesFrom(input, _repeated_clientIds_codec);
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgRemoteClientBroadcastClientIDDeconflict : pb::IMessage<CMsgRemoteClientBroadcastClientIDDeconflict> {
  private static readonly pb::MessageParser<CMsgRemoteClientBroadcastClientIDDeconflict> _parser = new pb::MessageParser<CMsgRemoteClientBroadcastClientIDDeconflict>(() => new CMsgRemoteClientBroadcastClientIDDeconflict());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteClientBroadcastClientIDDeconflict> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientDiscoveryReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientBroadcastClientIDDeconflict() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientBroadcastClientIDDeconflict(CMsgRemoteClientBroadcastClientIDDeconflict other) : this() {
    clientIds_ = other.clientIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteClientBroadcastClientIDDeconflict Clone() {
    return new CMsgRemoteClientBroadcastClientIDDeconflict(this);
  }

  /// <summary>Field number for the "client_ids" field.</summary>
  public const int ClientIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<ulong> _repeated_clientIds_codec
      = pb::FieldCodec.ForUInt64(16);
  private readonly pbc::RepeatedField<ulong> clientIds_ = new pbc::RepeatedField<ulong>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<ulong> ClientIds {
    get { return clientIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteClientBroadcastClientIDDeconflict);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteClientBroadcastClientIDDeconflict other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!clientIds_.Equals(other.clientIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= clientIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    clientIds_.WriteTo(output, _repeated_clientIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += clientIds_.CalculateSize(_repeated_clientIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteClientBroadcastClientIDDeconflict other) {
    if (other == null) {
      return;
    }
    clientIds_.Add(other.clientIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 18:
        case 16: {
          clientIds_.AddEntriesFrom(input, _repeated_clientIds_codec);
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgRemoteDeviceAuthorizationRequest : pb::IMessage<CMsgRemoteDeviceAuthorizationRequest> {
  private static readonly pb::MessageParser<CMsgRemoteDeviceAuthorizationRequest> _parser = new pb::MessageParser<CMsgRemoteDeviceAuthorizationRequest>(() => new CMsgRemoteDeviceAuthorizationRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteDeviceAuthorizationRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientDiscoveryReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceAuthorizationRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceAuthorizationRequest(CMsgRemoteDeviceAuthorizationRequest other) : this() {
    deviceToken_ = other.deviceToken_;
    deviceName_ = other.deviceName_;
    encryptedRequest_ = other.encryptedRequest_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceAuthorizationRequest Clone() {
    return new CMsgRemoteDeviceAuthorizationRequest(this);
  }

  /// <summary>Field number for the "device_token" field.</summary>
  public const int DeviceTokenFieldNumber = 1;
  /// <summary>Default value for the "device_token" field</summary>
  public readonly static pb::ByteString DeviceTokenDefaultValue = pb::ByteString.Empty;

  private pb::ByteString deviceToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString DeviceToken {
    get { return deviceToken_ ?? DeviceTokenDefaultValue; }
    set {
      deviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "device_token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeviceToken {
    get { return deviceToken_ != null; }
  }
  /// <summary>Clears the value of the "device_token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeviceToken() {
    deviceToken_ = null;
  }

  /// <summary>Field number for the "device_name" field.</summary>
  public const int DeviceNameFieldNumber = 2;
  /// <summary>Default value for the "device_name" field</summary>
  public const string DeviceNameDefaultValue = "";

  private string deviceName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceName {
    get { return deviceName_ ?? DeviceNameDefaultValue; }
    set {
      deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "device_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeviceName {
    get { return deviceName_ != null; }
  }
  /// <summary>Clears the value of the "device_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeviceName() {
    deviceName_ = null;
  }

  /// <summary>Field number for the "encrypted_request" field.</summary>
  public const int EncryptedRequestFieldNumber = 3;
  /// <summary>Default value for the "encrypted_request" field</summary>
  public readonly static pb::ByteString EncryptedRequestDefaultValue = pb::ByteString.Empty;

  private pb::ByteString encryptedRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString EncryptedRequest {
    get { return encryptedRequest_ ?? EncryptedRequestDefaultValue; }
    set {
      encryptedRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "encrypted_request" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEncryptedRequest {
    get { return encryptedRequest_ != null; }
  }
  /// <summary>Clears the value of the "encrypted_request" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEncryptedRequest() {
    encryptedRequest_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteDeviceAuthorizationRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteDeviceAuthorizationRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceToken != other.DeviceToken) return false;
    if (DeviceName != other.DeviceName) return false;
    if (EncryptedRequest != other.EncryptedRequest) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDeviceToken) hash ^= DeviceToken.GetHashCode();
    if (HasDeviceName) hash ^= DeviceName.GetHashCode();
    if (HasEncryptedRequest) hash ^= EncryptedRequest.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasDeviceToken) {
      output.WriteRawTag(10);
      output.WriteBytes(DeviceToken);
    }
    if (HasDeviceName) {
      output.WriteRawTag(18);
      output.WriteString(DeviceName);
    }
    if (HasEncryptedRequest) {
      output.WriteRawTag(26);
      output.WriteBytes(EncryptedRequest);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDeviceToken) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeviceToken);
    }
    if (HasDeviceName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
    }
    if (HasEncryptedRequest) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedRequest);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteDeviceAuthorizationRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasDeviceToken) {
      DeviceToken = other.DeviceToken;
    }
    if (other.HasDeviceName) {
      DeviceName = other.DeviceName;
    }
    if (other.HasEncryptedRequest) {
      EncryptedRequest = other.EncryptedRequest;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceToken = input.ReadBytes();
          break;
        }
        case 18: {
          DeviceName = input.ReadString();
          break;
        }
        case 26: {
          EncryptedRequest = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasDeviceToken) {
      return false;
    }
    if (!HasEncryptedRequest) {
      return false;
    }
    return true;
  }
  #region Nested types
  /// <summary>Container for nested types declared in the CMsgRemoteDeviceAuthorizationRequest message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum EKeyEscrowUsage {
      [pbr::OriginalName("k_EKeyEscrowUsageStreamingDevice")] KEkeyEscrowUsageStreamingDevice = 0,
    }

    public sealed partial class CKeyEscrow_Ticket : pb::IMessage<CKeyEscrow_Ticket> {
      private static readonly pb::MessageParser<CKeyEscrow_Ticket> _parser = new pb::MessageParser<CKeyEscrow_Ticket>(() => new CKeyEscrow_Ticket());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<CKeyEscrow_Ticket> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgRemoteDeviceAuthorizationRequest.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public CKeyEscrow_Ticket() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public CKeyEscrow_Ticket(CKeyEscrow_Ticket other) : this() {
        password_ = other.password_;
        identifier_ = other.identifier_;
        payload_ = other.payload_;
        timestamp_ = other.timestamp_;
        usage_ = other.usage_;
        deviceName_ = other.deviceName_;
        deviceModel_ = other.deviceModel_;
        deviceSerial_ = other.deviceSerial_;
        deviceProvisioningId_ = other.deviceProvisioningId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public CKeyEscrow_Ticket Clone() {
        return new CKeyEscrow_Ticket(this);
      }

      /// <summary>Field number for the "password" field.</summary>
      public const int PasswordFieldNumber = 1;
      /// <summary>Default value for the "password" field</summary>
      public readonly static pb::ByteString PasswordDefaultValue = pb::ByteString.Empty;

      private pb::ByteString password_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString Password {
        get { return password_ ?? PasswordDefaultValue; }
        set {
          password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "password" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasPassword {
        get { return password_ != null; }
      }
      /// <summary>Clears the value of the "password" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearPassword() {
        password_ = null;
      }

      /// <summary>Field number for the "identifier" field.</summary>
      public const int IdentifierFieldNumber = 2;
      /// <summary>Default value for the "identifier" field</summary>
      public const ulong IdentifierDefaultValue = 0UL;

      private ulong? identifier_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ulong Identifier {
        get { return identifier_ ?? IdentifierDefaultValue; }
        set {
          identifier_ = value;
        }
      }
      /// <summary>Gets whether the "identifier" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasIdentifier {
        get { return identifier_ != null; }
      }
      /// <summary>Clears the value of the "identifier" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearIdentifier() {
        identifier_ = null;
      }

      /// <summary>Field number for the "payload" field.</summary>
      public const int PayloadFieldNumber = 3;
      /// <summary>Default value for the "payload" field</summary>
      public readonly static pb::ByteString PayloadDefaultValue = pb::ByteString.Empty;

      private pb::ByteString payload_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString Payload {
        get { return payload_ ?? PayloadDefaultValue; }
        set {
          payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "payload" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasPayload {
        get { return payload_ != null; }
      }
      /// <summary>Clears the value of the "payload" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearPayload() {
        payload_ = null;
      }

      /// <summary>Field number for the "timestamp" field.</summary>
      public const int TimestampFieldNumber = 4;
      /// <summary>Default value for the "timestamp" field</summary>
      public const uint TimestampDefaultValue = 0;

      private uint? timestamp_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint Timestamp {
        get { return timestamp_ ?? TimestampDefaultValue; }
        set {
          timestamp_ = value;
        }
      }
      /// <summary>Gets whether the "timestamp" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasTimestamp {
        get { return timestamp_ != null; }
      }
      /// <summary>Clears the value of the "timestamp" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearTimestamp() {
        timestamp_ = null;
      }

      /// <summary>Field number for the "usage" field.</summary>
      public const int UsageFieldNumber = 5;
      /// <summary>Default value for the "usage" field</summary>
      public const global::CMsgRemoteDeviceAuthorizationRequest.Types.EKeyEscrowUsage UsageDefaultValue = global::CMsgRemoteDeviceAuthorizationRequest.Types.EKeyEscrowUsage.KEkeyEscrowUsageStreamingDevice;

      private global::CMsgRemoteDeviceAuthorizationRequest.Types.EKeyEscrowUsage? usage_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::CMsgRemoteDeviceAuthorizationRequest.Types.EKeyEscrowUsage Usage {
        get { return usage_ ?? UsageDefaultValue; }
        set {
          usage_ = value;
        }
      }
      /// <summary>Gets whether the "usage" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasUsage {
        get { return usage_ != null; }
      }
      /// <summary>Clears the value of the "usage" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearUsage() {
        usage_ = null;
      }

      /// <summary>Field number for the "device_name" field.</summary>
      public const int DeviceNameFieldNumber = 6;
      /// <summary>Default value for the "device_name" field</summary>
      public const string DeviceNameDefaultValue = "";

      private string deviceName_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string DeviceName {
        get { return deviceName_ ?? DeviceNameDefaultValue; }
        set {
          deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "device_name" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasDeviceName {
        get { return deviceName_ != null; }
      }
      /// <summary>Clears the value of the "device_name" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearDeviceName() {
        deviceName_ = null;
      }

      /// <summary>Field number for the "device_model" field.</summary>
      public const int DeviceModelFieldNumber = 7;
      /// <summary>Default value for the "device_model" field</summary>
      public const string DeviceModelDefaultValue = "";

      private string deviceModel_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string DeviceModel {
        get { return deviceModel_ ?? DeviceModelDefaultValue; }
        set {
          deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "device_model" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasDeviceModel {
        get { return deviceModel_ != null; }
      }
      /// <summary>Clears the value of the "device_model" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearDeviceModel() {
        deviceModel_ = null;
      }

      /// <summary>Field number for the "device_serial" field.</summary>
      public const int DeviceSerialFieldNumber = 8;
      /// <summary>Default value for the "device_serial" field</summary>
      public const string DeviceSerialDefaultValue = "";

      private string deviceSerial_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string DeviceSerial {
        get { return deviceSerial_ ?? DeviceSerialDefaultValue; }
        set {
          deviceSerial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "device_serial" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasDeviceSerial {
        get { return deviceSerial_ != null; }
      }
      /// <summary>Clears the value of the "device_serial" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearDeviceSerial() {
        deviceSerial_ = null;
      }

      /// <summary>Field number for the "device_provisioning_id" field.</summary>
      public const int DeviceProvisioningIdFieldNumber = 9;
      /// <summary>Default value for the "device_provisioning_id" field</summary>
      public const uint DeviceProvisioningIdDefaultValue = 0;

      private uint? deviceProvisioningId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint DeviceProvisioningId {
        get { return deviceProvisioningId_ ?? DeviceProvisioningIdDefaultValue; }
        set {
          deviceProvisioningId_ = value;
        }
      }
      /// <summary>Gets whether the "device_provisioning_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasDeviceProvisioningId {
        get { return deviceProvisioningId_ != null; }
      }
      /// <summary>Clears the value of the "device_provisioning_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearDeviceProvisioningId() {
        deviceProvisioningId_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as CKeyEscrow_Ticket);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(CKeyEscrow_Ticket other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Password != other.Password) return false;
        if (Identifier != other.Identifier) return false;
        if (Payload != other.Payload) return false;
        if (Timestamp != other.Timestamp) return false;
        if (Usage != other.Usage) return false;
        if (DeviceName != other.DeviceName) return false;
        if (DeviceModel != other.DeviceModel) return false;
        if (DeviceSerial != other.DeviceSerial) return false;
        if (DeviceProvisioningId != other.DeviceProvisioningId) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasPassword) hash ^= Password.GetHashCode();
        if (HasIdentifier) hash ^= Identifier.GetHashCode();
        if (HasPayload) hash ^= Payload.GetHashCode();
        if (HasTimestamp) hash ^= Timestamp.GetHashCode();
        if (HasUsage) hash ^= Usage.GetHashCode();
        if (HasDeviceName) hash ^= DeviceName.GetHashCode();
        if (HasDeviceModel) hash ^= DeviceModel.GetHashCode();
        if (HasDeviceSerial) hash ^= DeviceSerial.GetHashCode();
        if (HasDeviceProvisioningId) hash ^= DeviceProvisioningId.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        pb::ProtoPreconditions.CheckInitialized(this);
        if (HasPassword) {
          output.WriteRawTag(10);
          output.WriteBytes(Password);
        }
        if (HasIdentifier) {
          output.WriteRawTag(16);
          output.WriteUInt64(Identifier);
        }
        if (HasPayload) {
          output.WriteRawTag(26);
          output.WriteBytes(Payload);
        }
        if (HasTimestamp) {
          output.WriteRawTag(32);
          output.WriteUInt32(Timestamp);
        }
        if (HasUsage) {
          output.WriteRawTag(40);
          output.WriteEnum((int) Usage);
        }
        if (HasDeviceName) {
          output.WriteRawTag(50);
          output.WriteString(DeviceName);
        }
        if (HasDeviceModel) {
          output.WriteRawTag(58);
          output.WriteString(DeviceModel);
        }
        if (HasDeviceSerial) {
          output.WriteRawTag(66);
          output.WriteString(DeviceSerial);
        }
        if (HasDeviceProvisioningId) {
          output.WriteRawTag(72);
          output.WriteUInt32(DeviceProvisioningId);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasPassword) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
        }
        if (HasIdentifier) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Identifier);
        }
        if (HasPayload) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
        }
        if (HasTimestamp) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
        }
        if (HasUsage) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Usage);
        }
        if (HasDeviceName) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
        }
        if (HasDeviceModel) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
        }
        if (HasDeviceSerial) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceSerial);
        }
        if (HasDeviceProvisioningId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeviceProvisioningId);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(CKeyEscrow_Ticket other) {
        if (other == null) {
          return;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        if (other.HasIdentifier) {
          Identifier = other.Identifier;
        }
        if (other.HasPayload) {
          Payload = other.Payload;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasUsage) {
          Usage = other.Usage;
        }
        if (other.HasDeviceName) {
          DeviceName = other.DeviceName;
        }
        if (other.HasDeviceModel) {
          DeviceModel = other.DeviceModel;
        }
        if (other.HasDeviceSerial) {
          DeviceSerial = other.DeviceSerial;
        }
        if (other.HasDeviceProvisioningId) {
          DeviceProvisioningId = other.DeviceProvisioningId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Password = input.ReadBytes();
              break;
            }
            case 16: {
              Identifier = input.ReadUInt64();
              break;
            }
            case 26: {
              Payload = input.ReadBytes();
              break;
            }
            case 32: {
              Timestamp = input.ReadUInt32();
              break;
            }
            case 40: {
              usage_ = (global::CMsgRemoteDeviceAuthorizationRequest.Types.EKeyEscrowUsage) input.ReadEnum();
              break;
            }
            case 50: {
              DeviceName = input.ReadString();
              break;
            }
            case 58: {
              DeviceModel = input.ReadString();
              break;
            }
            case 66: {
              DeviceSerial = input.ReadString();
              break;
            }
            case 72: {
              DeviceProvisioningId = input.ReadUInt32();
              break;
            }
          }
        }
        pb::ProtoPreconditions.CheckMergedRequiredFields(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsInitialized() {
        return true;
      }
    }

  }
  #endregion

}

public sealed partial class CMsgRemoteDeviceAuthorizationCancelRequest : pb::IMessage<CMsgRemoteDeviceAuthorizationCancelRequest> {
  private static readonly pb::MessageParser<CMsgRemoteDeviceAuthorizationCancelRequest> _parser = new pb::MessageParser<CMsgRemoteDeviceAuthorizationCancelRequest>(() => new CMsgRemoteDeviceAuthorizationCancelRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteDeviceAuthorizationCancelRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientDiscoveryReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceAuthorizationCancelRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceAuthorizationCancelRequest(CMsgRemoteDeviceAuthorizationCancelRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceAuthorizationCancelRequest Clone() {
    return new CMsgRemoteDeviceAuthorizationCancelRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteDeviceAuthorizationCancelRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteDeviceAuthorizationCancelRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteDeviceAuthorizationCancelRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

public sealed partial class CMsgRemoteDeviceAuthorizationResponse : pb::IMessage<CMsgRemoteDeviceAuthorizationResponse> {
  private static readonly pb::MessageParser<CMsgRemoteDeviceAuthorizationResponse> _parser = new pb::MessageParser<CMsgRemoteDeviceAuthorizationResponse>(() => new CMsgRemoteDeviceAuthorizationResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteDeviceAuthorizationResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientDiscoveryReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceAuthorizationResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceAuthorizationResponse(CMsgRemoteDeviceAuthorizationResponse other) : this() {
    result_ = other.result_;
    steamid_ = other.steamid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceAuthorizationResponse Clone() {
    return new CMsgRemoteDeviceAuthorizationResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  /// <summary>Default value for the "result" field</summary>
  public const global::ERemoteDeviceAuthorizationResult ResultDefaultValue = global::ERemoteDeviceAuthorizationResult.KEremoteDeviceAuthorizationSuccess;

  private global::ERemoteDeviceAuthorizationResult? result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ERemoteDeviceAuthorizationResult Result {
    get { return result_ ?? ResultDefaultValue; }
    set {
      result_ = value;
    }
  }
  /// <summary>Gets whether the "result" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResult {
    get { return result_ != null; }
  }
  /// <summary>Clears the value of the "result" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResult() {
    result_ = null;
  }

  /// <summary>Field number for the "steamid" field.</summary>
  public const int SteamidFieldNumber = 2;
  /// <summary>Default value for the "steamid" field</summary>
  public const ulong SteamidDefaultValue = 0UL;

  private ulong? steamid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Steamid {
    get { return steamid_ ?? SteamidDefaultValue; }
    set {
      steamid_ = value;
    }
  }
  /// <summary>Gets whether the "steamid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSteamid {
    get { return steamid_ != null; }
  }
  /// <summary>Clears the value of the "steamid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSteamid() {
    steamid_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteDeviceAuthorizationResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteDeviceAuthorizationResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Steamid != other.Steamid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasResult) hash ^= Result.GetHashCode();
    if (HasSteamid) hash ^= Steamid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasResult) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Result);
    }
    if (HasSteamid) {
      output.WriteRawTag(17);
      output.WriteFixed64(Steamid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasResult) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
    }
    if (HasSteamid) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteDeviceAuthorizationResponse other) {
    if (other == null) {
      return;
    }
    if (other.HasResult) {
      Result = other.Result;
    }
    if (other.HasSteamid) {
      Steamid = other.Steamid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          result_ = (global::ERemoteDeviceAuthorizationResult) input.ReadEnum();
          break;
        }
        case 17: {
          Steamid = input.ReadFixed64();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasResult) {
      return false;
    }
    return true;
  }
}

public sealed partial class CMsgRemoteDeviceStreamingRequest : pb::IMessage<CMsgRemoteDeviceStreamingRequest> {
  private static readonly pb::MessageParser<CMsgRemoteDeviceStreamingRequest> _parser = new pb::MessageParser<CMsgRemoteDeviceStreamingRequest>(() => new CMsgRemoteDeviceStreamingRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteDeviceStreamingRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientDiscoveryReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceStreamingRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceStreamingRequest(CMsgRemoteDeviceStreamingRequest other) : this() {
    requestId_ = other.requestId_;
    maximumResolutionX_ = other.maximumResolutionX_;
    maximumResolutionY_ = other.maximumResolutionY_;
    audioChannelCount_ = other.audioChannelCount_;
    deviceVersion_ = other.deviceVersion_;
    streamDesktop_ = other.streamDesktop_;
    deviceToken_ = other.deviceToken_;
    pin_ = other.pin_;
    enableVideoStreaming_ = other.enableVideoStreaming_;
    enableAudioStreaming_ = other.enableAudioStreaming_;
    enableInputStreaming_ = other.enableInputStreaming_;
    networkTest_ = other.networkTest_;
    clientId_ = other.clientId_;
    supportedTransport_ = other.supportedTransport_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceStreamingRequest Clone() {
    return new CMsgRemoteDeviceStreamingRequest(this);
  }

  /// <summary>Field number for the "request_id" field.</summary>
  public const int RequestIdFieldNumber = 1;
  /// <summary>Default value for the "request_id" field</summary>
  public const uint RequestIdDefaultValue = 0;

  private uint? requestId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequestId {
    get { return requestId_ ?? RequestIdDefaultValue; }
    set {
      requestId_ = value;
    }
  }
  /// <summary>Gets whether the "request_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestId {
    get { return requestId_ != null; }
  }
  /// <summary>Clears the value of the "request_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestId() {
    requestId_ = null;
  }

  /// <summary>Field number for the "maximum_resolution_x" field.</summary>
  public const int MaximumResolutionXFieldNumber = 2;
  /// <summary>Default value for the "maximum_resolution_x" field</summary>
  public const int MaximumResolutionXDefaultValue = 0;

  private int? maximumResolutionX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaximumResolutionX {
    get { return maximumResolutionX_ ?? MaximumResolutionXDefaultValue; }
    set {
      maximumResolutionX_ = value;
    }
  }
  /// <summary>Gets whether the "maximum_resolution_x" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaximumResolutionX {
    get { return maximumResolutionX_ != null; }
  }
  /// <summary>Clears the value of the "maximum_resolution_x" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaximumResolutionX() {
    maximumResolutionX_ = null;
  }

  /// <summary>Field number for the "maximum_resolution_y" field.</summary>
  public const int MaximumResolutionYFieldNumber = 3;
  /// <summary>Default value for the "maximum_resolution_y" field</summary>
  public const int MaximumResolutionYDefaultValue = 0;

  private int? maximumResolutionY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaximumResolutionY {
    get { return maximumResolutionY_ ?? MaximumResolutionYDefaultValue; }
    set {
      maximumResolutionY_ = value;
    }
  }
  /// <summary>Gets whether the "maximum_resolution_y" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaximumResolutionY {
    get { return maximumResolutionY_ != null; }
  }
  /// <summary>Clears the value of the "maximum_resolution_y" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaximumResolutionY() {
    maximumResolutionY_ = null;
  }

  /// <summary>Field number for the "audio_channel_count" field.</summary>
  public const int AudioChannelCountFieldNumber = 4;
  /// <summary>Default value for the "audio_channel_count" field</summary>
  public const int AudioChannelCountDefaultValue = 2;

  private int? audioChannelCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AudioChannelCount {
    get { return audioChannelCount_ ?? AudioChannelCountDefaultValue; }
    set {
      audioChannelCount_ = value;
    }
  }
  /// <summary>Gets whether the "audio_channel_count" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAudioChannelCount {
    get { return audioChannelCount_ != null; }
  }
  /// <summary>Clears the value of the "audio_channel_count" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAudioChannelCount() {
    audioChannelCount_ = null;
  }

  /// <summary>Field number for the "device_version" field.</summary>
  public const int DeviceVersionFieldNumber = 5;
  /// <summary>Default value for the "device_version" field</summary>
  public const string DeviceVersionDefaultValue = "";

  private string deviceVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceVersion {
    get { return deviceVersion_ ?? DeviceVersionDefaultValue; }
    set {
      deviceVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "device_version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeviceVersion {
    get { return deviceVersion_ != null; }
  }
  /// <summary>Clears the value of the "device_version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeviceVersion() {
    deviceVersion_ = null;
  }

  /// <summary>Field number for the "stream_desktop" field.</summary>
  public const int StreamDesktopFieldNumber = 6;
  /// <summary>Default value for the "stream_desktop" field</summary>
  public const bool StreamDesktopDefaultValue = false;

  private bool? streamDesktop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool StreamDesktop {
    get { return streamDesktop_ ?? StreamDesktopDefaultValue; }
    set {
      streamDesktop_ = value;
    }
  }
  /// <summary>Gets whether the "stream_desktop" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStreamDesktop {
    get { return streamDesktop_ != null; }
  }
  /// <summary>Clears the value of the "stream_desktop" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStreamDesktop() {
    streamDesktop_ = null;
  }

  /// <summary>Field number for the "device_token" field.</summary>
  public const int DeviceTokenFieldNumber = 7;
  /// <summary>Default value for the "device_token" field</summary>
  public readonly static pb::ByteString DeviceTokenDefaultValue = pb::ByteString.Empty;

  private pb::ByteString deviceToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString DeviceToken {
    get { return deviceToken_ ?? DeviceTokenDefaultValue; }
    set {
      deviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "device_token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeviceToken {
    get { return deviceToken_ != null; }
  }
  /// <summary>Clears the value of the "device_token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeviceToken() {
    deviceToken_ = null;
  }

  /// <summary>Field number for the "pin" field.</summary>
  public const int PinFieldNumber = 8;
  /// <summary>Default value for the "pin" field</summary>
  public readonly static pb::ByteString PinDefaultValue = pb::ByteString.Empty;

  private pb::ByteString pin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Pin {
    get { return pin_ ?? PinDefaultValue; }
    set {
      pin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "pin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPin {
    get { return pin_ != null; }
  }
  /// <summary>Clears the value of the "pin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPin() {
    pin_ = null;
  }

  /// <summary>Field number for the "enable_video_streaming" field.</summary>
  public const int EnableVideoStreamingFieldNumber = 9;
  /// <summary>Default value for the "enable_video_streaming" field</summary>
  public const bool EnableVideoStreamingDefaultValue = true;

  private bool? enableVideoStreaming_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableVideoStreaming {
    get { return enableVideoStreaming_ ?? EnableVideoStreamingDefaultValue; }
    set {
      enableVideoStreaming_ = value;
    }
  }
  /// <summary>Gets whether the "enable_video_streaming" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableVideoStreaming {
    get { return enableVideoStreaming_ != null; }
  }
  /// <summary>Clears the value of the "enable_video_streaming" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableVideoStreaming() {
    enableVideoStreaming_ = null;
  }

  /// <summary>Field number for the "enable_audio_streaming" field.</summary>
  public const int EnableAudioStreamingFieldNumber = 10;
  /// <summary>Default value for the "enable_audio_streaming" field</summary>
  public const bool EnableAudioStreamingDefaultValue = true;

  private bool? enableAudioStreaming_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableAudioStreaming {
    get { return enableAudioStreaming_ ?? EnableAudioStreamingDefaultValue; }
    set {
      enableAudioStreaming_ = value;
    }
  }
  /// <summary>Gets whether the "enable_audio_streaming" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableAudioStreaming {
    get { return enableAudioStreaming_ != null; }
  }
  /// <summary>Clears the value of the "enable_audio_streaming" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableAudioStreaming() {
    enableAudioStreaming_ = null;
  }

  /// <summary>Field number for the "enable_input_streaming" field.</summary>
  public const int EnableInputStreamingFieldNumber = 11;
  /// <summary>Default value for the "enable_input_streaming" field</summary>
  public const bool EnableInputStreamingDefaultValue = true;

  private bool? enableInputStreaming_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableInputStreaming {
    get { return enableInputStreaming_ ?? EnableInputStreamingDefaultValue; }
    set {
      enableInputStreaming_ = value;
    }
  }
  /// <summary>Gets whether the "enable_input_streaming" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableInputStreaming {
    get { return enableInputStreaming_ != null; }
  }
  /// <summary>Clears the value of the "enable_input_streaming" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableInputStreaming() {
    enableInputStreaming_ = null;
  }

  /// <summary>Field number for the "network_test" field.</summary>
  public const int NetworkTestFieldNumber = 12;
  /// <summary>Default value for the "network_test" field</summary>
  public const bool NetworkTestDefaultValue = false;

  private bool? networkTest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool NetworkTest {
    get { return networkTest_ ?? NetworkTestDefaultValue; }
    set {
      networkTest_ = value;
    }
  }
  /// <summary>Gets whether the "network_test" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNetworkTest {
    get { return networkTest_ != null; }
  }
  /// <summary>Clears the value of the "network_test" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNetworkTest() {
    networkTest_ = null;
  }

  /// <summary>Field number for the "client_id" field.</summary>
  public const int ClientIdFieldNumber = 13;
  /// <summary>Default value for the "client_id" field</summary>
  public const ulong ClientIdDefaultValue = 0UL;

  private ulong? clientId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong ClientId {
    get { return clientId_ ?? ClientIdDefaultValue; }
    set {
      clientId_ = value;
    }
  }
  /// <summary>Gets whether the "client_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientId {
    get { return clientId_ != null; }
  }
  /// <summary>Clears the value of the "client_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientId() {
    clientId_ = null;
  }

  /// <summary>Field number for the "supported_transport" field.</summary>
  public const int SupportedTransportFieldNumber = 14;
  private static readonly pb::FieldCodec<global::EStreamTransport> _repeated_supportedTransport_codec
      = pb::FieldCodec.ForEnum(112, x => (int) x, x => (global::EStreamTransport) x);
  private readonly pbc::RepeatedField<global::EStreamTransport> supportedTransport_ = new pbc::RepeatedField<global::EStreamTransport>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EStreamTransport> SupportedTransport {
    get { return supportedTransport_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteDeviceStreamingRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteDeviceStreamingRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RequestId != other.RequestId) return false;
    if (MaximumResolutionX != other.MaximumResolutionX) return false;
    if (MaximumResolutionY != other.MaximumResolutionY) return false;
    if (AudioChannelCount != other.AudioChannelCount) return false;
    if (DeviceVersion != other.DeviceVersion) return false;
    if (StreamDesktop != other.StreamDesktop) return false;
    if (DeviceToken != other.DeviceToken) return false;
    if (Pin != other.Pin) return false;
    if (EnableVideoStreaming != other.EnableVideoStreaming) return false;
    if (EnableAudioStreaming != other.EnableAudioStreaming) return false;
    if (EnableInputStreaming != other.EnableInputStreaming) return false;
    if (NetworkTest != other.NetworkTest) return false;
    if (ClientId != other.ClientId) return false;
    if(!supportedTransport_.Equals(other.supportedTransport_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRequestId) hash ^= RequestId.GetHashCode();
    if (HasMaximumResolutionX) hash ^= MaximumResolutionX.GetHashCode();
    if (HasMaximumResolutionY) hash ^= MaximumResolutionY.GetHashCode();
    if (HasAudioChannelCount) hash ^= AudioChannelCount.GetHashCode();
    if (HasDeviceVersion) hash ^= DeviceVersion.GetHashCode();
    if (HasStreamDesktop) hash ^= StreamDesktop.GetHashCode();
    if (HasDeviceToken) hash ^= DeviceToken.GetHashCode();
    if (HasPin) hash ^= Pin.GetHashCode();
    if (HasEnableVideoStreaming) hash ^= EnableVideoStreaming.GetHashCode();
    if (HasEnableAudioStreaming) hash ^= EnableAudioStreaming.GetHashCode();
    if (HasEnableInputStreaming) hash ^= EnableInputStreaming.GetHashCode();
    if (HasNetworkTest) hash ^= NetworkTest.GetHashCode();
    if (HasClientId) hash ^= ClientId.GetHashCode();
    hash ^= supportedTransport_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasRequestId) {
      output.WriteRawTag(8);
      output.WriteUInt32(RequestId);
    }
    if (HasMaximumResolutionX) {
      output.WriteRawTag(16);
      output.WriteInt32(MaximumResolutionX);
    }
    if (HasMaximumResolutionY) {
      output.WriteRawTag(24);
      output.WriteInt32(MaximumResolutionY);
    }
    if (HasAudioChannelCount) {
      output.WriteRawTag(32);
      output.WriteInt32(AudioChannelCount);
    }
    if (HasDeviceVersion) {
      output.WriteRawTag(42);
      output.WriteString(DeviceVersion);
    }
    if (HasStreamDesktop) {
      output.WriteRawTag(48);
      output.WriteBool(StreamDesktop);
    }
    if (HasDeviceToken) {
      output.WriteRawTag(58);
      output.WriteBytes(DeviceToken);
    }
    if (HasPin) {
      output.WriteRawTag(66);
      output.WriteBytes(Pin);
    }
    if (HasEnableVideoStreaming) {
      output.WriteRawTag(72);
      output.WriteBool(EnableVideoStreaming);
    }
    if (HasEnableAudioStreaming) {
      output.WriteRawTag(80);
      output.WriteBool(EnableAudioStreaming);
    }
    if (HasEnableInputStreaming) {
      output.WriteRawTag(88);
      output.WriteBool(EnableInputStreaming);
    }
    if (HasNetworkTest) {
      output.WriteRawTag(96);
      output.WriteBool(NetworkTest);
    }
    if (HasClientId) {
      output.WriteRawTag(104);
      output.WriteUInt64(ClientId);
    }
    supportedTransport_.WriteTo(output, _repeated_supportedTransport_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasRequestId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
    }
    if (HasMaximumResolutionX) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumResolutionX);
    }
    if (HasMaximumResolutionY) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumResolutionY);
    }
    if (HasAudioChannelCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudioChannelCount);
    }
    if (HasDeviceVersion) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceVersion);
    }
    if (HasStreamDesktop) {
      size += 1 + 1;
    }
    if (HasDeviceToken) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeviceToken);
    }
    if (HasPin) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Pin);
    }
    if (HasEnableVideoStreaming) {
      size += 1 + 1;
    }
    if (HasEnableAudioStreaming) {
      size += 1 + 1;
    }
    if (HasEnableInputStreaming) {
      size += 1 + 1;
    }
    if (HasNetworkTest) {
      size += 1 + 1;
    }
    if (HasClientId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientId);
    }
    size += supportedTransport_.CalculateSize(_repeated_supportedTransport_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteDeviceStreamingRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasRequestId) {
      RequestId = other.RequestId;
    }
    if (other.HasMaximumResolutionX) {
      MaximumResolutionX = other.MaximumResolutionX;
    }
    if (other.HasMaximumResolutionY) {
      MaximumResolutionY = other.MaximumResolutionY;
    }
    if (other.HasAudioChannelCount) {
      AudioChannelCount = other.AudioChannelCount;
    }
    if (other.HasDeviceVersion) {
      DeviceVersion = other.DeviceVersion;
    }
    if (other.HasStreamDesktop) {
      StreamDesktop = other.StreamDesktop;
    }
    if (other.HasDeviceToken) {
      DeviceToken = other.DeviceToken;
    }
    if (other.HasPin) {
      Pin = other.Pin;
    }
    if (other.HasEnableVideoStreaming) {
      EnableVideoStreaming = other.EnableVideoStreaming;
    }
    if (other.HasEnableAudioStreaming) {
      EnableAudioStreaming = other.EnableAudioStreaming;
    }
    if (other.HasEnableInputStreaming) {
      EnableInputStreaming = other.EnableInputStreaming;
    }
    if (other.HasNetworkTest) {
      NetworkTest = other.NetworkTest;
    }
    if (other.HasClientId) {
      ClientId = other.ClientId;
    }
    supportedTransport_.Add(other.supportedTransport_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RequestId = input.ReadUInt32();
          break;
        }
        case 16: {
          MaximumResolutionX = input.ReadInt32();
          break;
        }
        case 24: {
          MaximumResolutionY = input.ReadInt32();
          break;
        }
        case 32: {
          AudioChannelCount = input.ReadInt32();
          break;
        }
        case 42: {
          DeviceVersion = input.ReadString();
          break;
        }
        case 48: {
          StreamDesktop = input.ReadBool();
          break;
        }
        case 58: {
          DeviceToken = input.ReadBytes();
          break;
        }
        case 66: {
          Pin = input.ReadBytes();
          break;
        }
        case 72: {
          EnableVideoStreaming = input.ReadBool();
          break;
        }
        case 80: {
          EnableAudioStreaming = input.ReadBool();
          break;
        }
        case 88: {
          EnableInputStreaming = input.ReadBool();
          break;
        }
        case 96: {
          NetworkTest = input.ReadBool();
          break;
        }
        case 104: {
          ClientId = input.ReadUInt64();
          break;
        }
        case 114:
        case 112: {
          supportedTransport_.AddEntriesFrom(input, _repeated_supportedTransport_codec);
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasRequestId) {
      return false;
    }
    return true;
  }
}

public sealed partial class CMsgRemoteDeviceStreamingCancelRequest : pb::IMessage<CMsgRemoteDeviceStreamingCancelRequest> {
  private static readonly pb::MessageParser<CMsgRemoteDeviceStreamingCancelRequest> _parser = new pb::MessageParser<CMsgRemoteDeviceStreamingCancelRequest>(() => new CMsgRemoteDeviceStreamingCancelRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteDeviceStreamingCancelRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientDiscoveryReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceStreamingCancelRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceStreamingCancelRequest(CMsgRemoteDeviceStreamingCancelRequest other) : this() {
    requestId_ = other.requestId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceStreamingCancelRequest Clone() {
    return new CMsgRemoteDeviceStreamingCancelRequest(this);
  }

  /// <summary>Field number for the "request_id" field.</summary>
  public const int RequestIdFieldNumber = 1;
  /// <summary>Default value for the "request_id" field</summary>
  public const uint RequestIdDefaultValue = 0;

  private uint? requestId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequestId {
    get { return requestId_ ?? RequestIdDefaultValue; }
    set {
      requestId_ = value;
    }
  }
  /// <summary>Gets whether the "request_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestId {
    get { return requestId_ != null; }
  }
  /// <summary>Clears the value of the "request_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestId() {
    requestId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteDeviceStreamingCancelRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteDeviceStreamingCancelRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RequestId != other.RequestId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRequestId) hash ^= RequestId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasRequestId) {
      output.WriteRawTag(8);
      output.WriteUInt32(RequestId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasRequestId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteDeviceStreamingCancelRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasRequestId) {
      RequestId = other.RequestId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RequestId = input.ReadUInt32();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasRequestId) {
      return false;
    }
    return true;
  }
}

public sealed partial class CMsgRemoteDeviceStreamingResponse : pb::IMessage<CMsgRemoteDeviceStreamingResponse> {
  private static readonly pb::MessageParser<CMsgRemoteDeviceStreamingResponse> _parser = new pb::MessageParser<CMsgRemoteDeviceStreamingResponse>(() => new CMsgRemoteDeviceStreamingResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteDeviceStreamingResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientDiscoveryReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceStreamingResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceStreamingResponse(CMsgRemoteDeviceStreamingResponse other) : this() {
    requestId_ = other.requestId_;
    result_ = other.result_;
    port_ = other.port_;
    encryptedSessionKey_ = other.encryptedSessionKey_;
    transport_ = other.transport_;
    relayServer_ = other.relayServer_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceStreamingResponse Clone() {
    return new CMsgRemoteDeviceStreamingResponse(this);
  }

  /// <summary>Field number for the "request_id" field.</summary>
  public const int RequestIdFieldNumber = 1;
  /// <summary>Default value for the "request_id" field</summary>
  public const uint RequestIdDefaultValue = 0;

  private uint? requestId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequestId {
    get { return requestId_ ?? RequestIdDefaultValue; }
    set {
      requestId_ = value;
    }
  }
  /// <summary>Gets whether the "request_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestId {
    get { return requestId_ != null; }
  }
  /// <summary>Clears the value of the "request_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestId() {
    requestId_ = null;
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  /// <summary>Default value for the "result" field</summary>
  public const global::ERemoteDeviceStreamingResult ResultDefaultValue = global::ERemoteDeviceStreamingResult.KEremoteDeviceStreamingSuccess;

  private global::ERemoteDeviceStreamingResult? result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ERemoteDeviceStreamingResult Result {
    get { return result_ ?? ResultDefaultValue; }
    set {
      result_ = value;
    }
  }
  /// <summary>Gets whether the "result" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResult {
    get { return result_ != null; }
  }
  /// <summary>Clears the value of the "result" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResult() {
    result_ = null;
  }

  /// <summary>Field number for the "port" field.</summary>
  public const int PortFieldNumber = 3;
  /// <summary>Default value for the "port" field</summary>
  public const uint PortDefaultValue = 0;

  private uint? port_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Port {
    get { return port_ ?? PortDefaultValue; }
    set {
      port_ = value;
    }
  }
  /// <summary>Gets whether the "port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPort {
    get { return port_ != null; }
  }
  /// <summary>Clears the value of the "port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPort() {
    port_ = null;
  }

  /// <summary>Field number for the "encrypted_session_key" field.</summary>
  public const int EncryptedSessionKeyFieldNumber = 4;
  /// <summary>Default value for the "encrypted_session_key" field</summary>
  public readonly static pb::ByteString EncryptedSessionKeyDefaultValue = pb::ByteString.Empty;

  private pb::ByteString encryptedSessionKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString EncryptedSessionKey {
    get { return encryptedSessionKey_ ?? EncryptedSessionKeyDefaultValue; }
    set {
      encryptedSessionKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "encrypted_session_key" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEncryptedSessionKey {
    get { return encryptedSessionKey_ != null; }
  }
  /// <summary>Clears the value of the "encrypted_session_key" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEncryptedSessionKey() {
    encryptedSessionKey_ = null;
  }

  /// <summary>Field number for the "transport" field.</summary>
  public const int TransportFieldNumber = 6;
  /// <summary>Default value for the "transport" field</summary>
  public const global::EStreamTransport TransportDefaultValue = global::EStreamTransport.KEstreamTransportUdp;

  private global::EStreamTransport? transport_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EStreamTransport Transport {
    get { return transport_ ?? TransportDefaultValue; }
    set {
      transport_ = value;
    }
  }
  /// <summary>Gets whether the "transport" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTransport {
    get { return transport_ != null; }
  }
  /// <summary>Clears the value of the "transport" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTransport() {
    transport_ = null;
  }

  /// <summary>Field number for the "relay_server" field.</summary>
  public const int RelayServerFieldNumber = 7;
  /// <summary>Default value for the "relay_server" field</summary>
  public const string RelayServerDefaultValue = "";

  private string relayServer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RelayServer {
    get { return relayServer_ ?? RelayServerDefaultValue; }
    set {
      relayServer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "relay_server" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRelayServer {
    get { return relayServer_ != null; }
  }
  /// <summary>Clears the value of the "relay_server" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRelayServer() {
    relayServer_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteDeviceStreamingResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteDeviceStreamingResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RequestId != other.RequestId) return false;
    if (Result != other.Result) return false;
    if (Port != other.Port) return false;
    if (EncryptedSessionKey != other.EncryptedSessionKey) return false;
    if (Transport != other.Transport) return false;
    if (RelayServer != other.RelayServer) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRequestId) hash ^= RequestId.GetHashCode();
    if (HasResult) hash ^= Result.GetHashCode();
    if (HasPort) hash ^= Port.GetHashCode();
    if (HasEncryptedSessionKey) hash ^= EncryptedSessionKey.GetHashCode();
    if (HasTransport) hash ^= Transport.GetHashCode();
    if (HasRelayServer) hash ^= RelayServer.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasRequestId) {
      output.WriteRawTag(8);
      output.WriteUInt32(RequestId);
    }
    if (HasResult) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Result);
    }
    if (HasPort) {
      output.WriteRawTag(24);
      output.WriteUInt32(Port);
    }
    if (HasEncryptedSessionKey) {
      output.WriteRawTag(34);
      output.WriteBytes(EncryptedSessionKey);
    }
    if (HasTransport) {
      output.WriteRawTag(48);
      output.WriteEnum((int) Transport);
    }
    if (HasRelayServer) {
      output.WriteRawTag(58);
      output.WriteString(RelayServer);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasRequestId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
    }
    if (HasResult) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
    }
    if (HasPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
    }
    if (HasEncryptedSessionKey) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedSessionKey);
    }
    if (HasTransport) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Transport);
    }
    if (HasRelayServer) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RelayServer);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteDeviceStreamingResponse other) {
    if (other == null) {
      return;
    }
    if (other.HasRequestId) {
      RequestId = other.RequestId;
    }
    if (other.HasResult) {
      Result = other.Result;
    }
    if (other.HasPort) {
      Port = other.Port;
    }
    if (other.HasEncryptedSessionKey) {
      EncryptedSessionKey = other.EncryptedSessionKey;
    }
    if (other.HasTransport) {
      Transport = other.Transport;
    }
    if (other.HasRelayServer) {
      RelayServer = other.RelayServer;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RequestId = input.ReadUInt32();
          break;
        }
        case 16: {
          result_ = (global::ERemoteDeviceStreamingResult) input.ReadEnum();
          break;
        }
        case 24: {
          Port = input.ReadUInt32();
          break;
        }
        case 34: {
          EncryptedSessionKey = input.ReadBytes();
          break;
        }
        case 48: {
          transport_ = (global::EStreamTransport) input.ReadEnum();
          break;
        }
        case 58: {
          RelayServer = input.ReadString();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasRequestId) {
      return false;
    }
    if (!HasResult) {
      return false;
    }
    return true;
  }
}

public sealed partial class CMsgRemoteDeviceProofRequest : pb::IMessage<CMsgRemoteDeviceProofRequest> {
  private static readonly pb::MessageParser<CMsgRemoteDeviceProofRequest> _parser = new pb::MessageParser<CMsgRemoteDeviceProofRequest>(() => new CMsgRemoteDeviceProofRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteDeviceProofRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientDiscoveryReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceProofRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceProofRequest(CMsgRemoteDeviceProofRequest other) : this() {
    challenge_ = other.challenge_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceProofRequest Clone() {
    return new CMsgRemoteDeviceProofRequest(this);
  }

  /// <summary>Field number for the "challenge" field.</summary>
  public const int ChallengeFieldNumber = 1;
  /// <summary>Default value for the "challenge" field</summary>
  public readonly static pb::ByteString ChallengeDefaultValue = pb::ByteString.Empty;

  private pb::ByteString challenge_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Challenge {
    get { return challenge_ ?? ChallengeDefaultValue; }
    set {
      challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "challenge" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasChallenge {
    get { return challenge_ != null; }
  }
  /// <summary>Clears the value of the "challenge" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearChallenge() {
    challenge_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteDeviceProofRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteDeviceProofRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Challenge != other.Challenge) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasChallenge) hash ^= Challenge.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasChallenge) {
      output.WriteRawTag(10);
      output.WriteBytes(Challenge);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasChallenge) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Challenge);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteDeviceProofRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasChallenge) {
      Challenge = other.Challenge;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Challenge = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasChallenge) {
      return false;
    }
    return true;
  }
}

public sealed partial class CMsgRemoteDeviceProofResponse : pb::IMessage<CMsgRemoteDeviceProofResponse> {
  private static readonly pb::MessageParser<CMsgRemoteDeviceProofResponse> _parser = new pb::MessageParser<CMsgRemoteDeviceProofResponse>(() => new CMsgRemoteDeviceProofResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteDeviceProofResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientDiscoveryReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceProofResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceProofResponse(CMsgRemoteDeviceProofResponse other) : this() {
    response_ = other.response_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceProofResponse Clone() {
    return new CMsgRemoteDeviceProofResponse(this);
  }

  /// <summary>Field number for the "response" field.</summary>
  public const int ResponseFieldNumber = 1;
  /// <summary>Default value for the "response" field</summary>
  public readonly static pb::ByteString ResponseDefaultValue = pb::ByteString.Empty;

  private pb::ByteString response_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Response {
    get { return response_ ?? ResponseDefaultValue; }
    set {
      response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "response" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResponse {
    get { return response_ != null; }
  }
  /// <summary>Clears the value of the "response" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResponse() {
    response_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteDeviceProofResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteDeviceProofResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Response != other.Response) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasResponse) hash ^= Response.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasResponse) {
      output.WriteRawTag(10);
      output.WriteBytes(Response);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasResponse) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Response);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteDeviceProofResponse other) {
    if (other == null) {
      return;
    }
    if (other.HasResponse) {
      Response = other.Response;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Response = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    if (!HasResponse) {
      return false;
    }
    return true;
  }
}

public sealed partial class CMsgRemoteDeviceStreamTransportSignal : pb::IMessage<CMsgRemoteDeviceStreamTransportSignal> {
  private static readonly pb::MessageParser<CMsgRemoteDeviceStreamTransportSignal> _parser = new pb::MessageParser<CMsgRemoteDeviceStreamTransportSignal>(() => new CMsgRemoteDeviceStreamTransportSignal());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRemoteDeviceStreamTransportSignal> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesRemoteclientDiscoveryReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceStreamTransportSignal() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceStreamTransportSignal(CMsgRemoteDeviceStreamTransportSignal other) : this() {
    token_ = other.token_;
    payload_ = other.payload_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRemoteDeviceStreamTransportSignal Clone() {
    return new CMsgRemoteDeviceStreamTransportSignal(this);
  }

  /// <summary>Field number for the "token" field.</summary>
  public const int TokenFieldNumber = 1;
  /// <summary>Default value for the "token" field</summary>
  public readonly static pb::ByteString TokenDefaultValue = pb::ByteString.Empty;

  private pb::ByteString token_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Token {
    get { return token_ ?? TokenDefaultValue; }
    set {
      token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasToken {
    get { return token_ != null; }
  }
  /// <summary>Clears the value of the "token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearToken() {
    token_ = null;
  }

  /// <summary>Field number for the "payload" field.</summary>
  public const int PayloadFieldNumber = 2;
  /// <summary>Default value for the "payload" field</summary>
  public readonly static pb::ByteString PayloadDefaultValue = pb::ByteString.Empty;

  private pb::ByteString payload_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Payload {
    get { return payload_ ?? PayloadDefaultValue; }
    set {
      payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "payload" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayload {
    get { return payload_ != null; }
  }
  /// <summary>Clears the value of the "payload" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayload() {
    payload_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRemoteDeviceStreamTransportSignal);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRemoteDeviceStreamTransportSignal other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Token != other.Token) return false;
    if (Payload != other.Payload) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasToken) hash ^= Token.GetHashCode();
    if (HasPayload) hash ^= Payload.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pb::ProtoPreconditions.CheckInitialized(this);
    if (HasToken) {
      output.WriteRawTag(10);
      output.WriteBytes(Token);
    }
    if (HasPayload) {
      output.WriteRawTag(18);
      output.WriteBytes(Payload);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasToken) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
    }
    if (HasPayload) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRemoteDeviceStreamTransportSignal other) {
    if (other == null) {
      return;
    }
    if (other.HasToken) {
      Token = other.Token;
    }
    if (other.HasPayload) {
      Payload = other.Payload;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Token = input.ReadBytes();
          break;
        }
        case 18: {
          Payload = input.ReadBytes();
          break;
        }
      }
    }
    pb::ProtoPreconditions.CheckMergedRequiredFields(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInitialized() {
    return true;
  }
}

#endregion


#endregion Designer generated code
